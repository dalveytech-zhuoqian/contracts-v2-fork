{
  "address": "0xBc6E531Cd4b3b58fA8B8F7B0Db05705e64447ec8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AccessManagedInvalidAuthority",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "delay",
          "type": "uint32"
        }
      ],
      "name": "AccessManagedRequiredDelay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AccessManagedUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "SafeCastOverflowedIntToUint",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fastPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeRefDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeFastDelta",
          "type": "uint256"
        }
      ],
      "name": "MaxCumulativeDeltaDiffExceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fastPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeRefDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeFastDelta",
          "type": "uint256"
        }
      ],
      "name": "PriceData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdatePrice",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getChainPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getFastPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initDefaultOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_market",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_maxCumulativeDeltaDiffs",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxCumulativeDeltaDiffs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "maxDeviationBP",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "priceDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPriceUpdateDelay",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "priceDataInterval",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sampleSpace",
              "type": "uint32"
            }
          ],
          "internalType": "struct OracleHandler.ConfigStruct",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_markets",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "setUSDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "8d8e6e1fbf0edfe343a1be3391dbac70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"MaxCumulativeDeltaDiffExceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"PriceData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getChainPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getFastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDefaultOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_market\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxCumulativeDeltaDiffs\",\"type\":\"uint256[]\"}],\"name\":\"setMaxCumulativeDeltaDiffs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxDeviationBP\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"priceDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPriceUpdateDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"priceDataInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sampleSpace\",\"type\":\"uint32\"}],\"internalType\":\"struct OracleHandler.ConfigStruct\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_markets\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/OracleFacet.sol\":\"OracleFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        (bool success, bytes memory data) = authority.staticcall(\\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\\n        );\\n        if (success) {\\n            if (data.length >= 0x40) {\\n                (immediate, delay) = abi.decode(data, (bool, uint32));\\n            } else if (data.length >= 0x20) {\\n                immediate = abi.decode(data, (bool));\\n            }\\n        }\\n        return (immediate, delay);\\n    }\\n}\\n\",\"keccak256\":\"0xb3875997b0d8705e29aa20fee88e1dfef93df438794ae1ad8ba2eb016a4dd4e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x4cc0766bd7fb7b3bafb70afa2a93b6e313a0baec7a35ad1b57505be7861c1030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"},\"src/ac/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessManaged} from \\\"./LibAccessManaged.sol\\\";\\nimport {AuthorityUtils} from \\\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\\\";\\nimport {IAccessManager} from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\n\\nabstract contract IAccessManaged {\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    modifier restricted() {\\n        //todo\\n        // _checkCanCall(msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        //todo\\n        // require(msg.sender == address(this), \\\"AccessManaged: only self\\\");\\n        _;\\n    }\\n\\n    modifier onlySelfOrRestricted() {\\n        // todo\\n        _;\\n    }\\n\\n    function _authority() internal view returns (address) {\\n        return LibAccessManaged.Storage()._authority;\\n    }\\n\\n    function _checkCanCall(address caller, bytes calldata data) internal {\\n        LibAccessManaged.AccessManagedStorage storage $ = LibAccessManaged\\n            .Storage();\\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\\n            _authority(),\\n            caller,\\n            address(this),\\n            bytes4(data[0:4])\\n        );\\n        if (!immediate) {\\n            if (delay > 0) {\\n                $._consumingSchedule = true;\\n                IAccessManager(_authority()).consumeScheduledOp(caller, data);\\n                $._consumingSchedule = false;\\n            } else {\\n                revert AccessManagedUnauthorized(caller);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x700a4ea7d3d814bbed1329515f3008c49bca0dd7130be2bc09bd499aba206c87\",\"license\":\"MIT\"},\"src/ac/LibAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary LibAccessManaged {\\n    struct AccessManagedStorage {\\n        address _authority;\\n        bool _consumingSchedule;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessManaged\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessManagedStorageLocation =\\n        0xf3177357ab46d8af007ab3fdb9af81da189e1068fefdc0073dca88a2cab40a00;\\n\\n    function Storage() internal pure returns (AccessManagedStorage storage fs) {\\n        bytes32 position = AccessManagedStorageLocation;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe8fc43c1b84ea9c7d025060019e7749e4fdf9c9a554df88cbf59a0469d3e3e3\",\"license\":\"BUSL-1.1\"},\"src/facets/OracleFacet.sol\":{\"content\":\"// 1. \\u5916\\u90e8\\u9884\\u8a00\\u673a\\u7684\\u4f9d\\u8d56\\n// 2. \\u5904\\u7406\\u9884\\u8a00\\u673a\\u7cbe\\u5ea6\\n// 3. \\u4ef7\\u683c\\u903b\\u8f91\\u7684\\u65b9\\u6cd5\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IAccessManaged} from \\\"../ac/IAccessManaged.sol\\\";\\nimport {OracleHandler} from \\\"../lib/oracle/OracleHandler.sol\\\";\\nimport {IPrice} from \\\"../interfaces/IPrice.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\\\";\\n\\ncontract OracleFacet is IAccessManaged, IPrice, UsingDiamondOwner {\\n    //================================================================\\n    //   ADMIN functions\\n    //================================================================\\n\\n    function initDefaultOracleConfig() external onlyOwner {\\n        OracleHandler.ConfigStruct memory _config = OracleHandler.ConfigStruct({\\n            maxDeviationBP: 100, //\\u8d85\\u8fc7 1% \\u8fdb\\u884c\\u6bd4\\u4ef7\\n            priceDuration: 300, //checked\\n            maxPriceUpdateDelay: 3600, // checked\\n            priceDataInterval: 60, //checked\\n            sampleSpace: 1 //checked\\n        });\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.config = _config;\\n    }\\n\\n    function setOracleConfig(\\n        OracleHandler.ConfigStruct memory _config\\n    ) external restricted {\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.config = _config;\\n    }\\n\\n    function setPrices(\\n        uint16[] memory _markets,\\n        uint256[] memory _prices\\n    ) external restricted {\\n        OracleHandler.setPrices(_markets, _prices);\\n    }\\n\\n    function setMaxCumulativeDeltaDiffs(\\n        uint16[] memory _market,\\n        uint256[] memory _maxCumulativeDeltaDiffs\\n    ) external restricted {\\n        for (uint256 i = 0; i < _market.length; i++) {\\n            OracleHandler.Storage().maxCumulativeDeltaDiffs[\\n                _market[i]\\n            ] = _maxCumulativeDeltaDiffs[i];\\n        }\\n    }\\n\\n    function setUSDT(address _feed) external restricted {\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.USDT = _feed;\\n    }\\n\\n    //========================================================================\\n    //     view functions\\n    //========================================================================\\n\\n    function priceFeed(uint16 market) external view returns (address) {\\n        return OracleHandler.Storage().priceFeeds[market];\\n    }\\n\\n    function usdtFeed() external view returns (address) {\\n        return OracleHandler.Storage().USDT;\\n    }\\n\\n    function getPrice(\\n        uint16 market,\\n        bool _maximise\\n    ) external view override returns (uint256) {\\n        return OracleHandler.getPrice(market, _maximise);\\n    }\\n\\n    function getChainPrice(\\n        uint16 market,\\n        bool _maximise\\n    ) external view returns (uint256) {\\n        return OracleHandler.getChainPrice(market, _maximise);\\n    }\\n\\n    function getFastPrice(\\n        uint16 market,\\n        uint256 _referencePrice,\\n        bool _maximise\\n    ) external view returns (uint256) {\\n        return OracleHandler.getFastPrice(market, _referencePrice, _maximise);\\n    }\\n}\\n\",\"keccak256\":\"0x8921ce53e68284af7432cf8d64fa0e8e32e65bc7a9922c6a5f412d2676b5c3ab\",\"license\":\"MIT\"},\"src/interfaces/IPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPrice {\\n    function getPrice(\\n        uint16 market,\\n        bool _maximise\\n    ) external view returns (uint256);\\n    function priceFeed(uint16 market) external view returns (address);\\n    function usdtFeed() external view returns (address);\\n}\\n\",\"keccak256\":\"0x84e8f9351198f067ed6f5fe1aa50c7400da7b637e346b9a9f19dac3e7decd0d2\",\"license\":\"MIT\"},\"src/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    function version() external view returns (uint256);\\n\\n    function description() external view returns (string memory);\\n\\n    function aggregator() external view returns (address);\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestRound() external view returns (uint80);\\n\\n    function getRoundData(\\n        uint80 roundId\\n    ) external view returns (uint80, int256, uint256, uint256, uint80);\\n}\\n\",\"keccak256\":\"0x9f509678e2c05dedffbb7a26bf8f36cade173e483423edf691264cd95cd2b546\",\"license\":\"MIT\"},\"src/lib/oracle/OracleHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IPriceFeed} from \\\"../../interfaces/IPriceFeed.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary OracleHandler {\\n    using SafeCast for int256;\\n\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"blex.oracle.storage\\\");\\n    uint256 constant PRICE_PRECISION = 10 ** 30;\\n    uint256 constant ONE_USD = PRICE_PRECISION;\\n    uint256 constant CUMULATIVE_DELTA_PRECISION = 10 * 1000 * 1000;\\n    uint256 constant MAX_REF_PRICE = type(uint160).max;\\n    uint256 constant MAX_CUMULATIVE_REF_DELTA = type(uint32).max;\\n    uint256 constant MAX_CUMULATIVE_FAST_DELTA = type(uint32).max;\\n    uint256 constant BP_DIVISOR = 10000;\\n\\n    // fit data in a uint256 slot to save gas costs\\n    struct PriceDataItem {\\n        uint160 refPrice; // Chainlink price\\n        uint32 refTime; // last updated at time\\n        uint32 cumulativeRefDelta; // cumulative Chainlink price delta\\n        uint32 cumulativeFastDelta; // cumulative fast price delta\\n    }\\n\\n    struct ConfigStruct {\\n        uint32 maxDeviationBP; // 1000\\n        uint32 priceDuration; // 300\\n        uint32 maxPriceUpdateDelay; // 3600\\n        uint32 priceDataInterval; // 60\\n        uint32 sampleSpace; // 3\\n    }\\n\\n    struct StorageStruct {\\n        address USDT;\\n        ConfigStruct config;\\n        mapping(uint16 => address) priceFeeds;\\n        mapping(uint16 => uint256) spreadBP;\\n        mapping(uint16 => uint256) prices;\\n        mapping(uint16 => uint256) maxCumulativeDeltaDiffs;\\n        mapping(uint16 => PriceDataItem) priceData;\\n    }\\n\\n    event PriceData(\\n        uint16 market,\\n        uint256 refPrice,\\n        uint256 fastPrice,\\n        uint256 cumulativeRefDelta,\\n        uint256 cumulativeFastDelta\\n    );\\n    event MaxCumulativeDeltaDiffExceeded(\\n        uint16 market,\\n        uint256 refPrice,\\n        uint256 fastPrice,\\n        uint256 cumulativeRefDelta,\\n        uint256 cumulativeFastDelta\\n    );\\n    event UpdatePrice(address feed, uint16 indexed market, uint256 price);\\n\\n    function Storage() internal pure returns (StorageStruct storage fs) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function config() internal view returns (ConfigStruct memory) {\\n        return Storage().config;\\n    }\\n\\n    function setPrices(\\n        uint16[] memory _markets,\\n        uint256[] memory _prices\\n    ) internal {\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            _setPrice(_markets[i], _prices[i]);\\n        }\\n    }\\n\\n    function setPrice(uint16 _market, uint256 _price) internal {\\n        _setPrice(_market, _price);\\n    }\\n\\n    //==================================================================================================\\n    //================ view    functions================================================================\\n    //==================================================================================================\\n\\n    // under regular operation, the fastPrice (prices[token]) is returned and there is no spread returned from this function,\\n    // though VaultPriceFeed might apply its own spread\\n    //\\n    // if the fastPrice has not been updated within priceDuration then it is ignored and only _refPrice with a spread is used (spread: spreadBPIfInactive)\\n    // in case the fastPrice has not been updated for maxPriceUpdateDelay then the _refPrice with a larger spread is used (spread: spreadBPIfChainError)\\n    //\\n    // there will be a spread from the _refPrice to the fastPrice in the following cases:\\n    // - in case the maxDeviationBP between _refPrice and fastPrice is exceeded\\n    // - in case watchers flag an issue\\n    // - in case the cumulativeFastDelta exceeds the cumulativeRefDelta by the maxCumulativeDeltaDiff\\n\\n    function getPrice(\\n        uint16 market,\\n        bool _maximise\\n    ) internal view returns (uint256) {\\n        uint256 chainPrice = getChainPrice(market, _maximise);\\n        return getFastPrice(market, chainPrice, _maximise);\\n    }\\n\\n    function getFastPrice(\\n        uint16 market,\\n        uint256 _refPrice,\\n        bool _maximise\\n    ) internal view returns (uint256) {\\n        uint256 lastUpdate = uint256(Storage().priceData[market].refTime);\\n        uint256 fastPrice = Storage().prices[market];\\n        if (\\n            block.timestamp >\\n            lastUpdate + uint256(Storage().config.maxPriceUpdateDelay) ||\\n            block.timestamp >\\n            lastUpdate + uint256(Storage().config.priceDuration) ||\\n            fastPrice == 0\\n        ) {\\n            return _refPrice;\\n        }\\n\\n        uint256 diffBP = _refPrice > fastPrice\\n            ? _refPrice - fastPrice\\n            : fastPrice - _refPrice;\\n        diffBP = (diffBP * BP_DIVISOR) / _refPrice;\\n\\n        // create a spread between the _refPrice and the fastPrice if the maxDeviationBP is exceeded\\n        // or if watchers have flagged an issue with the fast price\\n        // 1. fastPrice\\n        // 2. fastprice > chainlink, false\\n        // 2. 1%\\n        // 3. fastPricechainlink/, fastPrice\\n\\n        if (\\n            favorFastPrice(market) &&\\n            diffBP <= uint256(Storage().config.maxDeviationBP)\\n        ) {\\n            return fastPrice;\\n        }\\n\\n        return comparePrices(_refPrice, fastPrice, _maximise);\\n    }\\n\\n    function comparePrices(\\n        uint256 price1,\\n        uint256 price2,\\n        bool maximize\\n    ) internal pure returns (uint256) {\\n        return\\n            maximize\\n                ? (price1 > price2 ? price1 : price2)\\n                : (price1 < price2 ? price1 : price2);\\n    }\\n\\n    function getChainPrice(\\n        uint16 market,\\n        bool _maximise\\n    ) internal view returns (uint256) {\\n        uint256 xxxUSD = _getChainPrice(market, _maximise);\\n        uint256 _USDTUSD = _getChainPrice(market, _maximise);\\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\\n        }\\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\\n    }\\n\\n    //==================================================================================================\\n    //================ internal functions================================================================\\n    //==================================================================================================\\n    function _setPrice(uint16 market, uint256 _price) internal {\\n        // check if the market has a price feed\\n        if (Storage().priceFeeds[market] != address(0)) {\\n            uint256 refPrice = _getLatestPriceWithUSDT(market);\\n            uint256 fastPrice = Storage().prices[market];\\n\\n            (\\n                uint256 prevRefPrice,\\n                uint256 refTime,\\n                uint256 cumulativeRefDelta,\\n                uint256 cumulativeFastDelta\\n            ) = _getPriceData(market);\\n\\n            if (prevRefPrice > 0) {\\n                // chainlink\\n                uint256 refDeltaAmount = refPrice > prevRefPrice\\n                    ? refPrice - prevRefPrice\\n                    : prevRefPrice - refPrice;\\n                // fastPrice\\n                uint256 fastDeltaAmount = fastPrice > _price\\n                    ? fastPrice - _price\\n                    : _price - fastPrice;\\n\\n                // reset cumulative delta values if it is a new time window\\n                if (\\n                    refTime / Storage().config.priceDataInterval !=\\n                    block.timestamp / Storage().config.priceDataInterval\\n                ) {\\n                    cumulativeRefDelta = 0;\\n                    cumulativeFastDelta = 0;\\n                }\\n                //\\n                cumulativeRefDelta =\\n                    cumulativeRefDelta +\\n                    (refDeltaAmount * CUMULATIVE_DELTA_PRECISION) /\\n                    prevRefPrice;\\n                cumulativeFastDelta =\\n                    cumulativeFastDelta +\\n                    (fastDeltaAmount * CUMULATIVE_DELTA_PRECISION) /\\n                    fastPrice;\\n            }\\n\\n            if (\\n                cumulativeFastDelta > cumulativeRefDelta &&\\n                cumulativeFastDelta - cumulativeRefDelta >\\n                Storage().maxCumulativeDeltaDiffs[market]\\n            ) {\\n                emit MaxCumulativeDeltaDiffExceeded(\\n                    market,\\n                    refPrice,\\n                    fastPrice,\\n                    cumulativeRefDelta,\\n                    cumulativeFastDelta\\n                );\\n            }\\n\\n            _setPriceData(\\n                market,\\n                refPrice,\\n                cumulativeRefDelta,\\n                cumulativeFastDelta\\n            );\\n            emit PriceData(\\n                market,\\n                refPrice,\\n                fastPrice,\\n                cumulativeRefDelta,\\n                cumulativeFastDelta\\n            );\\n        }\\n\\n        Storage().prices[market] = _price;\\n        emit UpdatePrice(msg.sender, market, _price);\\n    }\\n\\n    function _setPriceData(\\n        uint16 _market,\\n        uint256 _refPrice,\\n        uint256 _cumulativeRefDelta,\\n        uint256 _cumulativeFastDelta\\n    ) internal {\\n        require(_refPrice < MAX_REF_PRICE, \\\"FastPriceFeed: invalid refPrice\\\");\\n        // skip validation of block.timestamp, it should only be out of range after the year 2100\\n        require(\\n            _cumulativeRefDelta < MAX_CUMULATIVE_REF_DELTA,\\n            \\\"FastPriceFeed: invalid cumulativeRefDelta\\\"\\n        );\\n        require(\\n            _cumulativeFastDelta < MAX_CUMULATIVE_FAST_DELTA,\\n            \\\"FastPriceFeed: invalid cumulativeFastDelta\\\"\\n        );\\n\\n        Storage().priceData[_market] = PriceDataItem(\\n            uint160(_refPrice),\\n            uint32(block.timestamp),\\n            uint32(_cumulativeRefDelta),\\n            uint32(_cumulativeFastDelta)\\n        );\\n    }\\n\\n    function _getLatestPriceWithUSDT(\\n        uint16 market\\n    ) internal view returns (uint256) {\\n        uint256 xxxUSD = _getLatestPrice(market);\\n        uint256 _USDTUSD = (IPriceFeed(Storage().USDT).latestAnswer())\\n            .toUint256();\\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\\n        }\\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\\n    }\\n\\n    function _getLatestPrice(uint16 market) internal view returns (uint256) {\\n        address _feed = Storage().priceFeeds[market];\\n        require(_feed != address(0), \\\"PriceFeed: invalid price feed\\\");\\n        IPriceFeed _priceFeed = IPriceFeed(_feed);\\n        int256 _price = _priceFeed.latestAnswer();\\n        require(_price > 0, \\\"PriceFeed: invalid price\\\");\\n        return uint256(_price);\\n    }\\n\\n    function _getChainPrice(\\n        uint16 market,\\n        bool _maximise\\n    ) internal view returns (uint256) {\\n        address _feed = Storage().priceFeeds[market];\\n        require(_feed != address(0), \\\"PriceFeed: invalid price feed\\\");\\n\\n        uint256 _price = 0;\\n        uint80 _id = IPriceFeed(Storage().priceFeeds[market]).latestRound();\\n\\n        for (uint80 i = 0; i < Storage().config.sampleSpace; i++) {\\n            if (_id <= i) {\\n                break;\\n            }\\n            uint256 p;\\n\\n            if (i == 0) {\\n                int256 _p = IPriceFeed(Storage().priceFeeds[market])\\n                    .latestAnswer();\\n                require(_p > 0, \\\"PriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            } else {\\n                (, int256 _p, , , ) = IPriceFeed(Storage().priceFeeds[market])\\n                    .getRoundData(_id - i);\\n                require(_p > 0, \\\"PriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            }\\n\\n            if (_price == 0) {\\n                _price = p;\\n                continue;\\n            }\\n\\n            if (_maximise && p > _price) {\\n                _price = p;\\n                continue;\\n            }\\n\\n            if (!_maximise && p < _price) {\\n                _price = p;\\n            }\\n        }\\n\\n        require(_price > 0, \\\"PriceFeed: could not fetch price\\\");\\n        uint256 _decimals = IPriceFeed(Storage().priceFeeds[market]).decimals();\\n        return (_price * PRICE_PRECISION) / (10 ** _decimals);\\n    }\\n\\n    function setMaxCumulativeDeltaDiff(\\n        uint16 market,\\n        uint256 _maxCumulativeDeltaDiff\\n    ) internal {\\n        Storage().maxCumulativeDeltaDiffs[market] = _maxCumulativeDeltaDiff;\\n    }\\n\\n    function _getPriceData(\\n        uint16 market\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n        PriceDataItem memory data = Storage().priceData[market];\\n        return (\\n            uint256(data.refPrice),\\n            uint256(data.refTime),\\n            uint256(data.cumulativeRefDelta),\\n            uint256(data.cumulativeFastDelta)\\n        );\\n    }\\n\\n    function favorFastPrice(uint16 market) internal view returns (bool) {\\n        (\\n            ,\\n            ,\\n            uint256 cumulativeRefDelta,\\n            uint256 cumulativeFastDelta\\n        ) = _getPriceData(market);\\n        return\\n            isFastPriceFavored(\\n                cumulativeRefDelta,\\n                cumulativeFastDelta,\\n                Storage().maxCumulativeDeltaDiffs[market]\\n            );\\n    }\\n\\n    function isFastPriceFavored(\\n        uint256 cumulativeRefDelta,\\n        uint256 cumulativeFastDelta,\\n        uint256 maxCumulativeDeltaDiffs\\n    ) internal pure returns (bool) {\\n        if (\\n            cumulativeFastDelta > cumulativeRefDelta &&\\n            cumulativeFastDelta - cumulativeRefDelta > maxCumulativeDeltaDiffs\\n        ) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x3bb2e9c9ce5d354df0720e0c32fa87907e48e1989a64fde1b1efee41a094ae29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523461002057610011610025565b612c1e620000318239612c1e90f35b61002b565b60405190565b600080fdfe60806040526004361015610013575b610750565b61001e6000356100bd565b80632e6e6ea9146100b85780633d58e05c146100b357806350c1b923146100ae57806364b6db53146100a957806367af1a03146100a4578063aa94bda81461009f578063cd5ba3d41461009a578063db61122514610095578063df66914e146100905763f224f69a0361000e5761071c565b6106e7565b6106b1565b61067e565b610582565b610365565b61031f565b6102be565b610240565b6101b1565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b61ffff1690565b6100e8816100d8565b036100ef57565b600080fd5b90503590610101826100df565b565b90565b61010f81610103565b0361011657565b600080fd5b9050359061012882610106565b565b151590565b6101388161012a565b0361013f57565b600080fd5b905035906101518261012f565b565b90916060828403126101895761018661016f84600085016100f4565b9361017d816020860161011b565b93604001610144565b90565b6100ce565b61019790610103565b9052565b91906101af9060006020850194019061018e565b565b346101e2576101de6101cd6101c7366004610153565b9161075a565b6101d56100c3565b9182918261019b565b0390f35b6100c9565b90602082820312610201576101fe916000016100f4565b90565b6100ce565b60018060a01b031690565b61021a90610206565b90565b61022690610211565b9052565b919061023e9060006020850194019061021d565b565b346102705761026c61025b6102563660046101e7565b6107e1565b6102636100c3565b9182918261022a565b0390f35b6100c9565b61027e81610211565b0361028557565b600080fd5b9050359061029782610275565b565b906020828203126102b3576102b09160000161028a565b90565b6100ce565b60000190565b346102ec576102d66102d1366004610299565b6108a2565b6102de6100c3565b806102e8816102b8565b0390f35b6100c9565b919060408382031261031a578061030e61031792600086016100f4565b93602001610144565b90565b6100ce565b346103505761034c61033b6103353660046102f1565b906108ad565b6103436100c3565b9182918261019b565b0390f35b6100c9565b600091031261036057565b6100ce565b3461039357610375366004610355565b61037d610cfa565b6103856100c3565b8061038f816102b8565b0390f35b6100c9565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906103c79061039d565b810190811060018060401b038211176103df57604052565b6103a7565b906103f76103f06100c3565b92836103bd565b565b60018060401b03811161040f5760208091020190565b6103a7565b600080fd5b9092919261042e610429826103f9565b6103e4565b938185526020808601920283019281841161046b57915b8383106104525750505050565b6020809161046084866100f4565b815201920191610445565b610414565b9080601f8301121561048e5781602061048b93359101610419565b90565b610398565b60018060401b0381116104a95760208091020190565b6103a7565b909291926104c36104be82610493565b6103e4565b938185526020808601920283019281841161050057915b8383106104e75750505050565b602080916104f5848661011b565b8152019201916104da565b610414565b9080601f8301121561052357816020610520933591016104ae565b90565b610398565b91909160408184031261057d57600081013560018060401b0381116105785783610553918301610470565b92602082013560018060401b038111610573576105709201610505565b90565b6100d3565b6100d3565b6100ce565b346105b15761059b610595366004610528565b90610ea8565b6105a36100c3565b806105ad816102b8565b0390f35b6100c9565b600080fd5b63ffffffff1690565b6105cd816105bb565b036105d457565b600080fd5b905035906105e6826105c4565b565b919060a08382031261065a576106539061060260a06103e4565b9361061082600083016105d9565b600086015261062282602083016105d9565b602086015261063482604083016105d9565b604086015261064682606083016105d9565b60608601526080016105d9565b6080830152565b6105b6565b9060a08282031261067957610676916000016105e8565b90565b6100ce565b346106ac5761069661069136600461065f565b610ed5565b61069e6100c3565b806106a8816102b8565b0390f35b6100c9565b346106e2576106de6106cd6106c73660046102f1565b90610ee0565b6106d56100c3565b9182918261019b565b0390f35b6100c9565b34610717576106f7366004610355565b610713610702610ef6565b61070a6100c3565b9182918261022a565b0390f35b6100c9565b3461074b5761073561072f366004610528565b90610f2d565b61073d6100c3565b80610747816102b8565b0390f35b6100c9565b600080fd5b600090565b9161077092610767610755565b5091909161112a565b90565b600090565b90565b61078f61078a610794926100d8565b610778565b6100d8565b90565b906107a19061077b565b600052602052604060002090565b60001c90565b60018060a01b031690565b6107cc6107d1916107af565b6107b5565b90565b6107de90546107c0565b90565b610801610806916107f0610773565b5060026107fb611311565b01610797565b6107d4565b90565b6108129061088c565b565b60001b90565b9061082b60018060a01b0391610814565b9181191691161790565b61084961084461084e92610206565b610778565b610206565b90565b61085a90610835565b90565b61086690610851565b90565b90565b9061088161087c6108889261085d565b610869565b825461081a565b9055565b6108a090600061089a611311565b0161086c565b565b6108ab90610809565b565b906108c0916108ba610755565b50611372565b90565b60209181520190565b60207f207468697320616374696f6e0000000000000000000000000000000000000000917f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60008201520152565b610927602c6040926108c3565b610930816108cc565b0190565b61094a906020810190600081830391015261091a565b90565b1561095457565b61095c6100c3565b62461bcd60e51b81528061097260048201610934565b0390fd5b6109a5610981611422565b61099f61099961099460043394016107d4565b610211565b91610211565b1461094d565b6109ad610c59565b565b6109b960a06103e4565b90565b90565b6109d36109ce6109d8926109bc565b610778565b6105bb565b90565b906109e5906105bb565b9052565b90565b610a006109fb610a05926109e9565b610778565b6105bb565b90565b90565b610a1f610a1a610a2492610a08565b610778565b6105bb565b90565b90565b610a3e610a39610a4392610a27565b610778565b6105bb565b90565b90565b610a5d610a58610a6292610a46565b610778565b6105bb565b90565b610a6f90516105bb565b90565b90610a8163ffffffff91610814565b9181191691161790565b610a9f610a9a610aa4926105bb565b610778565b6105bb565b90565b90565b90610abf610aba610ac692610a8b565b610aa7565b8254610a72565b9055565b60201b90565b90610ae263ffffffff60201b91610aca565b9181191691161790565b90610b01610afc610b0892610a8b565b610aa7565b8254610ad0565b9055565b60401b90565b90610b2463ffffffff60401b91610b0c565b9181191691161790565b90610b43610b3e610b4a92610a8b565b610aa7565b8254610b12565b9055565b60601b90565b90610b6663ffffffff60601b91610b4e565b9181191691161790565b90610b85610b80610b8c92610a8b565b610aa7565b8254610b54565b9055565b60801b90565b90610ba863ffffffff60801b91610b90565b9181191691161790565b90610bc7610bc2610bce92610a8b565b610aa7565b8254610b96565b9055565b90610c4560806000610c4b94610bf5828201610bef848801610a65565b90610aaa565b610c0d828201610c0760208801610a65565b90610aec565b610c25828201610c1f60408801610a65565b90610b2e565b610c3d828201610c3760608801610a65565b90610b70565b019201610a65565b90610bb2565b565b90610c5791610bd2565b565b606461012c610e10603c90600192610c6f6109af565b94610c79906109bf565b6000860190610c87916109db565b610c90906109ec565b6020850190610c9e916109db565b610ca790610a0b565b6040840190610cb5916109db565b610cbe90610a2a565b6060830190610ccc916109db565b610cd590610a49565b6080820190610ce3916109db565b610ceb611311565b60010190610cf891610c4d565b565b610d02610976565b565b90610d0e91610e24565b565b90565b610d27610d22610d2c92610d10565b610778565b610103565b90565b6001610d3b9101610103565b90565b5190565b634e487b7160e01b600052603260045260246000fd5b5190565b90610d6682610d58565b811015610d77576020809102010190565b610d42565b610d869051610103565b90565b90610d9382610d3e565b811015610da4576020809102010190565b610d42565b610db390516100d8565b90565b90610dc09061077b565b600052602052604060002090565b90610ddb60001991610814565b9181191691161790565b610df9610df4610dfe92610103565b610778565b610103565b90565b90565b90610e19610e14610e2092610de5565b610e01565b8254610dce565b9055565b9190610e306000610d13565b5b80610e4c610e46610e4187610d3e565b610103565b91610103565b1015610ea257610e9d90610e98610e6c610e67858490610d5c565b610d7c565b610e936005610e79611311565b01610e8d610e888a8790610d89565b610da9565b90610db6565b610e04565b610d2f565b610e31565b50509050565b90610eb291610d04565b565b610ebd90610ebf565b565b610ed3906001610ecd611311565b01610c4d565b565b610ede90610eb4565b565b90610ef391610eed610755565b5061142d565b90565b610efe610773565b50610f126000610f0c611311565b016107d4565b90565b90610f1f91610f21565b565b90610f2b9161144f565b565b90610f3791610f15565b565b90610f439061077b565b600052602052604060002090565b60a01c90565b63ffffffff1690565b610f6c610f7191610f51565b610f57565b90565b610f7e9054610f60565b90565b610f95610f90610f9a926105bb565b610778565b610103565b90565b90565b610fac610fb1916107af565b610f9d565b90565b610fbe9054610fa0565b90565b60401c90565b610fd3610fd891610fc1565b610f57565b90565b610fe59054610fc7565b90565b634e487b7160e01b600052601160045260246000fd5b61100d61101391939293610103565b92610103565b820180921161101e57565b610fe8565b60201c90565b61103561103a91611023565b610f57565b90565b6110479054611029565b90565b61105961105f91939293610103565b92610103565b820391821161106a57565b610fe8565b90565b61108661108161108b9261106f565b610778565b610103565b90565b611099612710611072565b90565b6110ab6110b191939293610103565b92610103565b916110bd838202610103565b9281840414901517156110cc57565b610fe8565b634e487b7160e01b600052601260045260246000fd5b6110f36110f991610103565b91610103565b908115611104570490565b6110d1565b61111561111a916107af565b610f57565b90565b6111279054611109565b90565b9091611134610755565b5061115d6111586000611152600661114a611311565b018690610f39565b01610f74565b610f81565b9161117b611176600461116e611311565b018390610db6565b610fb4565b92426111b66111b06111ab846111a56111a060006001611199611311565b0101610fdb565b610f81565b90610ffe565b610103565b91610103565b119081156112aa575b50801561128f575b61128957836111de6111d885610103565b91610103565b11600014611270576112166112106112096111fa87879061104a565b5b61120361108e565b9061109c565b86906110e7565b916114c6565b9081611237575b506112315761122e92919091611507565b90565b50905090565b905061126861126261125d61125860006001611251611311565b010161111d565b610f81565b610103565b91610103565b11153861121d565b61121661121061120961128486889061104a565b6111fb565b50505090565b50826112a461129e6000610d13565b91610103565b146111c7565b90506112e66112e06112db42936112d56112d0600060016112c9611311565b010161103d565b610f81565b90610ffe565b610103565b91610103565b11386111bf565b7f215c1de8a6459dcf0789cdceef063745b34797042fd1550737c0f263affdef6490565b6113196112ed565b90565b90565b61133361132e6113389261131c565b610778565b610103565b90565b61135068327cb2734119d3b7a9601e1b61131f565b90565b90565b61136a61136561136f92611353565b610778565b610103565b90565b906113919061137f610755565b5061138b8382906119c4565b926119c4565b816113bf6113b96113b46000196113af6113a961133b565b91611356565b6110e7565b610103565b91610103565b106113e1576113d96113de926113d361133b565b906110e7565b61109c565b90565b6113f66113fb926113f061133b565b9061109c565b6110e7565b90565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b61142a6113fe565b90565b61144c91611439610755565b50611445828290611372565b909161112a565b90565b91909161145c6000610d13565b5b8061147861147261146d85610d3e565b610103565b91610103565b10156114bb576114b6906114b1611498611493858490610d89565b610da9565b6114ab6114a6888590610d5c565b610d7c565b90611f57565b610d2f565b61145d565b50509050565b600090565b6114f9611504916114d56114c1565b506114fe6114e2826123e0565b9592509050939260056114f3611311565b01610db6565b610fb4565b91612478565b90565b91611510610755565b50600014611540578161152b61152583610103565b91610103565b1160001461153957505b5b90565b9050611535565b8161155361154d83610103565b91610103565b1060001461156257505b611536565b905061155d565b61157d61157861158292610d10565b610778565b610206565b90565b61158e90611569565b90565b60007f5072696365466565643a20696e76616c69642070726963652066656564000000910152565b6115c6601d6020926108c3565b6115cf81611591565b0190565b6115e990602081019060008183039101526115b9565b90565b156115f357565b6115fb6100c3565b62461bcd60e51b815280611611600482016115d3565b0390fd5b61161e90610835565b90565b61162a90611615565b90565b61163690610851565b90565b60e01b90565b60018060501b031690565b6116538161163f565b0361165a57565b600080fd5b9050519061166c8261164a565b565b90602082820312611688576116859160000161165f565b90565b6100ce565b6116956100c3565b3d6000823e3d90fd5b6116b26116ad6116b792610d10565b610778565b61163f565b90565b60016116c6910161163f565b90565b60801c90565b6116db6116e0916116c9565b610f57565b90565b6116ed90546116cf565b90565b6117046116ff611709926105bb565b610778565b61163f565b90565b61171861171e9161163f565b9161163f565b90039060018060501b03821161173057565b610fe8565b90565b61174181611735565b0361174857565b600080fd5b9050519061175a82611738565b565b9050519061176982610106565b565b919060a0838203126117bd57611784816000850161165f565b92611792826020830161174d565b926117ba6117a3846040850161175c565b936117b1816060860161175c565b9360800161165f565b90565b6100ce565b6117cb9061163f565b9052565b91906117e3906000602085019401906117c2565b565b6117f96117f46117fe92610d10565b610778565b611735565b90565b60007f5072696365466565643a20696e76616c69642070726963650000000000000000910152565b61183660186020926108c3565b61183f81611801565b0190565b6118599060208101906000818303910152611829565b90565b1561186357565b61186b6100c3565b62461bcd60e51b81528061188160048201611843565b0390fd5b61189961189461189e92611735565b610778565b610103565b90565b906020828203126118bb576118b89160000161174d565b90565b6100ce565b60007f5072696365466565643a20636f756c64206e6f74206665746368207072696365910152565b6118f4602080926108c3565b6118fd816118c0565b0190565b61191790602081019060008183039101526118e8565b90565b1561192157565b6119296100c3565b62461bcd60e51b81528061193f60048201611901565b0390fd5b60ff1690565b61195281611943565b0361195957565b600080fd5b9050519061196b82611949565b565b90602082820312611987576119849160000161195e565b90565b6100ce565b6119a061199b6119a592611943565b610778565b610103565b90565b6119b190610103565b604d81116119bf57600a0a90565b610fe8565b91906119ce610755565b50611a116119ef6119ea60026119e2611311565b018690610797565b6107d4565b611a0a611a046119ff6000611585565b610211565b91610211565b14156115ec565b611a1b6000610d13565b611a636020611a4d611a48611a43611a3e6002611a36611311565b018a90610797565b6107d4565b611621565b61162d565b63668a0f0290611a5b6100c3565b938492611639565b82528180611a73600482016102b8565b03915afa908115611e7e57600091611e50575b50611a91600061169e565b5b80611aba611ab4611aaf60006001611aa8611311565b01016116e3565b6116f0565b9161163f565b1015611e345781611ad3611acd8361163f565b9161163f565b1115611d4257611ae1610755565b5080611af6611af0600061169e565b9161163f565b14600014611c6557611b466020611b30611b2b611b26611b216002611b19611311565b018c90610797565b6107d4565b611621565b61162d565b6350d25bcd90611b3e6100c3565b938492611639565b82528180611b56600482016102b8565b03915afa8015611c6057611b8f91600091611c32575b50611b8a81611b84611b7e60006117e5565b91611735565b1361185c565b611885565b5b83611ba4611b9e6000610d13565b91610103565b14611c26578480611c0c575b611c0057611bbe851561012a565b80611be6575b611bd9575b50611bd4905b6116ba565b611a92565b611bd49193509290611bc9565b5080611bfa611bf486610103565b91610103565b10611bc4565b611bd491935092611bcf565b5080611c20611c1a86610103565b91610103565b11611bb0565b611bd491935092611bcf565b611c53915060203d8111611c59575b611c4b81836103bd565b8101906118a1565b38611b6c565b503d611c41565b61168d565b611ccb60a0611c97611c92611c8d611c886002611c80611311565b018c90610797565b6107d4565b611621565b61162d565b639a6fc8f590611cc0611cab87879061170c565b92611cb46100c3565b95869485938493611639565b8352600483016117cf565b03915afa8015611d3d57611d0791600080929050611d0c575b50611d0281611cfc611cf660006117e5565b91611735565b1361185c565b611885565b611b90565b611d2d915060a03d8111611d36575b611d2581836103bd565b81019061176b565b50505090611ce4565b503d611d1b565b61168d565b505090506020611d96611d91611d8c611d87611dac96975b611d7787611d71611d6b6000610d13565b91610103565b1161191a565b6002611d81611311565b01610797565b6107d4565b611621565b61162d565b63313ce56790611da46100c3565b948592611639565b82528180611dbc600482016102b8565b03915afa918215611e2f57611df2611de3611dfe94611df893600091611e01575b5061198c565b92611dec61133b565b9061109c565b916119a8565b906110e7565b90565b611e22915060203d8111611e28575b611e1a81836103bd565b81019061196d565b38611ddd565b503d611e10565b61168d565b505090506020611d96611d91611d8c611d87611dac9697611d5a565b611e71915060203d8111611e77575b611e6981836103bd565b81019061166e565b38611a86565b503d611e5f565b61168d565b60601c90565b611e95611e9a91611e83565b610f57565b90565b611ea79054611e89565b90565b90565b611ec1611ebc611ec692611eaa565b610778565b610103565b90565b611ed562989680611ead565b90565b611ee1906100d8565b9052565b90959492611f3194611f20611f2a92611f16608096611f0c60a088019c6000890190611ed8565b602087019061018e565b604085019061018e565b606083019061018e565b019061018e565b565b916020611f55929493611f4e6040820196600083019061021d565b019061018e565b565b90611f75611f706002611f68611311565b018490610797565b6107d4565b611f90611f8a611f856000611585565b610211565b91610211565b03611ffb575b611fb481611faf6004611fa7611311565b018590610db6565b610e04565b339190611fe17ff653c98010ec108e873f9d5638c10569732da12002329d3774f0d71d8e8665149261077b565b92611ff6611fed6100c3565b92839283611f33565b0390a2565b612004826124d8565b61202161201c6004612014611311565b018590610db6565b610fb4565b61202a846123e0565b9492919094918061204461203e6000610d13565b91610103565b11612141575b5050806120b49161206361205d87610103565b91610103565b1180612101575b6120bc575b61207d878487908492612995565b869293947f42c806f38e7c76d89b3ad48a1519c8ba45071b5c990c34328b7f97e342781c1f956120ab6100c3565b95869586611ee5565b0390a1611f96565b868385916120f98885907f47cda1c6d4dcb5355efae6dfde16ddf80dbe6f35912baa2068348a0fd49f5f43956120f06100c3565b95869586611ee5565b0390a161206f565b5061210d81869061104a565b61213b61213561213061212b6005612123611311565b018c90610db6565b610fb4565b610103565b91610103565b1161206a565b839591929561215861215283610103565b91610103565b116000146122a55761216b84829061104a565b5b918561218061217a8a610103565b91610103565b11600014612292576121bc612196878a9061104a565b5b946121b66121b1600060016121aa611311565b0101611e9d565b610f81565b906110e7565b6121f56121ef6121ea426121e46121df600060016121d8611311565b0101611e9d565b610f81565b906110e7565b610103565b91610103565b03612252575b61223e61222e61224b946122286120b49795612223612245969361221d611ec9565b9061109c565b6110e7565b90610ffe565b9792612238611ec9565b9061109c565b86906110e7565b90610ffe565b903861204a565b5094506120b49161224561223e61222e61224b946122286122736000610d13565b9a6122236122816000610d13565b9c96505095975050945050506121fb565b6121bc6122a089889061104a565b612197565b6122b081859061104a565b61216c565b60018060a01b031690565b6122cc6122d1916107af565b6122b5565b90565b6122de90546122c0565b90565b906122eb90610206565b9052565b60c01c90565b612301612306916122ef565b610f57565b90565b61231390546122f5565b90565b612322612327916100bd565b610f57565b90565b6123349054612316565b90565b61234160806103e4565b90565b906123a96123a06000612355612337565b9461236c6123648383016122d4565b8388016122e1565b61238361237a838301610f74565b602088016109db565b61239a612391838301612309565b604088016109db565b0161232a565b606084016109db565b565b6123b490612344565b90565b6123c19051610206565b90565b6123d86123d36123dd92610206565b610778565b610103565b90565b61241b612420916123ef610755565b506123f8610755565b50612401610755565b5061240a610755565b506006612415611311565b01610f39565b6123ab565b61243461242f600083016123b7565b6123c4565b61244861244360208401610a65565b610f81565b9261247161246c606061246561246060408801610a65565b610f81565b9501610a65565b610f81565b9193929190565b9190916124836114c1565b508261249761249183610103565b91610103565b1192836124b0575b5050506124ab57600190565b600090565b6124cf9293506124c9916124c39161104a565b92610103565b91610103565b1138808061249f565b6124ea906124e4610755565b50612a7c565b612528602061251261250d6125086000612502611311565b016107d4565b611621565b61162d565b6350d25bcd906125206100c3565b938492611639565b82528180612538600482016102b8565b03915afa80156125ef57612554916000916125c1575b50612b94565b8161258261257c61257760001961257261256c61133b565b91611356565b6110e7565b610103565b91610103565b106125a45761259c6125a19261259661133b565b906110e7565b61109c565b90565b6125b96125be926125b361133b565b9061109c565b6110e7565b90565b6125e2915060203d81116125e8575b6125da81836103bd565b8101906118a1565b3861254e565b503d6125d0565b61168d565b61260360018060a01b036123c4565b90565b60007f466173745072696365466565643a20696e76616c696420726566507269636500910152565b61263b601f6020926108c3565b61264481612606565b0190565b61265e906020810190600081830391015261262e565b90565b1561266857565b6126706100c3565b62461bcd60e51b81528061268660048201612648565b0390fd5b61269763ffffffff610f81565b90565b60207f6552656644656c74610000000000000000000000000000000000000000000000917f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201520152565b6126f560296040926108c3565b6126fe8161269a565b0190565b61271890602081019060008183039101526126e8565b90565b1561272257565b61272a6100c3565b62461bcd60e51b81528061274060048201612702565b0390fd5b61275163ffffffff610f81565b90565b60207f654661737444656c746100000000000000000000000000000000000000000000917f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201520152565b6127af602a6040926108c3565b6127b881612754565b0190565b6127d290602081019060008183039101526127a2565b90565b156127dc57565b6127e46100c3565b62461bcd60e51b8152806127fa600482016127bc565b0390fd5b61281261280d61281792610103565b610778565b610206565b90565b61282e61282961283392610103565b610778565b6105bb565b90565b61284060806103e4565b90565b90565b9061285b61285661286292610835565b612843565b825461081a565b9055565b60a01b90565b9061287e63ffffffff60a01b91612866565b9181191691161790565b9061289d6128986128a492610a8b565b610aa7565b825461286c565b9055565b60c01b90565b906128c063ffffffff60c01b916128a8565b9181191691161790565b906128df6128da6128e692610a8b565b610aa7565b82546128ae565b9055565b906128fc63ffffffff60e01b91611639565b9181191691161790565b9061291b61291661292292610a8b565b610aa7565b82546128ea565b9055565b9061298160606000612987946129498282016129438488016123b7565b90612846565b61296182820161295b60208801610a65565b90612888565b61297982820161297360408801610a65565b906128ca565b019201610a65565b90612906565b565b9061299391612926565b565b612a65612a7a9493612a5c612a15612a75956129ca816129c46129be6129b96125f4565b610103565b91610103565b10612661565b6129ed846129e76129e16129dc61268a565b610103565b91610103565b1061271b565b612a1088612a0a612a046129ff612744565b610103565b91610103565b106127d5565b6127fe565b95612a53612a34612a2e612a284261281a565b9561281a565b9261281a565b93612a4a612a40612836565b9960008b016122e1565b602089016109db565b604087016109db565b606085016109db565b6006612a6f611311565b01610f39565b612989565b565b6020612adc612ad7612aac612aa7612af295612a96610755565b506002612aa1611311565b01610797565b6107d4565b612ad281612acb612ac5612ac06000611585565b610211565b91610211565b14156115ec565b611621565b61162d565b6350d25bcd90612aea6100c3565b938492611639565b82528180612b02600482016102b8565b03915afa8015612b6c57612b3b91600091612b3e575b50612b3681612b30612b2a60006117e5565b91611735565b1361185c565b611885565b90565b612b5f915060203d8111612b65575b612b5781836103bd565b8101906118a1565b38612b18565b503d612b4d565b61168d565b612b7a90611735565b9052565b9190612b9290600060208501940190612b71565b565b612b9c610755565b5080612bb1612bab60006117e5565b91611735565b12612bc257612bbf90611885565b90565b612be490612bce6100c3565b918291635467221960e11b835260048301612b7e565b0390fdfea2646970667358221220f5c1d0197b700a953a893a8a7e07225a34c23aafea7bb3e874705720bce2e43164736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361015610013575b610750565b61001e6000356100bd565b80632e6e6ea9146100b85780633d58e05c146100b357806350c1b923146100ae57806364b6db53146100a957806367af1a03146100a4578063aa94bda81461009f578063cd5ba3d41461009a578063db61122514610095578063df66914e146100905763f224f69a0361000e5761071c565b6106e7565b6106b1565b61067e565b610582565b610365565b61031f565b6102be565b610240565b6101b1565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b61ffff1690565b6100e8816100d8565b036100ef57565b600080fd5b90503590610101826100df565b565b90565b61010f81610103565b0361011657565b600080fd5b9050359061012882610106565b565b151590565b6101388161012a565b0361013f57565b600080fd5b905035906101518261012f565b565b90916060828403126101895761018661016f84600085016100f4565b9361017d816020860161011b565b93604001610144565b90565b6100ce565b61019790610103565b9052565b91906101af9060006020850194019061018e565b565b346101e2576101de6101cd6101c7366004610153565b9161075a565b6101d56100c3565b9182918261019b565b0390f35b6100c9565b90602082820312610201576101fe916000016100f4565b90565b6100ce565b60018060a01b031690565b61021a90610206565b90565b61022690610211565b9052565b919061023e9060006020850194019061021d565b565b346102705761026c61025b6102563660046101e7565b6107e1565b6102636100c3565b9182918261022a565b0390f35b6100c9565b61027e81610211565b0361028557565b600080fd5b9050359061029782610275565b565b906020828203126102b3576102b09160000161028a565b90565b6100ce565b60000190565b346102ec576102d66102d1366004610299565b6108a2565b6102de6100c3565b806102e8816102b8565b0390f35b6100c9565b919060408382031261031a578061030e61031792600086016100f4565b93602001610144565b90565b6100ce565b346103505761034c61033b6103353660046102f1565b906108ad565b6103436100c3565b9182918261019b565b0390f35b6100c9565b600091031261036057565b6100ce565b3461039357610375366004610355565b61037d610cfa565b6103856100c3565b8061038f816102b8565b0390f35b6100c9565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906103c79061039d565b810190811060018060401b038211176103df57604052565b6103a7565b906103f76103f06100c3565b92836103bd565b565b60018060401b03811161040f5760208091020190565b6103a7565b600080fd5b9092919261042e610429826103f9565b6103e4565b938185526020808601920283019281841161046b57915b8383106104525750505050565b6020809161046084866100f4565b815201920191610445565b610414565b9080601f8301121561048e5781602061048b93359101610419565b90565b610398565b60018060401b0381116104a95760208091020190565b6103a7565b909291926104c36104be82610493565b6103e4565b938185526020808601920283019281841161050057915b8383106104e75750505050565b602080916104f5848661011b565b8152019201916104da565b610414565b9080601f8301121561052357816020610520933591016104ae565b90565b610398565b91909160408184031261057d57600081013560018060401b0381116105785783610553918301610470565b92602082013560018060401b038111610573576105709201610505565b90565b6100d3565b6100d3565b6100ce565b346105b15761059b610595366004610528565b90610ea8565b6105a36100c3565b806105ad816102b8565b0390f35b6100c9565b600080fd5b63ffffffff1690565b6105cd816105bb565b036105d457565b600080fd5b905035906105e6826105c4565b565b919060a08382031261065a576106539061060260a06103e4565b9361061082600083016105d9565b600086015261062282602083016105d9565b602086015261063482604083016105d9565b604086015261064682606083016105d9565b60608601526080016105d9565b6080830152565b6105b6565b9060a08282031261067957610676916000016105e8565b90565b6100ce565b346106ac5761069661069136600461065f565b610ed5565b61069e6100c3565b806106a8816102b8565b0390f35b6100c9565b346106e2576106de6106cd6106c73660046102f1565b90610ee0565b6106d56100c3565b9182918261019b565b0390f35b6100c9565b34610717576106f7366004610355565b610713610702610ef6565b61070a6100c3565b9182918261022a565b0390f35b6100c9565b3461074b5761073561072f366004610528565b90610f2d565b61073d6100c3565b80610747816102b8565b0390f35b6100c9565b600080fd5b600090565b9161077092610767610755565b5091909161112a565b90565b600090565b90565b61078f61078a610794926100d8565b610778565b6100d8565b90565b906107a19061077b565b600052602052604060002090565b60001c90565b60018060a01b031690565b6107cc6107d1916107af565b6107b5565b90565b6107de90546107c0565b90565b610801610806916107f0610773565b5060026107fb611311565b01610797565b6107d4565b90565b6108129061088c565b565b60001b90565b9061082b60018060a01b0391610814565b9181191691161790565b61084961084461084e92610206565b610778565b610206565b90565b61085a90610835565b90565b61086690610851565b90565b90565b9061088161087c6108889261085d565b610869565b825461081a565b9055565b6108a090600061089a611311565b0161086c565b565b6108ab90610809565b565b906108c0916108ba610755565b50611372565b90565b60209181520190565b60207f207468697320616374696f6e0000000000000000000000000000000000000000917f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60008201520152565b610927602c6040926108c3565b610930816108cc565b0190565b61094a906020810190600081830391015261091a565b90565b1561095457565b61095c6100c3565b62461bcd60e51b81528061097260048201610934565b0390fd5b6109a5610981611422565b61099f61099961099460043394016107d4565b610211565b91610211565b1461094d565b6109ad610c59565b565b6109b960a06103e4565b90565b90565b6109d36109ce6109d8926109bc565b610778565b6105bb565b90565b906109e5906105bb565b9052565b90565b610a006109fb610a05926109e9565b610778565b6105bb565b90565b90565b610a1f610a1a610a2492610a08565b610778565b6105bb565b90565b90565b610a3e610a39610a4392610a27565b610778565b6105bb565b90565b90565b610a5d610a58610a6292610a46565b610778565b6105bb565b90565b610a6f90516105bb565b90565b90610a8163ffffffff91610814565b9181191691161790565b610a9f610a9a610aa4926105bb565b610778565b6105bb565b90565b90565b90610abf610aba610ac692610a8b565b610aa7565b8254610a72565b9055565b60201b90565b90610ae263ffffffff60201b91610aca565b9181191691161790565b90610b01610afc610b0892610a8b565b610aa7565b8254610ad0565b9055565b60401b90565b90610b2463ffffffff60401b91610b0c565b9181191691161790565b90610b43610b3e610b4a92610a8b565b610aa7565b8254610b12565b9055565b60601b90565b90610b6663ffffffff60601b91610b4e565b9181191691161790565b90610b85610b80610b8c92610a8b565b610aa7565b8254610b54565b9055565b60801b90565b90610ba863ffffffff60801b91610b90565b9181191691161790565b90610bc7610bc2610bce92610a8b565b610aa7565b8254610b96565b9055565b90610c4560806000610c4b94610bf5828201610bef848801610a65565b90610aaa565b610c0d828201610c0760208801610a65565b90610aec565b610c25828201610c1f60408801610a65565b90610b2e565b610c3d828201610c3760608801610a65565b90610b70565b019201610a65565b90610bb2565b565b90610c5791610bd2565b565b606461012c610e10603c90600192610c6f6109af565b94610c79906109bf565b6000860190610c87916109db565b610c90906109ec565b6020850190610c9e916109db565b610ca790610a0b565b6040840190610cb5916109db565b610cbe90610a2a565b6060830190610ccc916109db565b610cd590610a49565b6080820190610ce3916109db565b610ceb611311565b60010190610cf891610c4d565b565b610d02610976565b565b90610d0e91610e24565b565b90565b610d27610d22610d2c92610d10565b610778565b610103565b90565b6001610d3b9101610103565b90565b5190565b634e487b7160e01b600052603260045260246000fd5b5190565b90610d6682610d58565b811015610d77576020809102010190565b610d42565b610d869051610103565b90565b90610d9382610d3e565b811015610da4576020809102010190565b610d42565b610db390516100d8565b90565b90610dc09061077b565b600052602052604060002090565b90610ddb60001991610814565b9181191691161790565b610df9610df4610dfe92610103565b610778565b610103565b90565b90565b90610e19610e14610e2092610de5565b610e01565b8254610dce565b9055565b9190610e306000610d13565b5b80610e4c610e46610e4187610d3e565b610103565b91610103565b1015610ea257610e9d90610e98610e6c610e67858490610d5c565b610d7c565b610e936005610e79611311565b01610e8d610e888a8790610d89565b610da9565b90610db6565b610e04565b610d2f565b610e31565b50509050565b90610eb291610d04565b565b610ebd90610ebf565b565b610ed3906001610ecd611311565b01610c4d565b565b610ede90610eb4565b565b90610ef391610eed610755565b5061142d565b90565b610efe610773565b50610f126000610f0c611311565b016107d4565b90565b90610f1f91610f21565b565b90610f2b9161144f565b565b90610f3791610f15565b565b90610f439061077b565b600052602052604060002090565b60a01c90565b63ffffffff1690565b610f6c610f7191610f51565b610f57565b90565b610f7e9054610f60565b90565b610f95610f90610f9a926105bb565b610778565b610103565b90565b90565b610fac610fb1916107af565b610f9d565b90565b610fbe9054610fa0565b90565b60401c90565b610fd3610fd891610fc1565b610f57565b90565b610fe59054610fc7565b90565b634e487b7160e01b600052601160045260246000fd5b61100d61101391939293610103565b92610103565b820180921161101e57565b610fe8565b60201c90565b61103561103a91611023565b610f57565b90565b6110479054611029565b90565b61105961105f91939293610103565b92610103565b820391821161106a57565b610fe8565b90565b61108661108161108b9261106f565b610778565b610103565b90565b611099612710611072565b90565b6110ab6110b191939293610103565b92610103565b916110bd838202610103565b9281840414901517156110cc57565b610fe8565b634e487b7160e01b600052601260045260246000fd5b6110f36110f991610103565b91610103565b908115611104570490565b6110d1565b61111561111a916107af565b610f57565b90565b6111279054611109565b90565b9091611134610755565b5061115d6111586000611152600661114a611311565b018690610f39565b01610f74565b610f81565b9161117b611176600461116e611311565b018390610db6565b610fb4565b92426111b66111b06111ab846111a56111a060006001611199611311565b0101610fdb565b610f81565b90610ffe565b610103565b91610103565b119081156112aa575b50801561128f575b61128957836111de6111d885610103565b91610103565b11600014611270576112166112106112096111fa87879061104a565b5b61120361108e565b9061109c565b86906110e7565b916114c6565b9081611237575b506112315761122e92919091611507565b90565b50905090565b905061126861126261125d61125860006001611251611311565b010161111d565b610f81565b610103565b91610103565b11153861121d565b61121661121061120961128486889061104a565b6111fb565b50505090565b50826112a461129e6000610d13565b91610103565b146111c7565b90506112e66112e06112db42936112d56112d0600060016112c9611311565b010161103d565b610f81565b90610ffe565b610103565b91610103565b11386111bf565b7f215c1de8a6459dcf0789cdceef063745b34797042fd1550737c0f263affdef6490565b6113196112ed565b90565b90565b61133361132e6113389261131c565b610778565b610103565b90565b61135068327cb2734119d3b7a9601e1b61131f565b90565b90565b61136a61136561136f92611353565b610778565b610103565b90565b906113919061137f610755565b5061138b8382906119c4565b926119c4565b816113bf6113b96113b46000196113af6113a961133b565b91611356565b6110e7565b610103565b91610103565b106113e1576113d96113de926113d361133b565b906110e7565b61109c565b90565b6113f66113fb926113f061133b565b9061109c565b6110e7565b90565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b61142a6113fe565b90565b61144c91611439610755565b50611445828290611372565b909161112a565b90565b91909161145c6000610d13565b5b8061147861147261146d85610d3e565b610103565b91610103565b10156114bb576114b6906114b1611498611493858490610d89565b610da9565b6114ab6114a6888590610d5c565b610d7c565b90611f57565b610d2f565b61145d565b50509050565b600090565b6114f9611504916114d56114c1565b506114fe6114e2826123e0565b9592509050939260056114f3611311565b01610db6565b610fb4565b91612478565b90565b91611510610755565b50600014611540578161152b61152583610103565b91610103565b1160001461153957505b5b90565b9050611535565b8161155361154d83610103565b91610103565b1060001461156257505b611536565b905061155d565b61157d61157861158292610d10565b610778565b610206565b90565b61158e90611569565b90565b60007f5072696365466565643a20696e76616c69642070726963652066656564000000910152565b6115c6601d6020926108c3565b6115cf81611591565b0190565b6115e990602081019060008183039101526115b9565b90565b156115f357565b6115fb6100c3565b62461bcd60e51b815280611611600482016115d3565b0390fd5b61161e90610835565b90565b61162a90611615565b90565b61163690610851565b90565b60e01b90565b60018060501b031690565b6116538161163f565b0361165a57565b600080fd5b9050519061166c8261164a565b565b90602082820312611688576116859160000161165f565b90565b6100ce565b6116956100c3565b3d6000823e3d90fd5b6116b26116ad6116b792610d10565b610778565b61163f565b90565b60016116c6910161163f565b90565b60801c90565b6116db6116e0916116c9565b610f57565b90565b6116ed90546116cf565b90565b6117046116ff611709926105bb565b610778565b61163f565b90565b61171861171e9161163f565b9161163f565b90039060018060501b03821161173057565b610fe8565b90565b61174181611735565b0361174857565b600080fd5b9050519061175a82611738565b565b9050519061176982610106565b565b919060a0838203126117bd57611784816000850161165f565b92611792826020830161174d565b926117ba6117a3846040850161175c565b936117b1816060860161175c565b9360800161165f565b90565b6100ce565b6117cb9061163f565b9052565b91906117e3906000602085019401906117c2565b565b6117f96117f46117fe92610d10565b610778565b611735565b90565b60007f5072696365466565643a20696e76616c69642070726963650000000000000000910152565b61183660186020926108c3565b61183f81611801565b0190565b6118599060208101906000818303910152611829565b90565b1561186357565b61186b6100c3565b62461bcd60e51b81528061188160048201611843565b0390fd5b61189961189461189e92611735565b610778565b610103565b90565b906020828203126118bb576118b89160000161174d565b90565b6100ce565b60007f5072696365466565643a20636f756c64206e6f74206665746368207072696365910152565b6118f4602080926108c3565b6118fd816118c0565b0190565b61191790602081019060008183039101526118e8565b90565b1561192157565b6119296100c3565b62461bcd60e51b81528061193f60048201611901565b0390fd5b60ff1690565b61195281611943565b0361195957565b600080fd5b9050519061196b82611949565b565b90602082820312611987576119849160000161195e565b90565b6100ce565b6119a061199b6119a592611943565b610778565b610103565b90565b6119b190610103565b604d81116119bf57600a0a90565b610fe8565b91906119ce610755565b50611a116119ef6119ea60026119e2611311565b018690610797565b6107d4565b611a0a611a046119ff6000611585565b610211565b91610211565b14156115ec565b611a1b6000610d13565b611a636020611a4d611a48611a43611a3e6002611a36611311565b018a90610797565b6107d4565b611621565b61162d565b63668a0f0290611a5b6100c3565b938492611639565b82528180611a73600482016102b8565b03915afa908115611e7e57600091611e50575b50611a91600061169e565b5b80611aba611ab4611aaf60006001611aa8611311565b01016116e3565b6116f0565b9161163f565b1015611e345781611ad3611acd8361163f565b9161163f565b1115611d4257611ae1610755565b5080611af6611af0600061169e565b9161163f565b14600014611c6557611b466020611b30611b2b611b26611b216002611b19611311565b018c90610797565b6107d4565b611621565b61162d565b6350d25bcd90611b3e6100c3565b938492611639565b82528180611b56600482016102b8565b03915afa8015611c6057611b8f91600091611c32575b50611b8a81611b84611b7e60006117e5565b91611735565b1361185c565b611885565b5b83611ba4611b9e6000610d13565b91610103565b14611c26578480611c0c575b611c0057611bbe851561012a565b80611be6575b611bd9575b50611bd4905b6116ba565b611a92565b611bd49193509290611bc9565b5080611bfa611bf486610103565b91610103565b10611bc4565b611bd491935092611bcf565b5080611c20611c1a86610103565b91610103565b11611bb0565b611bd491935092611bcf565b611c53915060203d8111611c59575b611c4b81836103bd565b8101906118a1565b38611b6c565b503d611c41565b61168d565b611ccb60a0611c97611c92611c8d611c886002611c80611311565b018c90610797565b6107d4565b611621565b61162d565b639a6fc8f590611cc0611cab87879061170c565b92611cb46100c3565b95869485938493611639565b8352600483016117cf565b03915afa8015611d3d57611d0791600080929050611d0c575b50611d0281611cfc611cf660006117e5565b91611735565b1361185c565b611885565b611b90565b611d2d915060a03d8111611d36575b611d2581836103bd565b81019061176b565b50505090611ce4565b503d611d1b565b61168d565b505090506020611d96611d91611d8c611d87611dac96975b611d7787611d71611d6b6000610d13565b91610103565b1161191a565b6002611d81611311565b01610797565b6107d4565b611621565b61162d565b63313ce56790611da46100c3565b948592611639565b82528180611dbc600482016102b8565b03915afa918215611e2f57611df2611de3611dfe94611df893600091611e01575b5061198c565b92611dec61133b565b9061109c565b916119a8565b906110e7565b90565b611e22915060203d8111611e28575b611e1a81836103bd565b81019061196d565b38611ddd565b503d611e10565b61168d565b505090506020611d96611d91611d8c611d87611dac9697611d5a565b611e71915060203d8111611e77575b611e6981836103bd565b81019061166e565b38611a86565b503d611e5f565b61168d565b60601c90565b611e95611e9a91611e83565b610f57565b90565b611ea79054611e89565b90565b90565b611ec1611ebc611ec692611eaa565b610778565b610103565b90565b611ed562989680611ead565b90565b611ee1906100d8565b9052565b90959492611f3194611f20611f2a92611f16608096611f0c60a088019c6000890190611ed8565b602087019061018e565b604085019061018e565b606083019061018e565b019061018e565b565b916020611f55929493611f4e6040820196600083019061021d565b019061018e565b565b90611f75611f706002611f68611311565b018490610797565b6107d4565b611f90611f8a611f856000611585565b610211565b91610211565b03611ffb575b611fb481611faf6004611fa7611311565b018590610db6565b610e04565b339190611fe17ff653c98010ec108e873f9d5638c10569732da12002329d3774f0d71d8e8665149261077b565b92611ff6611fed6100c3565b92839283611f33565b0390a2565b612004826124d8565b61202161201c6004612014611311565b018590610db6565b610fb4565b61202a846123e0565b9492919094918061204461203e6000610d13565b91610103565b11612141575b5050806120b49161206361205d87610103565b91610103565b1180612101575b6120bc575b61207d878487908492612995565b869293947f42c806f38e7c76d89b3ad48a1519c8ba45071b5c990c34328b7f97e342781c1f956120ab6100c3565b95869586611ee5565b0390a1611f96565b868385916120f98885907f47cda1c6d4dcb5355efae6dfde16ddf80dbe6f35912baa2068348a0fd49f5f43956120f06100c3565b95869586611ee5565b0390a161206f565b5061210d81869061104a565b61213b61213561213061212b6005612123611311565b018c90610db6565b610fb4565b610103565b91610103565b1161206a565b839591929561215861215283610103565b91610103565b116000146122a55761216b84829061104a565b5b918561218061217a8a610103565b91610103565b11600014612292576121bc612196878a9061104a565b5b946121b66121b1600060016121aa611311565b0101611e9d565b610f81565b906110e7565b6121f56121ef6121ea426121e46121df600060016121d8611311565b0101611e9d565b610f81565b906110e7565b610103565b91610103565b03612252575b61223e61222e61224b946122286120b49795612223612245969361221d611ec9565b9061109c565b6110e7565b90610ffe565b9792612238611ec9565b9061109c565b86906110e7565b90610ffe565b903861204a565b5094506120b49161224561223e61222e61224b946122286122736000610d13565b9a6122236122816000610d13565b9c96505095975050945050506121fb565b6121bc6122a089889061104a565b612197565b6122b081859061104a565b61216c565b60018060a01b031690565b6122cc6122d1916107af565b6122b5565b90565b6122de90546122c0565b90565b906122eb90610206565b9052565b60c01c90565b612301612306916122ef565b610f57565b90565b61231390546122f5565b90565b612322612327916100bd565b610f57565b90565b6123349054612316565b90565b61234160806103e4565b90565b906123a96123a06000612355612337565b9461236c6123648383016122d4565b8388016122e1565b61238361237a838301610f74565b602088016109db565b61239a612391838301612309565b604088016109db565b0161232a565b606084016109db565b565b6123b490612344565b90565b6123c19051610206565b90565b6123d86123d36123dd92610206565b610778565b610103565b90565b61241b612420916123ef610755565b506123f8610755565b50612401610755565b5061240a610755565b506006612415611311565b01610f39565b6123ab565b61243461242f600083016123b7565b6123c4565b61244861244360208401610a65565b610f81565b9261247161246c606061246561246060408801610a65565b610f81565b9501610a65565b610f81565b9193929190565b9190916124836114c1565b508261249761249183610103565b91610103565b1192836124b0575b5050506124ab57600190565b600090565b6124cf9293506124c9916124c39161104a565b92610103565b91610103565b1138808061249f565b6124ea906124e4610755565b50612a7c565b612528602061251261250d6125086000612502611311565b016107d4565b611621565b61162d565b6350d25bcd906125206100c3565b938492611639565b82528180612538600482016102b8565b03915afa80156125ef57612554916000916125c1575b50612b94565b8161258261257c61257760001961257261256c61133b565b91611356565b6110e7565b610103565b91610103565b106125a45761259c6125a19261259661133b565b906110e7565b61109c565b90565b6125b96125be926125b361133b565b9061109c565b6110e7565b90565b6125e2915060203d81116125e8575b6125da81836103bd565b8101906118a1565b3861254e565b503d6125d0565b61168d565b61260360018060a01b036123c4565b90565b60007f466173745072696365466565643a20696e76616c696420726566507269636500910152565b61263b601f6020926108c3565b61264481612606565b0190565b61265e906020810190600081830391015261262e565b90565b1561266857565b6126706100c3565b62461bcd60e51b81528061268660048201612648565b0390fd5b61269763ffffffff610f81565b90565b60207f6552656644656c74610000000000000000000000000000000000000000000000917f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201520152565b6126f560296040926108c3565b6126fe8161269a565b0190565b61271890602081019060008183039101526126e8565b90565b1561272257565b61272a6100c3565b62461bcd60e51b81528061274060048201612702565b0390fd5b61275163ffffffff610f81565b90565b60207f654661737444656c746100000000000000000000000000000000000000000000917f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201520152565b6127af602a6040926108c3565b6127b881612754565b0190565b6127d290602081019060008183039101526127a2565b90565b156127dc57565b6127e46100c3565b62461bcd60e51b8152806127fa600482016127bc565b0390fd5b61281261280d61281792610103565b610778565b610206565b90565b61282e61282961283392610103565b610778565b6105bb565b90565b61284060806103e4565b90565b90565b9061285b61285661286292610835565b612843565b825461081a565b9055565b60a01b90565b9061287e63ffffffff60a01b91612866565b9181191691161790565b9061289d6128986128a492610a8b565b610aa7565b825461286c565b9055565b60c01b90565b906128c063ffffffff60c01b916128a8565b9181191691161790565b906128df6128da6128e692610a8b565b610aa7565b82546128ae565b9055565b906128fc63ffffffff60e01b91611639565b9181191691161790565b9061291b61291661292292610a8b565b610aa7565b82546128ea565b9055565b9061298160606000612987946129498282016129438488016123b7565b90612846565b61296182820161295b60208801610a65565b90612888565b61297982820161297360408801610a65565b906128ca565b019201610a65565b90612906565b565b9061299391612926565b565b612a65612a7a9493612a5c612a15612a75956129ca816129c46129be6129b96125f4565b610103565b91610103565b10612661565b6129ed846129e76129e16129dc61268a565b610103565b91610103565b1061271b565b612a1088612a0a612a046129ff612744565b610103565b91610103565b106127d5565b6127fe565b95612a53612a34612a2e612a284261281a565b9561281a565b9261281a565b93612a4a612a40612836565b9960008b016122e1565b602089016109db565b604087016109db565b606085016109db565b6006612a6f611311565b01610f39565b612989565b565b6020612adc612ad7612aac612aa7612af295612a96610755565b506002612aa1611311565b01610797565b6107d4565b612ad281612acb612ac5612ac06000611585565b610211565b91610211565b14156115ec565b611621565b61162d565b6350d25bcd90612aea6100c3565b938492611639565b82528180612b02600482016102b8565b03915afa8015612b6c57612b3b91600091612b3e575b50612b3681612b30612b2a60006117e5565b91611735565b1361185c565b611885565b90565b612b5f915060203d8111612b65575b612b5781836103bd565b8101906118a1565b38612b18565b503d612b4d565b61168d565b612b7a90611735565b9052565b9190612b9290600060208501940190612b71565b565b612b9c610755565b5080612bb1612bab60006117e5565b91611735565b12612bc257612bbf90611885565b90565b612be490612bce6100c3565b918291635467221960e11b835260048301612b7e565b0390fdfea2646970667358221220f5c1d0197b700a953a893a8a7e07225a34c23aafea7bb3e874705720bce2e43164736f6c63430008180033",
  "devdoc": {
    "errors": {
      "SafeCastOverflowedIntToUint(int256)": [
        {
          "details": "An int value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}