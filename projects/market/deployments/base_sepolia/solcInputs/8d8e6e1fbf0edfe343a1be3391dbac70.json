{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManaged.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAuthority} from \"@openzeppelin/contracts/access/manager/IAuthority.sol\";\nimport {AuthorityUtils} from \"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\";\nimport {IAccessManager} from \"@openzeppelin/contracts/access/manager/IAccessManager.sol\";\nimport {IAccessManaged} from \"@openzeppelin/contracts/access/manager/IAccessManaged.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\n * permissioned according to an \"authority\": a contract like {AccessManager} that follows the {IAuthority} interface,\n * implementing a policy that allows certain callers to access certain functions.\n *\n * IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\n * functions, and ideally only used in `external` functions. See {restricted}.\n */\nabstract contract AccessManagedUpgradeable is Initializable, ContextUpgradeable, IAccessManaged {\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessManaged\n    struct AccessManagedStorage {\n        address _authority;\n\n        bool _consumingSchedule;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessManaged\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessManagedStorageLocation = 0xf3177357ab46d8af007ab3fdb9af81da189e1068fefdc0073dca88a2cab40a00;\n\n    function _getAccessManagedStorage() private pure returns (AccessManagedStorage storage $) {\n        assembly {\n            $.slot := AccessManagedStorageLocation\n        }\n    }\n\n    /**\n     * @dev Initializes the contract connected to an initial authority.\n     */\n    function __AccessManaged_init(address initialAuthority) internal onlyInitializing {\n        __AccessManaged_init_unchained(initialAuthority);\n    }\n\n    function __AccessManaged_init_unchained(address initialAuthority) internal onlyInitializing {\n        _setAuthority(initialAuthority);\n    }\n\n    /**\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\n     * caller and selector of the function that entered the contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\n     * ====\n     *\n     * [WARNING]\n     * ====\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\n     * functions are the only execution paths where a function selector cannot be unambiguosly determined from the calldata\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\n     * if no calldata is provided. (See {_checkCanCall}).\n     *\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\n     * ====\n     */\n    modifier restricted() {\n        _checkCanCall(_msgSender(), _msgData());\n        _;\n    }\n\n    /// @inheritdoc IAccessManaged\n    function authority() public view virtual returns (address) {\n        AccessManagedStorage storage $ = _getAccessManagedStorage();\n        return $._authority;\n    }\n\n    /// @inheritdoc IAccessManaged\n    function setAuthority(address newAuthority) public virtual {\n        address caller = _msgSender();\n        if (caller != authority()) {\n            revert AccessManagedUnauthorized(caller);\n        }\n        if (newAuthority.code.length == 0) {\n            revert AccessManagedInvalidAuthority(newAuthority);\n        }\n        _setAuthority(newAuthority);\n    }\n\n    /// @inheritdoc IAccessManaged\n    function isConsumingScheduledOp() public view returns (bytes4) {\n        AccessManagedStorage storage $ = _getAccessManagedStorage();\n        return $._consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\n    }\n\n    /**\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\n     * permissions set by the current authority.\n     */\n    function _setAuthority(address newAuthority) internal virtual {\n        AccessManagedStorage storage $ = _getAccessManagedStorage();\n        $._authority = newAuthority;\n        emit AuthorityUpdated(newAuthority);\n    }\n\n    /**\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\n     * is less than 4 bytes long.\n     */\n    function _checkCanCall(address caller, bytes calldata data) internal virtual {\n        AccessManagedStorage storage $ = _getAccessManagedStorage();\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\n            authority(),\n            caller,\n            address(this),\n            bytes4(data[0:4])\n        );\n        if (!immediate) {\n            if (delay > 0) {\n                $._consumingSchedule = true;\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\n                $._consumingSchedule = false;\n            } else {\n                revert AccessManagedUnauthorized(caller);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManager.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessManager} from \"@openzeppelin/contracts/access/manager/IAccessManager.sol\";\nimport {IAccessManaged} from \"@openzeppelin/contracts/access/manager/IAccessManaged.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {MulticallUpgradeable} from \"../../utils/MulticallUpgradeable.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {Time} from \"@openzeppelin/contracts/utils/types/Time.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev AccessManager is a central contract to store the permissions of a system.\n *\n * A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the\n * {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted}\n * modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be\n * effectively restricted.\n *\n * The restriction rules for such functions are defined in terms of \"roles\" identified by an `uint64` and scoped\n * by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be\n * configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}).\n *\n * For each target contract, admins can configure the following without any delay:\n *\n * * The target's {AccessManaged-authority} via {updateAuthority}.\n * * Close or open a target via {setTargetClosed} keeping the permissions intact.\n * * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}.\n *\n * By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise.\n * Additionally, each role has the following configuration options restricted to this manager's admins:\n *\n * * A role's admin role via {setRoleAdmin} who can grant or revoke roles.\n * * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations.\n * * A delay in which a role takes effect after being granted through {setGrantDelay}.\n * * A delay of any target's admin action via {setTargetAdminDelay}.\n * * A role label for discoverability purposes with {labelRole}.\n *\n * Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions\n * restricted to each role's admin (see {getRoleAdmin}).\n *\n * Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that\n * they will be highly secured (e.g., a multisig or a well-configured DAO).\n *\n * NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it\n * doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of\n * the return data are a boolean as expected by that interface.\n *\n * NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an\n * {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}.\n * Users will be able to interact with these contracts through the {execute} function, following the access rules\n * registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions\n * will be {AccessManager} itself.\n *\n * WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very\n * mindful of the danger associated with functions such as {{Ownable-renounceOwnership}} or\n * {{AccessControl-renounceRole}}.\n */\ncontract AccessManagerUpgradeable is Initializable, ContextUpgradeable, MulticallUpgradeable, IAccessManager {\n    using Time for *;\n\n    // Structure that stores the details for a target contract.\n    struct TargetConfig {\n        mapping(bytes4 selector => uint64 roleId) allowedRoles;\n        Time.Delay adminDelay;\n        bool closed;\n    }\n\n    // Structure that stores the details for a role/account pair. This structures fit into a single slot.\n    struct Access {\n        // Timepoint at which the user gets the permission.\n        // If this is either 0 or in the future, then the role permission is not available.\n        uint48 since;\n        // Delay for execution. Only applies to restricted() / execute() calls.\n        Time.Delay delay;\n    }\n\n    // Structure that stores the details of a role.\n    struct Role {\n        // Members of the role.\n        mapping(address user => Access access) members;\n        // Admin who can grant or revoke permissions.\n        uint64 admin;\n        // Guardian who can cancel operations targeting functions that need this role.\n        uint64 guardian;\n        // Delay in which the role takes effect after being granted.\n        Time.Delay grantDelay;\n    }\n\n    // Structure that stores the details for a scheduled operation. This structure fits into a single slot.\n    struct Schedule {\n        // Moment at which the operation can be executed.\n        uint48 timepoint;\n        // Operation nonce to allow third-party contracts to identify the operation.\n        uint32 nonce;\n    }\n\n    uint64 public constant ADMIN_ROLE = type(uint64).min; // 0\n    uint64 public constant PUBLIC_ROLE = type(uint64).max; // 2**64-1\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessManager\n    struct AccessManagerStorage {\n        mapping(address target => TargetConfig mode) _targets;\n        mapping(uint64 roleId => Role) _roles;\n        mapping(bytes32 operationId => Schedule) _schedules;\n\n        // Used to identify operations that are currently being executed via {execute}.\n        // This should be transient storage when supported by the EVM.\n        bytes32 _executionId;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessManager\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessManagerStorageLocation = 0x40c6c8c28789853c7efd823ab20824bbd71718a8a5915e855f6f288c9a26ad00;\n\n    function _getAccessManagerStorage() private pure returns (AccessManagerStorage storage $) {\n        assembly {\n            $.slot := AccessManagerStorageLocation\n        }\n    }\n\n    /**\n     * @dev Check that the caller is authorized to perform the operation, following the restrictions encoded in\n     * {_getAdminRestrictions}.\n     */\n    modifier onlyAuthorized() {\n        _checkAuthorized();\n        _;\n    }\n\n    function __AccessManager_init(address initialAdmin) internal onlyInitializing {\n        __AccessManager_init_unchained(initialAdmin);\n    }\n\n    function __AccessManager_init_unchained(address initialAdmin) internal onlyInitializing {\n        if (initialAdmin == address(0)) {\n            revert AccessManagerInvalidInitialAdmin(address(0));\n        }\n\n        // admin is active immediately and without any execution delay.\n        _grantRole(ADMIN_ROLE, initialAdmin, 0, 0);\n    }\n\n    // =================================================== GETTERS ====================================================\n    /// @inheritdoc IAccessManager\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) public view virtual returns (bool immediate, uint32 delay) {\n        if (isTargetClosed(target)) {\n            return (false, 0);\n        } else if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(target, selector), 0);\n        } else {\n            uint64 roleId = getTargetFunctionRole(target, selector);\n            (bool isMember, uint32 currentDelay) = hasRole(roleId, caller);\n            return isMember ? (currentDelay == 0, currentDelay) : (false, 0);\n        }\n    }\n\n    /// @inheritdoc IAccessManager\n    function expiration() public view virtual returns (uint32) {\n        return 1 weeks;\n    }\n\n    /// @inheritdoc IAccessManager\n    function minSetback() public view virtual returns (uint32) {\n        return 5 days;\n    }\n\n    /// @inheritdoc IAccessManager\n    function isTargetClosed(address target) public view virtual returns (bool) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        return $._targets[target].closed;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getTargetFunctionRole(address target, bytes4 selector) public view virtual returns (uint64) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        return $._targets[target].allowedRoles[selector];\n    }\n\n    /// @inheritdoc IAccessManager\n    function getTargetAdminDelay(address target) public view virtual returns (uint32) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        return $._targets[target].adminDelay.get();\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleAdmin(uint64 roleId) public view virtual returns (uint64) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        return $._roles[roleId].admin;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleGuardian(uint64 roleId) public view virtual returns (uint64) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        return $._roles[roleId].guardian;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleGrantDelay(uint64 roleId) public view virtual returns (uint32) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        return $._roles[roleId].grantDelay.get();\n    }\n\n    /// @inheritdoc IAccessManager\n    function getAccess(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        Access storage access = $._roles[roleId].members[account];\n\n        since = access.since;\n        (currentDelay, pendingDelay, effect) = access.delay.getFull();\n\n        return (since, currentDelay, pendingDelay, effect);\n    }\n\n    /// @inheritdoc IAccessManager\n    function hasRole(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (bool isMember, uint32 executionDelay) {\n        if (roleId == PUBLIC_ROLE) {\n            return (true, 0);\n        } else {\n            (uint48 hasRoleSince, uint32 currentDelay, , ) = getAccess(roleId, account);\n            return (hasRoleSince != 0 && hasRoleSince <= Time.timestamp(), currentDelay);\n        }\n    }\n\n    // =============================================== ROLE MANAGEMENT ===============================================\n    /// @inheritdoc IAccessManager\n    function labelRole(uint64 roleId, string calldata label) public virtual onlyAuthorized {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n        emit RoleLabel(roleId, label);\n    }\n\n    /// @inheritdoc IAccessManager\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual onlyAuthorized {\n        _grantRole(roleId, account, getRoleGrantDelay(roleId), executionDelay);\n    }\n\n    /// @inheritdoc IAccessManager\n    function revokeRole(uint64 roleId, address account) public virtual onlyAuthorized {\n        _revokeRole(roleId, account);\n    }\n\n    /// @inheritdoc IAccessManager\n    function renounceRole(uint64 roleId, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessManagerBadConfirmation();\n        }\n        _revokeRole(roleId, callerConfirmation);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setRoleAdmin(uint64 roleId, uint64 admin) public virtual onlyAuthorized {\n        _setRoleAdmin(roleId, admin);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual onlyAuthorized {\n        _setRoleGuardian(roleId, guardian);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual onlyAuthorized {\n        _setGrantDelay(roleId, newDelay);\n    }\n\n    /**\n     * @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\n     *\n     * Emits a {RoleGranted} event.\n     */\n    function _grantRole(\n        uint64 roleId,\n        address account,\n        uint32 grantDelay,\n        uint32 executionDelay\n    ) internal virtual returns (bool) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        bool newMember = $._roles[roleId].members[account].since == 0;\n        uint48 since;\n\n        if (newMember) {\n            since = Time.timestamp() + grantDelay;\n            $._roles[roleId].members[account] = Access({since: since, delay: executionDelay.toDelay()});\n        } else {\n            // No setback here. Value can be reset by doing revoke + grant, effectively allowing the admin to perform\n            // any change to the execution delay within the duration of the role admin delay.\n            ($._roles[roleId].members[account].delay, since) = $._roles[roleId].members[account].delay.withUpdate(\n                executionDelay,\n                0\n            );\n        }\n\n        emit RoleGranted(roleId, account, executionDelay, since, newMember);\n        return newMember;\n    }\n\n    /**\n     * @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\n     * Returns true if the role was previously granted.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function _revokeRole(uint64 roleId, address account) internal virtual returns (bool) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        if ($._roles[roleId].members[account].since == 0) {\n            return false;\n        }\n\n        delete $._roles[roleId].members[account];\n\n        emit RoleRevoked(roleId, account);\n        return true;\n    }\n\n    /**\n     * @dev Internal version of {setRoleAdmin} without access control.\n     *\n     * Emits a {RoleAdminChanged} event.\n     *\n     * NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to set grant or revoke such role.\n     */\n    function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        $._roles[roleId].admin = admin;\n\n        emit RoleAdminChanged(roleId, admin);\n    }\n\n    /**\n     * @dev Internal version of {setRoleGuardian} without access control.\n     *\n     * Emits a {RoleGuardianChanged} event.\n     *\n     * NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to cancel any scheduled operation for such role.\n     */\n    function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        $._roles[roleId].guardian = guardian;\n\n        emit RoleGuardianChanged(roleId, guardian);\n    }\n\n    /**\n     * @dev Internal version of {setGrantDelay} without access control.\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n    function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        uint48 effect;\n        ($._roles[roleId].grantDelay, effect) = $._roles[roleId].grantDelay.withUpdate(newDelay, minSetback());\n\n        emit RoleGrantDelayChanged(roleId, newDelay, effect);\n    }\n\n    // ============================================= FUNCTION MANAGEMENT ==============================================\n    /// @inheritdoc IAccessManager\n    function setTargetFunctionRole(\n        address target,\n        bytes4[] calldata selectors,\n        uint64 roleId\n    ) public virtual onlyAuthorized {\n        for (uint256 i = 0; i < selectors.length; ++i) {\n            _setTargetFunctionRole(target, selectors[i], roleId);\n        }\n    }\n\n    /**\n     * @dev Internal version of {setTargetFunctionRole} without access control.\n     *\n     * Emits a {TargetFunctionRoleUpdated} event.\n     */\n    function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        $._targets[target].allowedRoles[selector] = roleId;\n        emit TargetFunctionRoleUpdated(target, selector, roleId);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setTargetAdminDelay(address target, uint32 newDelay) public virtual onlyAuthorized {\n        _setTargetAdminDelay(target, newDelay);\n    }\n\n    /**\n     * @dev Internal version of {setTargetAdminDelay} without access control.\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n    function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        uint48 effect;\n        ($._targets[target].adminDelay, effect) = $._targets[target].adminDelay.withUpdate(newDelay, minSetback());\n\n        emit TargetAdminDelayUpdated(target, newDelay, effect);\n    }\n\n    // =============================================== MODE MANAGEMENT ================================================\n    /// @inheritdoc IAccessManager\n    function setTargetClosed(address target, bool closed) public virtual onlyAuthorized {\n        _setTargetClosed(target, closed);\n    }\n\n    /**\n     * @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\n     *\n     * Emits a {TargetClosed} event.\n     */\n    function _setTargetClosed(address target, bool closed) internal virtual {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        if (target == address(this)) {\n            revert AccessManagerLockedAccount(target);\n        }\n        $._targets[target].closed = closed;\n        emit TargetClosed(target, closed);\n    }\n\n    // ============================================== DELAYED OPERATIONS ==============================================\n    /// @inheritdoc IAccessManager\n    function getSchedule(bytes32 id) public view virtual returns (uint48) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        uint48 timepoint = $._schedules[id].timepoint;\n        return _isExpired(timepoint) ? 0 : timepoint;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getNonce(bytes32 id) public view virtual returns (uint32) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        return $._schedules[id].nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function schedule(\n        address target,\n        bytes calldata data,\n        uint48 when\n    ) public virtual returns (bytes32 operationId, uint32 nonce) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (, uint32 setback) = _canCallExtended(caller, target, data);\n\n        uint48 minWhen = Time.timestamp() + setback;\n\n        // if call with delay is not authorized, or if requested timing is too soon\n        if (setback == 0 || (when > 0 && when < minWhen)) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        // Reuse variable due to stack too deep\n        when = uint48(Math.max(when, minWhen)); // cast is safe: both inputs are uint48\n\n        // If caller is authorised, schedule operation\n        operationId = hashOperation(caller, target, data);\n\n        _checkNotScheduled(operationId);\n\n        unchecked {\n            // It's not feasible to overflow the nonce in less than 1000 years\n            nonce = $._schedules[operationId].nonce + 1;\n        }\n        $._schedules[operationId].timepoint = when;\n        $._schedules[operationId].nonce = nonce;\n        emit OperationScheduled(operationId, nonce, when, caller, target, data);\n\n        // Using named return values because otherwise we get stack too deep\n    }\n\n    /**\n     * @dev Reverts if the operation is currently scheduled and has not expired.\n     * (Note: This function was introduced due to stack too deep errors in schedule.)\n     */\n    function _checkNotScheduled(bytes32 operationId) private view {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        uint48 prevTimepoint = $._schedules[operationId].timepoint;\n        if (prevTimepoint != 0 && !_isExpired(prevTimepoint)) {\n            revert AccessManagerAlreadyScheduled(operationId);\n        }\n    }\n\n    /// @inheritdoc IAccessManager\n    // Reentrancy is not an issue because permissions are checked on msg.sender. Additionally,\n    // _consumeScheduledOp guarantees a scheduled operation is only executed once.\n    // slither-disable-next-line reentrancy-no-eth\n    function execute(address target, bytes calldata data) public payable virtual returns (uint32) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (bool immediate, uint32 setback) = _canCallExtended(caller, target, data);\n\n        // If caller is not authorised, revert\n        if (!immediate && setback == 0) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        uint32 nonce;\n\n        // If caller is authorised, check operation was scheduled early enough\n        // Consume an available schedule even if there is no currently enforced delay\n        if (setback != 0 || getSchedule(operationId) != 0) {\n            nonce = _consumeScheduledOp(operationId);\n        }\n\n        // Mark the target and selector as authorised\n        bytes32 executionIdBefore = $._executionId;\n        $._executionId = _hashExecutionId(target, _checkSelector(data));\n\n        // Perform call\n        Address.functionCallWithValue(target, data, msg.value);\n\n        // Reset execute identifier\n        $._executionId = executionIdBefore;\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function cancel(address caller, address target, bytes calldata data) public virtual returns (uint32) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        address msgsender = _msgSender();\n        bytes4 selector = _checkSelector(data);\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        if ($._schedules[operationId].timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (caller != msgsender) {\n            // calls can only be canceled by the account that scheduled them, a global admin, or by a guardian of the required role.\n            (bool isAdmin, ) = hasRole(ADMIN_ROLE, msgsender);\n            (bool isGuardian, ) = hasRole(getRoleGuardian(getTargetFunctionRole(target, selector)), msgsender);\n            if (!isAdmin && !isGuardian) {\n                revert AccessManagerUnauthorizedCancel(msgsender, caller, target, selector);\n            }\n        }\n\n        delete $._schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        uint32 nonce = $._schedules[operationId].nonce;\n        emit OperationCanceled(operationId, nonce);\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function consumeScheduledOp(address caller, bytes calldata data) public virtual {\n        address target = _msgSender();\n        if (IAccessManaged(target).isConsumingScheduledOp() != IAccessManaged.isConsumingScheduledOp.selector) {\n            revert AccessManagerUnauthorizedConsume(target);\n        }\n        _consumeScheduledOp(hashOperation(caller, target, data));\n    }\n\n    /**\n     * @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\n     *\n     * Returns the nonce of the scheduled operation that is consumed.\n     */\n    function _consumeScheduledOp(bytes32 operationId) internal virtual returns (uint32) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        uint48 timepoint = $._schedules[operationId].timepoint;\n        uint32 nonce = $._schedules[operationId].nonce;\n\n        if (timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (timepoint > Time.timestamp()) {\n            revert AccessManagerNotReady(operationId);\n        } else if (_isExpired(timepoint)) {\n            revert AccessManagerExpired(operationId);\n        }\n\n        delete $._schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        emit OperationExecuted(operationId, nonce);\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function hashOperation(address caller, address target, bytes calldata data) public view virtual returns (bytes32) {\n        return keccak256(abi.encode(caller, target, data));\n    }\n\n    // ==================================================== OTHERS ====================================================\n    /// @inheritdoc IAccessManager\n    function updateAuthority(address target, address newAuthority) public virtual onlyAuthorized {\n        IAccessManaged(target).setAuthority(newAuthority);\n    }\n\n    // ================================================= ADMIN LOGIC ==================================================\n    /**\n     * @dev Check if the current call is authorized according to admin logic.\n     */\n    function _checkAuthorized() private {\n        address caller = _msgSender();\n        (bool immediate, uint32 delay) = _canCallSelf(caller, _msgData());\n        if (!immediate) {\n            if (delay == 0) {\n                (, uint64 requiredRole, ) = _getAdminRestrictions(_msgData());\n                revert AccessManagerUnauthorizedAccount(caller, requiredRole);\n            } else {\n                _consumeScheduledOp(hashOperation(caller, address(this), _msgData()));\n            }\n        }\n    }\n\n    /**\n     * @dev Get the admin restrictions of a given function call based on the function and arguments involved.\n     *\n     * Returns:\n     * - bool restricted: does this data match a restricted operation\n     * - uint64: which role is this operation restricted to\n     * - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)\n     */\n    function _getAdminRestrictions(\n        bytes calldata data\n    ) private view returns (bool restricted, uint64 roleAdminId, uint32 executionDelay) {\n        if (data.length < 4) {\n            return (false, 0, 0);\n        }\n\n        bytes4 selector = _checkSelector(data);\n\n        // Restricted to ADMIN with no delay beside any execution delay the caller may have\n        if (\n            selector == this.labelRole.selector ||\n            selector == this.setRoleAdmin.selector ||\n            selector == this.setRoleGuardian.selector ||\n            selector == this.setGrantDelay.selector ||\n            selector == this.setTargetAdminDelay.selector\n        ) {\n            return (true, ADMIN_ROLE, 0);\n        }\n\n        // Restricted to ADMIN with the admin delay corresponding to the target\n        if (\n            selector == this.updateAuthority.selector ||\n            selector == this.setTargetClosed.selector ||\n            selector == this.setTargetFunctionRole.selector\n        ) {\n            // First argument is a target.\n            address target = abi.decode(data[0x04:0x24], (address));\n            uint32 delay = getTargetAdminDelay(target);\n            return (true, ADMIN_ROLE, delay);\n        }\n\n        // Restricted to that role's admin with no delay beside any execution delay the caller may have.\n        if (selector == this.grantRole.selector || selector == this.revokeRole.selector) {\n            // First argument is a roleId.\n            uint64 roleId = abi.decode(data[0x04:0x24], (uint64));\n            return (true, getRoleAdmin(roleId), 0);\n        }\n\n        return (false, 0, 0);\n    }\n\n    // =================================================== HELPERS ====================================================\n    /**\n     * @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\n     * when the target is this contract.\n     *\n     * Returns:\n     * - bool immediate: whether the operation can be executed immediately (with no delay)\n     * - uint32 delay: the execution delay\n     */\n    function _canCallExtended(\n        address caller,\n        address target,\n        bytes calldata data\n    ) private view returns (bool immediate, uint32 delay) {\n        if (target == address(this)) {\n            return _canCallSelf(caller, data);\n        } else {\n            return data.length < 4 ? (false, 0) : canCall(caller, target, _checkSelector(data));\n        }\n    }\n\n    /**\n     * @dev A version of {canCall} that checks for admin restrictions in this contract.\n     */\n    function _canCallSelf(address caller, bytes calldata data) private view returns (bool immediate, uint32 delay) {\n        if (data.length < 4) {\n            return (false, 0);\n        }\n\n        if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(address(this), _checkSelector(data)), 0);\n        }\n\n        (bool enabled, uint64 roleId, uint32 operationDelay) = _getAdminRestrictions(data);\n        if (!enabled) {\n            return (false, 0);\n        }\n\n        (bool inRole, uint32 executionDelay) = hasRole(roleId, caller);\n        if (!inRole) {\n            return (false, 0);\n        }\n\n        // downcast is safe because both options are uint32\n        delay = uint32(Math.max(operationDelay, executionDelay));\n        return (delay == 0, delay);\n    }\n\n    /**\n     * @dev Returns true if a call with `target` and `selector` is being executed via {executed}.\n     */\n    function _isExecuting(address target, bytes4 selector) private view returns (bool) {\n        AccessManagerStorage storage $ = _getAccessManagerStorage();\n        return $._executionId == _hashExecutionId(target, selector);\n    }\n\n    /**\n     * @dev Returns true if a schedule timepoint is past its expiration deadline.\n     */\n    function _isExpired(uint48 timepoint) private view returns (bool) {\n        return timepoint + expiration() <= Time.timestamp();\n    }\n\n    /**\n     * @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes\n     */\n    function _checkSelector(bytes calldata data) private pure returns (bytes4) {\n        return bytes4(data[0:4]);\n    }\n\n    /**\n     * @dev Hashing function for execute protection\n     */\n    function _hashExecutionId(address target, bytes4 selector) private pure returns (bytes32) {\n        return keccak256(abi.encode(target, selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\n\npragma solidity ^0.8.20;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ContextUpgradeable} from \"./ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\n * selectors won't filter calls nested within a {multicall} operation.\n *\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\n * {_msgSender} are not propagated to subcalls.\n */\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\n    function __Multicall_init() internal onlyInitializing {\n    }\n\n    function __Multicall_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/manager/AuthorityUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAuthority} from \"./IAuthority.sol\";\n\nlibrary AuthorityUtils {\n    /**\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\n     */\n    function canCallWithDelay(\n        address authority,\n        address caller,\n        address target,\n        bytes4 selector\n    ) internal view returns (bool immediate, uint32 delay) {\n        (bool success, bytes memory data) = authority.staticcall(\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\n        );\n        if (success) {\n            if (data.length >= 0x40) {\n                (immediate, delay) = abi.decode(data, (bool, uint32));\n            } else if (data.length >= 0x20) {\n                immediate = abi.decode(data, (bool));\n            }\n        }\n        return (immediate, delay);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/manager/IAccessManaged.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\n\npragma solidity ^0.8.20;\n\ninterface IAccessManaged {\n    /**\n     * @dev Authority that manages this contract was updated.\n     */\n    event AuthorityUpdated(address authority);\n\n    error AccessManagedUnauthorized(address caller);\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\n    error AccessManagedInvalidAuthority(address authority);\n\n    /**\n     * @dev Returns the current authority.\n     */\n    function authority() external view returns (address);\n\n    /**\n     * @dev Transfers control to a new authority. The caller must be the current authority.\n     */\n    function setAuthority(address) external;\n\n    /**\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\n     * attacker controlled calls.\n     */\n    function isConsumingScheduledOp() external view returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/access/manager/IAccessManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessManaged} from \"./IAccessManaged.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\ninterface IAccessManager {\n    /**\n     * @dev A delayed operation was scheduled.\n     */\n    event OperationScheduled(\n        bytes32 indexed operationId,\n        uint32 indexed nonce,\n        uint48 schedule,\n        address caller,\n        address target,\n        bytes data\n    );\n\n    /**\n     * @dev A scheduled operation was executed.\n     */\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev A scheduled operation was canceled.\n     */\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev Informational labelling for a roleId.\n     */\n    event RoleLabel(uint64 indexed roleId, string label);\n\n    /**\n     * @dev Emitted when `account` is granted `roleId`.\n     *\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\n     * otherwise it indicates the execution delay for this account and roleId is updated.\n     */\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\n\n    /**\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\n     */\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\n\n    /**\n     * @dev Role acting as admin over a given `roleId` is updated.\n     */\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\n\n    /**\n     * @dev Role acting as guardian over a given `roleId` is updated.\n     */\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\n\n    /**\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\n     */\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\n\n    /**\n     * @dev Target mode is updated (true = closed, false = open).\n     */\n    event TargetClosed(address indexed target, bool closed);\n\n    /**\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\n     */\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\n\n    /**\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\n     */\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\n\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\n    error AccessManagerNotScheduled(bytes32 operationId);\n    error AccessManagerNotReady(bytes32 operationId);\n    error AccessManagerExpired(bytes32 operationId);\n    error AccessManagerLockedAccount(address account);\n    error AccessManagerLockedRole(uint64 roleId);\n    error AccessManagerBadConfirmation();\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\n    error AccessManagerUnauthorizedConsume(address target);\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\n\n    /**\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\n     * & {execute} workflow.\n     *\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\n     * for future execution.\n     *\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\n     * the operation can be executed if and only if delay is greater than 0.\n     *\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\n     *\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\n     * {_canCallSelf} function instead.\n     */\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) external view returns (bool allowed, uint32 delay);\n\n    /**\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\n     *\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\n     * disabling any scheduling usage.\n     */\n    function expiration() external view returns (uint32);\n\n    /**\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\n     * accidental increase). Defaults to 5 days.\n     */\n    function minSetback() external view returns (uint32);\n\n    /**\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\n     */\n    function isTargetClosed(address target) external view returns (bool);\n\n    /**\n     * @dev Get the role required to call a function.\n     */\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\n\n    /**\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\n     */\n    function getTargetAdminDelay(address target) external view returns (uint32);\n\n    /**\n     * @dev Get the id of the role that acts as an admin for the given role.\n     *\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\n     * an operation that is restricted to this role.\n     */\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role that acts as a guardian for a given role.\n     *\n     * The guardian permission allows canceling operations that have been scheduled under the role.\n     */\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role current grant delay.\n     *\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\n     */\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\n\n    /**\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\n     * level.\n     *\n     * Returns:\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\n     * [1] Current execution delay for the account.\n     * [2] Pending execution delay for the account.\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\n     */\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\n\n    /**\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\n     */\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\n\n    /**\n     * @dev Give a label to a role, for improved role discoverability by UIs.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleLabel} event.\n     */\n    function labelRole(uint64 roleId, string calldata label) external;\n\n    /**\n     * @dev Add `account` to `roleId`, or change its execution delay.\n     *\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\n     *\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - granted role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleGranted} event.\n     */\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\n\n    /**\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\n     * no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - revoked role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function revokeRole(uint64 roleId, address account) external;\n\n    /**\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\n     * the role this call has no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\n\n    /**\n     * @dev Change admin role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleAdminChanged} event\n     */\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\n\n    /**\n     * @dev Change guardian role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGuardianChanged} event\n     */\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\n\n    /**\n     * @dev Update the delay for granting a `roleId`.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\n\n    /**\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\n     */\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\n\n    /**\n     * @dev Set the delay for changing the configuration of a given target contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\n\n    /**\n     * @dev Set the closed flag for a contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetClosed} event.\n     */\n    function setTargetClosed(address target, bool closed) external;\n\n    /**\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\n     */\n    function getSchedule(bytes32 id) external view returns (uint48);\n\n    /**\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\n     * been scheduled.\n     */\n    function getNonce(bytes32 id) external view returns (uint32);\n\n    /**\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\n     * required for the caller. The special value zero will automatically set the earliest possible time.\n     *\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\n     *\n     * Emits a {OperationScheduled} event.\n     *\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\n     * contract if it is using standard Solidity ABI encoding.\n     */\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\n\n    /**\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\n     * execution delay is 0.\n     *\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\n     *\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\n     */\n    function execute(address target, bytes calldata data) external payable returns (uint32);\n\n    /**\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\n     * operation that is cancelled.\n     *\n     * Requirements:\n     *\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\n     *\n     * Emits a {OperationCanceled} event.\n     */\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\n\n    /**\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\n     *\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\n     * with all the verifications that it implies.\n     *\n     * Emit a {OperationExecuted} event.\n     */\n    function consumeScheduledOp(address caller, bytes calldata data) external;\n\n    /**\n     * @dev Hashing function for delayed operations.\n     */\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\n\n    /**\n     * @dev Changes the authority of a target managed by this manager instance.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     */\n    function updateAuthority(address target, address newAuthority) external;\n}\n"
    },
    "@openzeppelin/contracts/access/manager/IAuthority.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard interface for permissioning originally defined in Dappsys.\n */\ninterface IAuthority {\n    /**\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\n     */\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\nimport {IERC4626} from \"../../../interfaces/IERC4626.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n * expensive than it is profitable. More details about the underlying math can be found\n * xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20 private immutable _asset;\n    uint8 private immutable _underlyingDecimals;\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20 asset_) {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/types/Time.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {SafeCast} from \"../math/SafeCast.sol\";\n\n/**\n * @dev This library provides helpers for manipulating time-related objects.\n *\n * It uses the following types:\n * - `uint48` for timepoints\n * - `uint32` for durations\n *\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n * - additional helper functions\n */\nlibrary Time {\n    using Time for *;\n\n    /**\n     * @dev Get the block timestamp as a Timepoint.\n     */\n    function timestamp() internal view returns (uint48) {\n        return SafeCast.toUint48(block.timestamp);\n    }\n\n    /**\n     * @dev Get the block number as a Timepoint.\n     */\n    function blockNumber() internal view returns (uint48) {\n        return SafeCast.toUint48(block.number);\n    }\n\n    // ==================================================== Delay =====================================================\n    /**\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\n     * future. The \"effect\" timepoint describes when the transitions happens from the \"old\" value to the \"new\" value.\n     * This allows updating the delay applied to some operation while keeping some guarantees.\n     *\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\n     * still apply for some time.\n     *\n     *\n     * The `Delay` type is 112 bits long, and packs the following:\n     *\n     * ```\n     *   | [uint48]: effect date (timepoint)\n     *   |           | [uint32]: value before (duration)\n     *   ↓           ↓       ↓ [uint32]: value after (duration)\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\n     * ```\n     *\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\n     * supported.\n     */\n    type Delay is uint112;\n\n    /**\n     * @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature\n     */\n    function toDelay(uint32 duration) internal pure returns (Delay) {\n        return Delay.wrap(duration);\n    }\n\n    /**\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\n     */\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n     * effect timepoint is 0, then the pending value should not be considered.\n     */\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\n        return _getFullAt(self, timestamp());\n    }\n\n    /**\n     * @dev Get the current value.\n     */\n    function get(Delay self) internal view returns (uint32) {\n        (uint32 delay, , ) = self.getFull();\n        return delay;\n    }\n\n    /**\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n     * new delay becomes effective.\n     */\n    function withUpdate(\n        Delay self,\n        uint32 newValue,\n        uint32 minSetback\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\n        uint32 value = self.get();\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\n        effect = timestamp() + setback;\n        return (pack(value, newValue, effect), effect);\n    }\n\n    /**\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\n     */\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        uint112 raw = Delay.unwrap(self);\n\n        valueAfter = uint32(raw);\n        valueBefore = uint32(raw >> 32);\n        effect = uint48(raw >> 64);\n\n        return (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev pack the components into a Delay object.\n     */\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\n    }\n}\n"
    },
    "chainlink_8_contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";"
    },
    "chainlink_8_contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"
    },
    "hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./libraries/LibDiamond.sol\";\n\ncontract UsingDiamondOwner {\n    modifier onlyOwner() {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        require(msg.sender == ds.contractOwner, \"Only owner is allowed to perform this action\");\n        _;\n    }\n}\n"
    },
    "src/ac/AccessManagedFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {LibAccessManaged} from \"./LibAccessManaged.sol\";\nimport {IAccessManaged} from \"@openzeppelin/contracts/access/manager/IAccessManaged.sol\";\n\ncontract AccessManagedFacet {\n    event AuthorityUpdated(address authority);\n\n    function setAuthority(address newAuthority) public {\n        require(\n            LibAccessManaged.Storage()._authority == address(0),\n            \"AccessManagedFacet: authority already set\"\n        );\n        require(\n            newAuthority != address(0),\n            \"AccessManagedFacet: new authority is the zero address\"\n        );\n        LibAccessManaged.Storage()._authority = newAuthority;\n        emit AuthorityUpdated(newAuthority);\n    }\n\n    function authority() public view returns (address) {\n        return LibAccessManaged.Storage()._authority;\n    }\n}\n"
    },
    "src/ac/BlexAccessManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AccessManagerUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol\";\n\ncontract BlexAccessManager is AccessManagerUpgradeable {\n    function initialize(address admin) public initializer {\n        __AccessManager_init(admin);\n    }\n}\n"
    },
    "src/ac/IAccessManaged.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {LibAccessManaged} from \"./LibAccessManaged.sol\";\nimport {AuthorityUtils} from \"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\";\nimport {IAccessManager} from \"@openzeppelin/contracts/access/manager/IAccessManager.sol\";\n\nabstract contract IAccessManaged {\n    error AccessManagedUnauthorized(address caller);\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\n    error AccessManagedInvalidAuthority(address authority);\n\n    modifier restricted() {\n        //todo\n        // _checkCanCall(msg.sender, msg.data);\n        _;\n    }\n\n    modifier onlySelf() {\n        //todo\n        // require(msg.sender == address(this), \"AccessManaged: only self\");\n        _;\n    }\n\n    modifier onlySelfOrRestricted() {\n        // todo\n        _;\n    }\n\n    function _authority() internal view returns (address) {\n        return LibAccessManaged.Storage()._authority;\n    }\n\n    function _checkCanCall(address caller, bytes calldata data) internal {\n        LibAccessManaged.AccessManagedStorage storage $ = LibAccessManaged\n            .Storage();\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\n            _authority(),\n            caller,\n            address(this),\n            bytes4(data[0:4])\n        );\n        if (!immediate) {\n            if (delay > 0) {\n                $._consumingSchedule = true;\n                IAccessManager(_authority()).consumeScheduledOp(caller, data);\n                $._consumingSchedule = false;\n            } else {\n                revert AccessManagedUnauthorized(caller);\n            }\n        }\n    }\n}\n"
    },
    "src/ac/LibAccessManaged.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nlibrary LibAccessManaged {\n    struct AccessManagedStorage {\n        address _authority;\n        bool _consumingSchedule;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessManaged\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessManagedStorageLocation =\n        0xf3177357ab46d8af007ab3fdb9af81da189e1068fefdc0073dca88a2cab40a00;\n\n    function Storage() internal pure returns (AccessManagedStorage storage fs) {\n        bytes32 position = AccessManagedStorageLocation;\n        assembly {\n            fs.slot := position\n        }\n    }\n}\n"
    },
    "src/dummy/DiamondEtherscanFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\n\nlibrary LibDiamondEtherscan {\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Storage slot with the address of the current dummy-implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1\n     */\n    bytes32 internal constant IMPLEMENTATION_SLOT =\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function _setDummyImplementation(address implementationAddress) internal {\n        StorageSlot\n            .getAddressSlot(IMPLEMENTATION_SLOT)\n            .value = implementationAddress;\n\n        emit Upgraded(implementationAddress);\n    }\n\n    function _dummyImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n}\n\ncontract DiamondEtherscanFacet {\n    function setDummyImplementation(address _implementation) external {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamondEtherscan._setDummyImplementation(_implementation);\n    }\n\n    function implementation() external view returns (address) {\n        return LibDiamondEtherscan._dummyImplementation();\n    }\n}\n"
    },
    "src/dummy/DummyDiamondImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ncontract DummyDiamondImplementation {\n    struct Tuple21927 {\n        uint8 busiType;\n        uint256 oraclePrice;\n        uint256 pay;\n        uint256 slippage;\n        uint16 market;\n        bool isLong;\n        bool isOpen;\n        bool isCreate;\n        bool isFromMarket;\n        uint256 sizeDelta;\n        uint256 price;\n        uint256 collateralDelta;\n        uint256 collateral;\n        uint256 tp;\n        uint256 sl;\n        uint64 orderId;\n        address account;\n        bool isExec;\n        uint8 liqState;\n        uint64 fromOrder;\n        bytes32 refCode;\n        uint8 execNum;\n        bool isKeepLev;\n        bool isKeepLevTP;\n        bool isKeepLevSL;\n        bool triggerAbove;\n        uint128 gas;\n    }\n\n    struct Tuple464693 {\n        uint256 size;\n        uint256 collateral;\n        int256 entryFundingRate;\n        int256 realisedPnl;\n        uint256 averagePrice;\n        bool isLong;\n        uint32 lastTime;\n        uint16 market;\n        uint72 extra0;\n    }\n\n    struct Tuple2426236 {\n        uint8 busiType;\n        uint256 oraclePrice;\n        uint256 pay;\n        uint256 slippage;\n        uint16 market;\n        bool isLong;\n        bool isOpen;\n        bool isCreate;\n        bool isFromMarket;\n        uint256 sizeDelta;\n        uint256 price;\n        uint256 collateralDelta;\n        uint256 collateral;\n        uint256 tp;\n        uint256 sl;\n        uint64 orderId;\n        address account;\n        bool isExec;\n        uint8 liqState;\n        uint64 fromOrder;\n        bytes32 refCode;\n        uint8 execNum;\n        bool isKeepLev;\n        bool isKeepLevTP;\n        bool isKeepLevSL;\n        bool triggerAbove;\n        uint128 gas;\n    }\n\n    struct Tuple0408041 {\n        bool isSuspended;\n        bool allowOpen;\n        bool allowClose;\n        bool validDecrease;\n        uint16 minSlippage;\n        uint16 maxSlippage;\n        uint16 minLeverage;\n        uint16 maxLeverage;\n        uint16 minPayment;\n        uint16 minCollateral;\n        uint16 decreaseNumLimit;\n        uint32 maxTradeAmount;\n    }\n\n    struct Tuple2589231 {\n        uint16 market;\n        bool isLong;\n        bool isIncrease;\n        uint256 start;\n        uint256 end;\n        bool isOpen;\n        uint256 oraclePrice;\n        bytes32 storageKey;\n    }\n\n    struct Tuple9273272 {\n        bool isSuspended;\n        bool allowOpen;\n        bool allowClose;\n        bool validDecrease;\n        uint16 minSlippage;\n        uint16 maxSlippage;\n        uint16 minLeverage;\n        uint16 maxLeverage;\n        uint16 minPayment;\n        uint16 minCollateral;\n        uint16 decreaseNumLimit;\n        uint32 maxTradeAmount;\n    }\n\n    struct Tuple803863 {\n        uint32 maxDeviationBP;\n        uint32 priceDuration;\n        uint32 maxPriceUpdateDelay;\n        uint32 priceDataInterval;\n        uint32 sampleSpace;\n    }\n\n    struct Tuple8179501 {\n        uint8 busiType;\n        uint256 oraclePrice;\n        uint256 pay;\n        uint256 slippage;\n        uint16 market;\n        bool isLong;\n        bool isOpen;\n        bool isCreate;\n        bool isFromMarket;\n        uint256 sizeDelta;\n        uint256 price;\n        uint256 collateralDelta;\n        uint256 collateral;\n        uint256 tp;\n        uint256 sl;\n        uint64 orderId;\n        address account;\n        bool isExec;\n        uint8 liqState;\n        uint64 fromOrder;\n        bytes32 refCode;\n        uint8 execNum;\n        bool isKeepLev;\n        bool isKeepLevTP;\n        bool isKeepLevSL;\n        bool triggerAbove;\n        uint128 gas;\n    }\n\n    struct Tuple910965 {\n        uint8 busiType;\n        uint256 oraclePrice;\n        uint256 pay;\n        uint256 slippage;\n        uint16 market;\n        bool isLong;\n        bool isOpen;\n        bool isCreate;\n        bool isFromMarket;\n        uint256 sizeDelta;\n        uint256 price;\n        uint256 collateralDelta;\n        uint256 collateral;\n        uint256 tp;\n        uint256 sl;\n        uint64 orderId;\n        address account;\n        bool isExec;\n        uint8 liqState;\n        uint64 fromOrder;\n        bytes32 refCode;\n        uint8 execNum;\n        bool isKeepLev;\n        bool isKeepLevTP;\n        bool isKeepLevSL;\n        bool triggerAbove;\n        uint128 gas;\n    }\n\n    struct Tuple680644 {\n        bytes32 refCode;\n        uint128 collateral;\n        uint128 size;\n        uint256 price;\n        uint256 tp;\n        bool triggerAbove;\n        bool isFromMarket;\n        bool isKeepLev;\n        bool isKeepLevTP;\n        bool isKeepLevSL;\n        uint64 orderID;\n        uint64 pairId;\n        uint64 fromId;\n        uint32 updatedAtBlock;\n        uint8 extra0;\n        address account;\n        uint96 extra1;\n        uint256 sl;\n        bool isIncrease;\n        bool isLong;\n        uint16 market;\n        uint96 extra2;\n        uint128 gas;\n        uint8 version;\n    }\n\n    struct Tuple5849784 {\n        uint8 busiType;\n        uint256 oraclePrice;\n        uint256 pay;\n        uint256 slippage;\n        uint16 market;\n        bool isLong;\n        bool isOpen;\n        bool isCreate;\n        bool isFromMarket;\n        uint256 sizeDelta;\n        uint256 price;\n        uint256 collateralDelta;\n        uint256 collateral;\n        uint256 tp;\n        uint256 sl;\n        uint64 orderId;\n        address account;\n        bool isExec;\n        uint8 liqState;\n        uint64 fromOrder;\n        bytes32 refCode;\n        uint8 execNum;\n        bool isKeepLev;\n        bool isKeepLevTP;\n        bool isKeepLevSL;\n        bool triggerAbove;\n        uint128 gas;\n    }\n\n    struct Tuple8634448 {\n        uint16 market;\n        address account;\n        int256 collateralDelta;\n        uint256 sizeDelta;\n        int256 fundingRate;\n        bool isLong;\n    }\n\n    struct Tuple8047955 {\n        uint16 market;\n        address account;\n        int256 collateralDelta;\n        uint256 sizeDelta;\n        uint256 markPrice;\n        int256 fundingRate;\n        bool isLong;\n    }\n\n    struct Tuple4013238 {\n        Tuple0521689 inputs;\n        Tuple464693 position;\n        int256[] fees;\n        address collateralToken;\n        address indexToken;\n        int256 collateralDeltaAfter;\n    }\n\n    struct Tuple0521689 {\n        uint8 busiType;\n        uint256 oraclePrice;\n        uint256 pay;\n        uint256 slippage;\n        uint16 market;\n        bool isLong;\n        bool isOpen;\n        bool isCreate;\n        bool isFromMarket;\n        uint256 sizeDelta;\n        uint256 price;\n        uint256 collateralDelta;\n        uint256 collateral;\n        uint256 tp;\n        uint256 sl;\n        uint64 orderId;\n        address account;\n        bool isExec;\n        uint8 liqState;\n        uint64 fromOrder;\n        bytes32 refCode;\n        uint8 execNum;\n        bool isKeepLev;\n        bool isKeepLevTP;\n        bool isKeepLevSL;\n        bool triggerAbove;\n        uint128 gas;\n    }\n\n    struct Tuple6871229 {\n        address facetAddress;\n        uint8 action;\n        bytes4[] functionSelectors;\n    }\n\n    struct Tuple5605664 {\n        bool isSuspended;\n        bool allowOpen;\n        bool allowClose;\n        bool validDecrease;\n        uint16 minSlippage;\n        uint16 maxSlippage;\n        uint16 minLeverage;\n        uint16 maxLeverage;\n        uint16 minPayment;\n        uint16 minCollateral;\n        uint16 decreaseNumLimit;\n        uint32 maxTradeAmount;\n    }\n\n    struct Tuple564566 {\n        bytes32 refCode;\n        uint128 collateral;\n        uint128 size;\n        uint256 price;\n        uint256 tp;\n        bool triggerAbove;\n        bool isFromMarket;\n        bool isKeepLev;\n        bool isKeepLevTP;\n        bool isKeepLevSL;\n        uint64 orderID;\n        uint64 pairId;\n        uint64 fromId;\n        uint32 updatedAtBlock;\n        uint8 extra0;\n        address account;\n        uint96 extra1;\n        uint256 sl;\n        bool isIncrease;\n        bool isLong;\n        uint16 market;\n        uint96 extra2;\n        uint128 gas;\n        uint8 version;\n    }\n\n    struct Tuple826895 {\n        bool isSuspended;\n        bool allowOpen;\n        bool allowClose;\n        bool validDecrease;\n        uint16 minSlippage;\n        uint16 maxSlippage;\n        uint16 minLeverage;\n        uint16 maxLeverage;\n        uint16 minPayment;\n        uint16 minCollateral;\n        uint16 decreaseNumLimit;\n        uint32 maxTradeAmount;\n    }\n\n    struct Tuple557464 {\n        bool success;\n        bytes returnData;\n    }\n\n    struct Tuple3316247 {\n        uint256 size;\n        uint256 collateral;\n        int256 entryFundingRate;\n        int256 realisedPnl;\n        uint256 averagePrice;\n        bool isLong;\n        uint32 lastTime;\n        uint16 market;\n        uint72 extra0;\n    }\n\n    struct Tuple6022437 {\n        uint256 size;\n        uint256 collateral;\n        int256 entryFundingRate;\n        int256 realisedPnl;\n        uint256 averagePrice;\n        bool isLong;\n        uint32 lastTime;\n        uint16 market;\n        uint72 extra0;\n    }\n\n    struct Tuple09420 {\n        uint256 size;\n        uint256 collateral;\n        int256 entryFundingRate;\n        int256 realisedPnl;\n        uint256 averagePrice;\n        bool isLong;\n        uint32 lastTime;\n        uint16 market;\n        uint72 extra0;\n    }\n\n    struct Tuple6462124 {\n        uint256 size;\n        uint256 collateral;\n        int256 entryFundingRate;\n        int256 realisedPnl;\n        uint256 averagePrice;\n        bool isLong;\n        uint32 lastTime;\n        uint16 market;\n        uint72 extra0;\n    }\n\n    struct Tuple1236461 {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    function authority() external view returns (address) {}\n\n    function setAuthority(address newAuthority) external {}\n\n    function implementation() external view returns (address) {}\n\n    function setDummyImplementation(address _implementation) external {}\n\n    function SELF_addFee(uint16 market, bytes memory fee) external {}\n\n    function SELF_collectFees(bytes memory _data) external {}\n\n    function SELF_updateCumulativeFundingRate(\n        uint16 market,\n        uint256 longSize,\n        uint256 shortSize\n    ) external {}\n\n    function addSkipTime(uint16 market, uint256 start, uint256 end) external {}\n\n    function cumulativeFundingRates(\n        uint16 market,\n        bool isLong\n    ) external view returns (int256) {}\n\n    function feeWithdraw(uint16 market, address to, uint256 amount) external {}\n\n    function getExecFee(uint16 market) external view returns (uint256) {}\n\n    function getFeeAndRatesOfMarket(\n        uint16 market\n    )\n        external\n        view\n        returns (\n            uint256[] memory fees,\n            int256[] memory fundingRates,\n            int256[] memory _cumulativeFundingRates\n        )\n    {}\n\n    function getFeesReceivable(\n        Tuple21927 memory params,\n        Tuple464693 memory position\n    ) external view returns (int256[] memory fees, int256 totalFee) {}\n\n    function getFundingFee(\n        uint16 market,\n        uint256 size,\n        int256 entryFundingRate,\n        bool isLong\n    ) external view returns (int256) {}\n\n    function getGlobalOpenInterest(\n        uint16 market\n    ) external view returns (uint256 _globalSize) {}\n\n    function getNextFundingRate(\n        address market,\n        uint256 longSize,\n        uint256 shortSize\n    ) external {}\n\n    function getOrderFees(\n        Tuple2426236 memory data\n    ) external view returns (int256 fees) {}\n\n    function initFeeFacet(uint16 market) external {}\n\n    function setCalFundingRates(\n        uint16 market,\n        bool isLong,\n        int256 calFundingRate\n    ) external {}\n\n    function setCalIntervals(uint16 market, uint256 interval) external {}\n\n    function setFeeAndRates(\n        uint16 market,\n        uint8 feeType,\n        uint256 feeAndRate\n    ) external {}\n\n    function setFeeConfigs(\n        uint16 market,\n        uint8 configType,\n        uint256 value\n    ) external {}\n\n    function setFundFeeLoss(uint16 market, uint256 loss) external {}\n\n    function setFundingIntervals(uint16 market, uint256 interval) external {}\n\n    function setFundingRates(\n        uint16 market,\n        bool isLong,\n        int256 fundingRate,\n        int256 cumulativeFundingRate\n    ) external {}\n\n    function setLastCalTimes(uint16 market, uint256 lastCalTime) external {}\n\n    function marketMakerForConfig(\n        bool isSuspended,\n        bool allowOpen,\n        bool allowClose,\n        bool validDecrease,\n        uint16 minSlippage,\n        uint16 maxSlippage,\n        uint16 minLeverage,\n        uint16 maxLeverage,\n        uint16 minPayment,\n        uint16 minCollateral,\n        uint16 decreaseNumLimit,\n        uint32 maxTradeAmount\n    ) external pure returns (Tuple5605664 memory) {}\n\n    function marketMakerForFee(\n        uint256 maxFRatePerDay,\n        uint256 fRateFactor,\n        uint256 mintFRate,\n        uint256 minFundingInterval,\n        uint256 fundingFeeLossOffLimit\n    ) external pure returns (bytes memory) {}\n\n    function marketMakerForOracle(\n        address pricefeed,\n        uint256 maxCumulativeDeltaDiffs\n    ) external pure returns (bytes memory) {}\n\n    function SELF_addGValid(\n        uint16 market,\n        uint256 maxMarketSizeLimit\n    ) external {}\n\n    function SELF_addMarket(\n        bytes memory data\n    ) external returns (uint16 market) {}\n\n    function SELF_addOracle(uint16 market, bytes memory oracle) external {}\n\n    function addMarket(\n        string memory name,\n        address _vault,\n        uint256 maxMarketSizeLimit,\n        Tuple0408041 memory config,\n        bytes memory oracle,\n        bytes memory fee\n    ) external returns (uint16 market) {}\n\n    function availableLiquidity(\n        address market,\n        address account,\n        bool isLong\n    ) external view returns (uint256) {}\n\n    function containsMarket(uint16 marketId) external view returns (bool) {}\n\n    function getExecutableOrdersByPrice(\n        Tuple2589231 memory cache\n    ) external view returns (Tuple564566[] memory _orders) {}\n\n    function getGlobalPnl(address _vault) external view returns (int256) {}\n\n    function getMarket(\n        uint16 market\n    ) external view returns (bytes memory result) {}\n\n    function getMarkets() external view returns (bytes memory result) {}\n\n    function getUSDDecimals() external pure returns (uint8) {}\n\n    function markeConfig(\n        uint16 market\n    ) external view returns (Tuple826895 memory _config) {}\n\n    function removeMarket(uint16 marketId) external {}\n\n    function setMarketConf(uint16 market, Tuple9273272 memory data) external {}\n\n    function aggregateCall(\n        bytes[] memory calls\n    ) external returns (uint256 blockNumber, bytes[] memory returnData) {}\n\n    function aggregateStaticCall(\n        bytes[] memory calls\n    ) external view returns (uint256 blockNumber, bytes[] memory returnData) {}\n\n    function blockAndAggregate(\n        bytes[] memory calls\n    )\n        external\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Tuple557464[] memory returnData\n        )\n    {}\n\n    function getBlockHash(\n        uint256 blockNumber\n    ) external view returns (bytes32 blockHash) {}\n\n    function getBlockNumber() external view returns (uint256 blockNumber) {}\n\n    function getCurrentBlockCoinbase()\n        external\n        view\n        returns (address coinbase)\n    {}\n\n    function getCurrentBlockGasLimit()\n        external\n        view\n        returns (uint256 gaslimit)\n    {}\n\n    function getCurrentBlockTimestamp()\n        external\n        view\n        returns (uint256 timestamp)\n    {}\n\n    function getEthBalance(\n        address addr\n    ) external view returns (uint256 balance) {}\n\n    function getLastBlockHash() external view returns (bytes32 blockHash) {}\n\n    function tryAggregate(\n        bool requireSuccess,\n        bytes[] memory calls\n    ) external returns (Tuple557464[] memory returnData) {}\n\n    function tryBlockAndAggregate(\n        bool requireSuccess,\n        bytes[] memory calls\n    )\n        external\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Tuple557464[] memory returnData\n        )\n    {}\n\n    function getChainPrice(\n        uint16 market,\n        bool _maximise\n    ) external view returns (uint256) {}\n\n    function getFastPrice(\n        uint16 market,\n        uint256 _referencePrice,\n        bool _maximise\n    ) external view returns (uint256) {}\n\n    function getPrice(\n        uint16 market,\n        bool _maximise\n    ) external view returns (uint256) {}\n\n    function initDefaultOracleConfig() external {}\n\n    function priceFeed(uint16 market) external view returns (address) {}\n\n    function setMaxCumulativeDeltaDiffs(\n        uint16[] memory _market,\n        uint256[] memory _maxCumulativeDeltaDiffs\n    ) external {}\n\n    function setOracleConfig(Tuple803863 memory _config) external {}\n\n    function setPrices(\n        uint16[] memory _markets,\n        uint256[] memory _prices\n    ) external {}\n\n    function setUSDT(address _feed) external {}\n\n    function usdtFeed() external view returns (address) {}\n\n    function SELF_addOrders(\n        Tuple8179501[] memory _inputs\n    ) external returns (Tuple564566[] memory _orders) {}\n\n    function cancelOrder(\n        address account,\n        uint16 market,\n        bool isIncrease,\n        uint256 orderID,\n        bool isLong\n    ) external returns (Tuple564566[] memory _orders) {}\n\n    function updateOrder(Tuple910965 memory _inputs) external payable {}\n\n    function execAddOrder(\n        Tuple680644 memory order,\n        Tuple5849784 memory _params\n    ) external {}\n\n    function getAccountSizeOfMarkets(\n        uint16 market,\n        address account\n    ) external view returns (uint256 sizesL, uint256 sizesS) {}\n\n    function getGlobalSize(\n        uint16 market\n    ) external view returns (uint256 sizesLong, uint256 sizesShort) {}\n\n    function getMarketsOfMarket(\n        uint16 market\n    ) external view returns (uint256[] memory) {}\n\n    function SELF_decreasePosition(\n        Tuple8634448 memory inputs\n    ) external returns (Tuple3316247 memory result) {}\n\n    function SELF_increasePosition(\n        Tuple8047955 memory _data\n    ) external returns (Tuple3316247 memory result) {}\n\n    function SELF_liquidatePosition(\n        uint16 market,\n        address account,\n        uint256 oraclePrice,\n        bool isLong\n    ) external returns (Tuple3316247 memory result) {}\n\n    function containsPositionOfUser(\n        uint16 market,\n        address account\n    ) external view returns (bool) {}\n\n    function getAccountSize(\n        uint16 market,\n        address account\n    ) external view returns (uint256, uint256) {}\n\n    function getGlobalPosition(\n        uint16 market,\n        bool isLong\n    ) external view returns (Tuple6022437 memory) {}\n\n    function getMarketSizes(\n        uint16 market\n    ) external view returns (uint256, uint256) {}\n\n    function getPNLOfMarket(uint16 market) external view returns (int256 pnl) {}\n\n    function getPNLOfUser(\n        uint16 market,\n        address account,\n        uint256 sizeDelta,\n        uint256 markPrice,\n        bool isLong\n    ) external view returns (int256) {}\n\n    function getPosition(\n        uint16 market,\n        address account,\n        uint256 markPrice,\n        bool isLong\n    ) external view returns (Tuple6022437 memory) {}\n\n    function getPositionCount(\n        uint16 market,\n        bool isLong\n    ) external view returns (uint256) {}\n\n    function getPositionKeys(\n        uint16 market,\n        uint256 start,\n        uint256 end,\n        bool isLong\n    ) external view returns (address[] memory) {}\n\n    function getPositions(\n        uint16 market,\n        address account\n    )\n        external\n        view\n        returns (Tuple09420 memory posLong, Tuple6462124 memory posShort)\n    {}\n\n    function isLiquidate(\n        address _account,\n        uint16 _market,\n        bool _isLong,\n        uint256 _price\n    ) external view returns (uint8 _state) {}\n\n    function execSubOrder(\n        Tuple680644 memory order,\n        Tuple5849784 memory _params\n    ) external {}\n\n    function liquidate(\n        uint16 market,\n        address accounts,\n        bool _isLong\n    ) external {}\n\n    function SELF_updatePositionCallback(Tuple4013238 memory _event) external {}\n\n    function getCodeOwners(bytes32 _code) external view returns (address) {}\n\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external {}\n\n    function registerCode(bytes32 _code) external {}\n\n    function setCodeOwner(bytes32 _code, address _newAccount) external {}\n\n    function setReferrerDiscountShare(\n        address _account,\n        uint256 _discountShare\n    ) external {}\n\n    function setReferrerTier(address _referrer, uint256 _tierId) external {}\n\n    function setTier(\n        uint256 _tierId,\n        uint256 _totalRebate,\n        uint256 _discountShare\n    ) external {}\n\n    function setTraderReferralCodeByGov(\n        address _account,\n        bytes32 _code\n    ) external {}\n\n    function setTraderReferralCodeByUser(bytes32 _code) external {}\n\n    function diamondCut(\n        Tuple6871229[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) external {}\n\n    function owner() external view returns (address owner_) {}\n\n    function transferOwnership(address _newOwner) external {}\n\n    function facetAddress(\n        bytes4 _functionSelector\n    ) external view returns (address facetAddress_) {}\n\n    function facetAddresses()\n        external\n        view\n        returns (address[] memory facetAddresses_)\n    {}\n\n    function facetFunctionSelectors(\n        address _facet\n    ) external view returns (bytes4[] memory facetFunctionSelectors_) {}\n\n    function facets() external view returns (Tuple1236461[] memory facets_) {}\n\n    function supportsInterface(\n        bytes4 _interfaceId\n    ) external view returns (bool) {}\n}\n"
    },
    "src/facets/AutoLiqFacet.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.0;\n\n// import \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\n// import {IPrice} from \"../interfaces/IPrice.sol\";\n// import {IPositionFacet} from \"../interfaces/IPositionFacet.sol\";\n// // import {IMarket} from \"../market/interfaces/IMarket.sol\";\n// // import {IMarketValid} from \"./../market/interfaces/IMarketValid.sol\";\n// import \"../lib/types/Types.sol\";\n\n// contract AutoLiq is AutomationCompatibleInterface {\n//     function getPrice(uint16 market, bool isLong) private view returns (uint256) {\n//         return IPrice(address(this)).getPrice(market, !isLong);\n//     }\n\n//     function checkUpkeep2(uint16 market, bool isLong) private view returns (address[] memory accountsForLiquidate) {\n//         address[] memory accounts = IPositionFacet(address(this)).getPositionKeys(0, 9999, isLong);\n//         address[] memory liqList = new address[](accounts.length);\n//         uint256 liqCount;\n//         uint256 i;\n//         for (; i < accounts.length; i++) {\n//             LiquidationState liqState =\n//                 IPositionFacet(address(this)).isLiquidate(accounts[i], market, isLong, getPrice(market, isLong));\n//             if (liqState == LiquidationState.None) continue;\n//             liqList[liqCount] = accounts[i];\n//             liqCount++;\n//         }\n\n//         accountsForLiquidate = new address[](liqCount);\n//         for (i = 0; i < liqCount; i++) {\n//             accountsForLiquidate[i] = liqList[i];\n//         }\n//     }\n\n//     function checkUpkeep(bytes memory checkData)\n//         external\n//         view\n//         override\n//         returns (bool upkeepNeeded, bytes memory performData)\n//     {\n//         uint16 market = abi.decode(checkData, (address));\n//         address[] memory retLong = checkUpkeep2(market, true);\n//         address[] memory retShort = checkUpkeep2(market, false);\n//         if (retLong.length + retShort.length == 0) return (false, performData);\n//         return (true, abi.encode(market, retLong, retShort));\n//     }\n\n//     function performUpkeep(bytes memory performData) external override {\n//         (uint16 market, address[] memory retLong, address[] memory retShort) =\n//             abi.decode(performData, (address, address[], address[]));\n//         if (retLong.length > 0) {\n//             IMarket(market).liquidatePositions(retLong, true);\n//         }\n//         if (retShort.length > 0) {\n//             IMarket(market).liquidatePositions(retShort, false);\n//         }\n//     }\n// }\n"
    },
    "src/facets/FeeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AccessManagedUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n//================================================================\n//handlers\nimport {FeeHandler} from \"../lib/fee/FeeHandler.sol\";\nimport {BalanceHandler} from \"../lib/balance/BalanceHandler.sol\";\nimport {MarketHandler} from \"../lib/market/MarketHandler.sol\";\n//================================================================\n//interfaces\nimport {IVault} from \"../interfaces/IVault.sol\";\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\nimport {IFeeFacet} from \"../interfaces/IFeeFacet.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n//================================================================\n//data types\nimport \"../lib/types/Types.sol\";\nimport \"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\";\n\ncontract FeeFacet is IAccessManaged, IFeeFacet, UsingDiamondOwner {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    // //================================================================\n    // // only self\n    // //================================================================\n\n    function SELF_collectFees(bytes calldata _data) external onlySelf {\n        (\n            address account,\n            address token,\n            int256[] memory fees,\n            uint256 fundfeeLoss,\n            uint16 market\n        ) = abi.decode(_data, (address, address, int256[], uint256, uint16));\n        uint256 _amount = IERC20(token).allowance(msg.sender, address(this));\n        // todo 会存在这种现象嘛 如果存在要不要更新event\n        //if (_amount == 0 && fundfeeLoss == 0) return;\n        if (_amount != 0) {\n            BalanceHandler.marketToFee(market, account, _amount, _data);\n        }\n        if (fundfeeLoss > 0) {\n            uint256 _before = FeeHandler.Storage().fundFeeLoss[market];\n            FeeHandler.Storage().fundFeeLoss[market] += fundfeeLoss;\n            BalanceHandler.feeToMarket(market, account, fundfeeLoss, fees);\n            // emit AddNegativeFeeLoss(market, account, _before, Storage().fundFeeLoss[market]);\n        }\n        emit FeeHandler.UpdateFee(account, market, fees, _amount);\n    }\n\n    function SELF_addFee(uint16 market, bytes calldata fee) external {\n        if (address(this) != msg.sender) {\n            _checkCanCall(msg.sender, msg.data);\n        }\n        (\n            uint256 maxFRatePerDay,\n            uint256 fRateFactor,\n            uint256 mintFRate,\n            uint256 minFundingInterval,\n            uint256 fundingFeeLossOffLimit\n        ) = abi.decode(fee, (uint256, uint256, uint256, uint256, uint256));\n        FeeHandler.Storage().configs[market][\n            uint8(FeeHandler.ConfigType.MaxFRatePerDay)\n        ] = maxFRatePerDay;\n        FeeHandler.Storage().configs[market][\n            uint8(FeeHandler.ConfigType.FRateFactor)\n        ] = fRateFactor;\n        FeeHandler.Storage().configs[market][\n            uint8(FeeHandler.ConfigType.MinFRate)\n        ] = mintFRate;\n        FeeHandler.Storage().configs[market][\n            uint8(FeeHandler.ConfigType.MinFundingInterval)\n        ] = minFundingInterval;\n        FeeHandler.Storage().configs[market][\n            uint8(FeeHandler.ConfigType.FundingFeeLossOffLimit)\n        ] = fundingFeeLossOffLimit;\n    }\n\n    function SELF_updateCumulativeFundingRate(\n        uint16 market,\n        uint256 longSize,\n        uint256 shortSize\n    ) external override onlySelf {\n        // TODO too much to do\n    }\n    // //================================================================\n    // // ADMIN\n    // //================================================================\n\n    function initFeeFacet(uint16 market) external onlyOwner {\n        FeeHandler.initialize(market);\n    }\n\n    function feeWithdraw(\n        uint16 market,\n        address to,\n        uint256 amount\n    ) external restricted {\n        // TODO\n        address token = MarketHandler.Storage().token[market];\n        BalanceHandler.feeToReward(token, market, to, amount);\n    }\n\n    function setFeeAndRates(\n        uint16 market,\n        uint8 feeType,\n        uint256 feeAndRate\n    ) external restricted {\n        // TODO\n        FeeHandler.Storage().feeAndRates[market][feeType] = feeAndRate;\n    }\n\n    function setFundingRates(\n        uint16 market,\n        bool isLong,\n        int256 fundingRate,\n        int256 cumulativeFundingRate\n    ) external restricted {\n        FeeHandler.Storage().fundingRates[market][isLong] = fundingRate;\n        FeeHandler.Storage().cumulativeFundingRates[market][\n            isLong\n        ] = cumulativeFundingRate;\n    }\n\n    function setFundingIntervals(\n        uint16 market,\n        uint256 interval\n    ) external restricted {\n        FeeHandler.Storage().fundingIntervals[market] = interval;\n    }\n\n    function setFeeConfigs(\n        uint16 market,\n        uint8 configType,\n        uint256 value\n    ) external restricted {\n        FeeHandler.Storage().configs[market][configType] = value;\n    }\n\n    function setCalIntervals(\n        uint16 market,\n        uint256 interval\n    ) external restricted {\n        FeeHandler.Storage().calIntervals[market] = interval;\n    }\n\n    function setLastCalTimes(\n        uint16 market,\n        uint256 lastCalTime\n    ) external restricted {\n        FeeHandler.Storage().lastCalTimes[market] = lastCalTime;\n    }\n\n    function setCalFundingRates(\n        uint16 market,\n        bool isLong,\n        int256 calFundingRate\n    ) external restricted {\n        FeeHandler.Storage().calFundingRates[market][isLong] = calFundingRate;\n    }\n\n    function setFundFeeLoss(uint16 market, uint256 loss) external restricted {\n        FeeHandler.Storage().fundFeeLoss[market] = loss;\n    }\n\n    function addSkipTime(\n        uint16 market,\n        uint256 start,\n        uint256 end\n    ) external restricted {\n        // FeeHandler.addSkipTime(market, start, end);\n    }\n\n    // //================================================\n    // // view functions\n    // //================================================\n    function getOrderFees(\n        MarketCache calldata data\n    ) external view override returns (int256 fees) {\n        return FeeHandler.getOrderFees(data);\n    }\n\n    function getExecFee(uint16 market) external view returns (uint256) {\n        return FeeHandler.getExecFee(market);\n    }\n\n    function getFeesReceivable(\n        MarketCache calldata params,\n        PositionProps calldata position\n    ) external view override returns (int256[] memory fees, int256 totalFee) {\n        fees = FeeHandler.getFeesReceivable(params, position);\n        totalFee = FeeHandler.totalFees(fees);\n    }\n\n    function getFundingRate(\n        uint16 market,\n        bool isLong\n    ) internal view returns (int256) {\n        return FeeHandler.getFundingRate(market, isLong);\n    }\n\n    function cumulativeFundingRates(\n        uint16 market,\n        bool isLong\n    ) external view override returns (int256) {\n        return FeeHandler.Storage().cumulativeFundingRates[market][isLong];\n    }\n\n    function getNextFundingRate(\n        address market,\n        uint256 longSize,\n        uint256 shortSize\n    ) public {\n        //todo\n    }\n\n    function getFundingFee(\n        uint16 market,\n        uint256 size,\n        int256 entryFundingRate,\n        bool isLong\n    ) external view returns (int256) {\n        return FeeHandler.getFundingFee(market, size, entryFundingRate, isLong);\n    }\n\n    function getGlobalOpenInterest(\n        uint16 market\n    ) public view returns (uint256 _globalSize) {\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        uint256 openInterest = 0;\n        EnumerableSet.UintSet storage marketIds = $.marketIds[address(0)];\n        address vault = $.vault[market];\n        for (uint256 i = 0; i < marketIds.length(); i++) {\n            uint16 marketId = uint16(marketIds.at(i));\n            openInterest += IVault(vault).fundsUsed(marketId);\n        }\n        return openInterest;\n    }\n\n    function getFeeAndRatesOfMarket(\n        uint16 market\n    )\n        external\n        view\n        override\n        returns (\n            uint256[] memory fees,\n            int256[] memory fundingRates,\n            int256[] memory _cumulativeFundingRates\n        )\n    {\n        //todo merge with getfees?\n        fees = new uint256[](uint8(FeeType.Counter));\n        for (uint8 i = 0; i < uint8(FeeType.Counter); i++) {\n            fees[i] = FeeHandler.Storage().feeAndRates[market][i];\n        }\n        fundingRates = new int256[](2);\n        fundingRates[0] = FeeHandler.Storage().fundingRates[market][true];\n        fundingRates[1] = FeeHandler.Storage().fundingRates[market][false];\n        _cumulativeFundingRates = new int256[](2);\n        _cumulativeFundingRates[0] = FeeHandler\n            .Storage()\n            .cumulativeFundingRates[market][true];\n        _cumulativeFundingRates[1] = FeeHandler\n            .Storage()\n            .cumulativeFundingRates[market][false];\n    }\n}\n"
    },
    "src/facets/funcs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\n\nimport {IVault} from \"../interfaces/IVault.sol\";\nimport {MarketHandler} from \"../lib/market/MarketHandler.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nuint8 constant usdDecimals = 18; //数量精度\n\nfunction vault(uint16 market) view returns (IVault) {\n    return IVault(MarketHandler.vault(market));\n}\n\nfunction formatCollateral(\n    uint256 amount,\n    address colleteralToken\n) view returns (uint256) {\n    uint8 collateralTokenDigits = IERC20Metadata(colleteralToken).decimals();\n    return\n        (amount * (10 ** uint256(collateralTokenDigits))) / (10 ** usdDecimals);\n}\n\nfunction parseVaultAsset(\n    uint256 amount,\n    address colleteralToken\n) view returns (uint256) {\n    uint8 collateralTokenDigits = IERC20Metadata(colleteralToken).decimals();\n    return\n        (amount * (10 ** uint256(usdDecimals))) / (10 ** collateralTokenDigits);\n}\n\nfunction parseVaultAssetSigned(\n    int256 amount,\n    address colleteralToken\n) view returns (int256) {\n    uint8 collateralTokenDigits = IERC20Metadata(colleteralToken).decimals();\n    return\n        (amount * int256(10 ** uint256(collateralTokenDigits))) /\n        int256(10 ** uint256(usdDecimals));\n}\n\nfunction transferOut(address tokenAddress, address _to, uint256 _tokenAmount) {\n    // If the token amount is 0, return.\n    if (_tokenAmount == 0) return;\n    // Format the collateral amount based on the token's decimals.\n    _tokenAmount = formatCollateral(_tokenAmount, tokenAddress);\n    // Transfer the tokens to the specified address.\n    SafeERC20.safeTransfer(IERC20Metadata(tokenAddress), _to, _tokenAmount);\n}\n"
    },
    "src/facets/MarketFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../lib/utils/EnumerableValues.sol\";\nimport {AccessManagedUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol\";\nimport \"./funcs.sol\";\n//================================================================\n//handlers\nimport {MarketHandler} from \"../lib/market/MarketHandler.sol\";\nimport {PositionStorage} from \"../lib/position/PositionStorage.sol\";\nimport {OracleHandler} from \"../lib/oracle/OracleHandler.sol\";\nimport {OrderFinder, OrderFinderCache} from \"../lib/order/OrderFinder.sol\";\n\nimport {GValidHandler} from \"../lib/globalValid/GValidHandler.sol\";\n\n//================================================================\n//interfaces\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\nimport {IERC4626} from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IMarketFacet.sol\";\nimport {IFeeFacet} from \"../interfaces/IFeeFacet.sol\";\n\ncontract MarketFacet is IAccessManaged, IMarketFacet {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.UintSet;\n\n    using SafeERC20 for IERC20Metadata;\n\n    event OracleAdded(\n        uint16 market,\n        address pricefeed,\n        uint256 maxCumulativeDeltaDiffs\n    );\n    event MarketAdded(\n        uint16 market,\n        string name,\n        address vault,\n        address token,\n        MarketHandler.Props config\n    );\n\n    //================================================================\n    // only self\n    //================================================================\n\n    //================================================================\n    // ADMIN\n    //================================================================\n\n    function setMarketConf(\n        uint16 market,\n        MarketHandler.Props memory data\n    ) external restricted {\n        // //TODO 查一下当前 market balance\n        MarketHandler.Storage().config[market] = data;\n        // test\n    }\n\n    function addMarket(\n        string memory name,\n        address _vault,\n        uint256 maxMarketSizeLimit,\n        MarketHandler.Props calldata config,\n        bytes calldata oracle,\n        bytes calldata fee\n    ) external restricted returns (uint16 market) {\n        market = MarketFacet(address(this)).SELF_addMarket(\n            abi.encode(name, _vault, address(0), config)\n        );\n        MarketFacet(address(this)).SELF_addOracle(market, oracle);\n        MarketFacet(address(this)).SELF_addGValid(market, maxMarketSizeLimit);\n        IFeeFacet(address(this)).SELF_addFee(market, fee);\n    }\n\n    function SELF_addGValid(\n        uint16 market,\n        uint256 maxMarketSizeLimit\n    ) external {\n        if (address(this) != msg.sender) {\n            _checkCanCall(msg.sender, msg.data);\n        }\n        GValidHandler.StorageStruct storage $ = GValidHandler.Storage();\n        $.maxMarketSizeLimit[market] = maxMarketSizeLimit;\n    }\n\n    function SELF_addOracle(uint16 market, bytes calldata oracle) external {\n        if (address(this) != msg.sender) {\n            _checkCanCall(msg.sender, msg.data);\n        }\n        OracleHandler.StorageStruct storage $ = OracleHandler.Storage();\n        (address pricefeed, uint256 maxCumulativeDeltaDiffs) = abi.decode(\n            oracle,\n            (address, uint256)\n        );\n        $.priceFeeds[market] = pricefeed;\n        $.maxCumulativeDeltaDiffs[market] = maxCumulativeDeltaDiffs;\n    }\n\n    function SELF_addMarket(\n        bytes calldata data\n    ) external returns (uint16 market) {\n        if (address(this) != msg.sender) {\n            _checkCanCall(msg.sender, msg.data);\n        }\n\n        market = MarketHandler.Storage().marketIdAutoIncrease + 1;\n        (\n            string memory name,\n            address _vault,\n            address token,\n            MarketHandler.Props memory config\n        ) = abi.decode(data, (string, address, address, MarketHandler.Props));\n\n        MarketHandler.Storage().name[market] = name;\n        if (token == address(0)) {\n            MarketHandler.Storage().token[market] = IERC4626(_vault).asset();\n        } else {\n            MarketHandler.Storage().token[market] = token;\n        }\n        bool suc = MarketHandler.Storage().marketIds[_vault].add(\n            uint256(market)\n        );\n        require(suc, \"MarketFacet: market already exists\");\n        MarketHandler.Storage().vault[market] = _vault;\n        MarketHandler.Storage().config[market] = config;\n        MarketHandler.Storage().marketIdAutoIncrease = market;\n        emit MarketAdded(market, name, _vault, token, config);\n    }\n\n    function removeMarket(uint16 marketId) external restricted {\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        address _vault = $.vault[marketId];\n        MarketHandler.Storage().marketIds[_vault].remove(uint256(marketId));\n        delete MarketHandler.Storage().vault[marketId];\n    }\n\n    //================================================================\n    // view only\n    //================================================================\n\n    function markeConfig(\n        uint16 market\n    ) external view returns (MarketHandler.Props memory _config) {\n        _config = MarketHandler.Storage().config[market];\n    }\n\n    function getGlobalPnl(address _vault) public view returns (int256) {\n        EnumerableSet.UintSet storage marketIds = MarketHandler\n            .Storage()\n            .marketIds[_vault];\n        uint256[] memory _markets = marketIds.values();\n        int256 pnl = 0;\n        for (uint256 i = 0; i < _markets.length; i++) {\n            uint16 market = uint16(_markets[i]);\n            pnl =\n                pnl +\n                PositionStorage.getMarketPNLInBoth(\n                    market,\n                    OracleHandler.getPrice(market, true),\n                    OracleHandler.getPrice(market, false)\n                );\n        }\n        return pnl;\n    }\n\n    function availableLiquidity(\n        address market,\n        address account,\n        bool isLong\n    ) external view returns (uint256) {\n        // todo for front end\n    }\n\n    function getMarket(\n        uint16 market\n    ) external view returns (bytes memory result) {\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        return\n            abi.encode(\n                $.name[market],\n                $.vault[market],\n                $.token[market],\n                $.balance[market],\n                $.config[market]\n            );\n    }\n\n    function getMarkets() external view returns (bytes memory result) {\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        uint256[] memory _markets = $.marketIds[msg.sender].values();\n        bytes memory result = new bytes(_markets.length * 32);\n        for (uint256 i = 0; i < _markets.length; i++) {\n            uint16 market = uint16(_markets[i]);\n            bytes memory data = abi.encode(\n                $.name[market],\n                $.vault[market],\n                $.token[market],\n                $.balance[market],\n                $.config[market]\n            );\n            assembly {\n                mstore(add(result, mul(i, 32)), data)\n            }\n        }\n        return result;\n    }\n\n    function getUSDDecimals() external pure returns (uint8) {\n        return usdDecimals;\n    }\n\n    // function setPricesAndExecute(bytes calldata _data) external  {\n    //     (uint16 market, uint256 price, uint256 timestamp, bytes[] memory _varList) =\n    //         abi.decode(_data, (uint16, uint256, uint256, bytes[]));\n    //     OracleHandler.setPrice(market, price);\n    //     for (uint256 index = 0; index < _varList.length; index++) {\n    //         // TODO\n    //         // _execOrder(_varList[index]);\n    //     }\n    // }\n\n    // function execOrder(bytes calldata data) external  {\n    //     _execOrder(data);\n    // }\n\n    function containsMarket(uint16 marketId) external view returns (bool) {\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        address _vault = $.vault[marketId];\n        return $.marketIds[_vault].contains(uint256(marketId));\n    }\n\n    // function _execOrder(bytes calldata data) private {\n    //     // TODO...\n    //     // (bytes32 orderKey, bool isOpen, bool isLong) = abi.decode(data, (bytes32, bool, bool));\n    //     // if (isOpen) {\n    //     //     try IPositionAddMgrFacet(address(this)).execAddOrderKey(orderKey) {\n    //     //         // success\n    //     //     } catch Error(string memory errorMessage) {\n    //     //         bytes memory data = abi.encode(errorMessage);\n    //     //         IOrderFacet.sysCancelOrder(data);\n    //     //     }\n    //     // } else {\n    //     //     try IPositionSubMgrFacet(address(this)).execSubOrderKey(orderKey) {\n    //     //         // success\n    //     //     } catch Error(string memory errorMessage) {\n    //     //         bytes memory data = abi.encode(errorMessage);\n    //     //         IOrderFacet.sysCancelOrder(data);\n    //     //     }\n    //     // }\n    // }\n\n    function getExecutableOrdersByPrice(\n        OrderFinderCache memory cache\n    ) external view override returns (OrderProps[] memory _orders) {\n        return OrderFinder.getExecutableOrdersByPrice(cache);\n    }\n}\n"
    },
    "src/facets/MarketMakerFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n//================================================================\n//handlers\nimport {MarketHandler} from \"../lib/market/MarketHandler.sol\";\n\n//================================================================\n//interfaces\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\n\ncontract MarketMakerFacet is IAccessManaged {\n    function marketMakerForConfig(\n        bool isSuspended,\n        bool allowOpen,\n        bool allowClose,\n        bool validDecrease,\n        uint16 minSlippage,\n        uint16 maxSlippage,\n        uint16 minLeverage,\n        uint16 maxLeverage,\n        uint16 minPayment,\n        uint16 minCollateral,\n        uint16 decreaseNumLimit, //default: 10\n        uint32 maxTradeAmount\n    ) external pure returns (MarketHandler.Props memory) {\n        return\n            MarketHandler.Props({\n                isSuspended: isSuspended,\n                allowOpen: allowOpen,\n                allowClose: allowClose,\n                validDecrease: validDecrease,\n                minSlippage: minSlippage,\n                maxSlippage: maxSlippage,\n                minLeverage: minLeverage,\n                maxLeverage: maxLeverage,\n                minPayment: minPayment,\n                minCollateral: minCollateral,\n                decreaseNumLimit: decreaseNumLimit,\n                maxTradeAmount: maxTradeAmount\n            });\n    }\n\n    function marketMakerForOracle(\n        address pricefeed,\n        uint256 maxCumulativeDeltaDiffs\n    ) external pure returns (bytes memory) {\n        return abi.encode(pricefeed, maxCumulativeDeltaDiffs);\n    }\n\n    function marketMakerForFee(\n        uint256 maxFRatePerDay,\n        uint256 fRateFactor,\n        uint256 mintFRate,\n        uint256 minFundingInterval,\n        uint256 fundingFeeLossOffLimit\n    ) external pure returns (bytes memory) {\n        return\n            abi.encode(\n                maxFRatePerDay,\n                fRateFactor,\n                mintFRate,\n                minFundingInterval,\n                fundingFeeLossOffLimit\n            );\n    }\n}\n"
    },
    "src/facets/MultiCallFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MultiCallFacet {\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregateCall(\n        bytes[] memory calls\n    ) public returns (uint256 blockNumber, bytes[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new bytes[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (address target, bytes memory callData) = abi.decode(\n                calls[i],\n                (address, bytes)\n            );\n            (bool success, bytes memory ret) = target.call(callData);\n            require(success, \"BlexMulticall aggregate: call failed\");\n            returnData[i] = ret;\n        }\n    }\n\n    function aggregateStaticCall(\n        bytes[] memory calls\n    ) external view returns (uint256 blockNumber, bytes[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new bytes[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (address target, bytes memory callData) = abi.decode(\n                calls[i],\n                (address, bytes)\n            );\n            (bool success, bytes memory ret) = target.staticcall(callData);\n            require(success, \"BlexMulticall aggregate: staticcall call failed\");\n            returnData[i] = ret;\n        }\n    }\n\n    function blockAndAggregate(\n        bytes[] memory calls\n    )\n        public\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Result[] memory returnData\n        )\n    {\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(\n            true,\n            calls\n        );\n    }\n\n    function getBlockHash(\n        uint256 blockNumber\n    ) public view returns (bytes32 blockHash) {\n        blockHash = blockhash(blockNumber);\n    }\n\n    function getBlockNumber() public view returns (uint256 blockNumber) {\n        blockNumber = block.number;\n    }\n\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n        coinbase = block.coinbase;\n    }\n\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n        gaslimit = block.gaslimit;\n    }\n\n    function getCurrentBlockTimestamp()\n        public\n        view\n        returns (uint256 timestamp)\n    {\n        timestamp = block.timestamp;\n    }\n\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\n        blockHash = blockhash(block.number - 1);\n    }\n\n    function tryAggregate(\n        bool requireSuccess,\n        bytes[] memory calls\n    ) public returns (Result[] memory returnData) {\n        returnData = new Result[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (address target, bytes memory callData) = abi.decode(\n                calls[i],\n                (address, bytes)\n            );\n            (bool success, bytes memory ret) = target.call(callData);\n\n            if (requireSuccess) {\n                require(success, \"Multicall2 aggregate: call failed\");\n            }\n\n            returnData[i] = Result(success, ret);\n        }\n    }\n\n    function tryBlockAndAggregate(\n        bool requireSuccess,\n        bytes[] memory calls\n    )\n        public\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Result[] memory returnData\n        )\n    {\n        blockNumber = block.number;\n        blockHash = blockhash(block.number);\n        returnData = tryAggregate(requireSuccess, calls);\n    }\n}\n"
    },
    "src/facets/OracleFacet.sol": {
      "content": "// 1. 外部预言机的依赖\n// 2. 处理预言机精度\n// 3. 价格逻辑的方法\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\nimport {OracleHandler} from \"../lib/oracle/OracleHandler.sol\";\nimport {IPrice} from \"../interfaces/IPrice.sol\";\nimport \"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\";\n\ncontract OracleFacet is IAccessManaged, IPrice, UsingDiamondOwner {\n    //================================================================\n    //   ADMIN functions\n    //================================================================\n\n    function initDefaultOracleConfig() external onlyOwner {\n        OracleHandler.ConfigStruct memory _config = OracleHandler.ConfigStruct({\n            maxDeviationBP: 100, //超过 1% 进行比价\n            priceDuration: 300, //checked\n            maxPriceUpdateDelay: 3600, // checked\n            priceDataInterval: 60, //checked\n            sampleSpace: 1 //checked\n        });\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\n        store.config = _config;\n    }\n\n    function setOracleConfig(\n        OracleHandler.ConfigStruct memory _config\n    ) external restricted {\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\n        store.config = _config;\n    }\n\n    function setPrices(\n        uint16[] memory _markets,\n        uint256[] memory _prices\n    ) external restricted {\n        OracleHandler.setPrices(_markets, _prices);\n    }\n\n    function setMaxCumulativeDeltaDiffs(\n        uint16[] memory _market,\n        uint256[] memory _maxCumulativeDeltaDiffs\n    ) external restricted {\n        for (uint256 i = 0; i < _market.length; i++) {\n            OracleHandler.Storage().maxCumulativeDeltaDiffs[\n                _market[i]\n            ] = _maxCumulativeDeltaDiffs[i];\n        }\n    }\n\n    function setUSDT(address _feed) external restricted {\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\n        store.USDT = _feed;\n    }\n\n    //========================================================================\n    //     view functions\n    //========================================================================\n\n    function priceFeed(uint16 market) external view returns (address) {\n        return OracleHandler.Storage().priceFeeds[market];\n    }\n\n    function usdtFeed() external view returns (address) {\n        return OracleHandler.Storage().USDT;\n    }\n\n    function getPrice(\n        uint16 market,\n        bool _maximise\n    ) external view override returns (uint256) {\n        return OracleHandler.getPrice(market, _maximise);\n    }\n\n    function getChainPrice(\n        uint16 market,\n        bool _maximise\n    ) external view returns (uint256) {\n        return OracleHandler.getChainPrice(market, _maximise);\n    }\n\n    function getFastPrice(\n        uint16 market,\n        uint256 _referencePrice,\n        bool _maximise\n    ) external view returns (uint256) {\n        return OracleHandler.getFastPrice(market, _referencePrice, _maximise);\n    }\n}\n"
    },
    "src/facets/OrderFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./funcs.sol\";\n\nimport {PositionFacetBase} from \"./PositionFacetBase.sol\";\n\n//================================================================\n//handlers\nimport {MarketHandler} from \"../lib/market/MarketHandler.sol\";\n//================================================================\n//interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IOrderFacet} from \"../interfaces/IOrderFacet.sol\";\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\n//================================================================\n//data types\nimport {OrderHelper, OrderHandler} from \"../lib/order/OrderHandler.sol\";\nimport \"../lib/types/Types.sol\";\nimport {Validations} from \"../lib/types/Valid.sol\";\n\n// here does not implement core logic\ncontract OrderFacet is IAccessManaged, IOrderFacet, PositionFacetBase {\n    using OrderHelper for OrderProps;\n    using SafeERC20 for IERC20Metadata;\n\n    //==========================================================================================\n    //       external functions\n    //==========================================================================================\n    function getPrice(bool _isMax) private view returns (uint256) {}\n\n    function updateOrder(MarketCache memory _inputs) external payable override {\n        MarketCache[] memory orderVars = new MarketCache[](1);\n        orderVars[0] = _inputs;\n        if (_inputs.isOpen && _inputs.isCreate) {\n            Validations.validPayMax(_inputs.market, _inputs.pay);\n        }\n        _inputs.oraclePrice = getPrice(_inputs.isLong == _inputs.isOpen);\n        if (_inputs.isFromMarket) {\n            _inputs.price = Validations.calSlippagePrice(_inputs);\n        }\n        if (_inputs.isCreate) {\n            // createOrder\n            transferIn(\n                MarketHandler.collateralToken(_inputs.market),\n                msg.sender,\n                address(this),\n                _inputs.collateralDelta\n            );\n            if (_inputs.isOpen) {\n                //todo\n                // (, int256 totalFee) = _feeFacet().getFeesReceivable(_inputs, 0);\n                // Validations.validIncreaseOrder(_inputs, totalFee);\n                _inputs.collateral = _inputs.pay;\n            } else {\n                int256 fees = _feeFacet().getOrderFees(_inputs);\n                PositionProps memory _position = _positionFacet().getPosition(\n                    _inputs.market,\n                    _inputs.account,\n                    _inputs.oraclePrice,\n                    _inputs.isLong\n                );\n                //todo\n                // _inputs.collateral =\n                //     getDecreaseDeltaCollateral(_inputs.extra3 > 0, _position.size, _inputs.size, _position.collateral);\n                Validations.validDecreaseOrder(\n                    _inputs.market,\n                    _position.collateral,\n                    _inputs.collateralDelta,\n                    _position.size,\n                    _inputs.sizeDelta,\n                    fees,\n                    OrderHandler.getOrderNum(\n                        _inputs.market,\n                        _inputs.isLong,\n                        _inputs.isOpen,\n                        _inputs.account\n                    )\n                );\n            }\n        }\n\n        OrderProps memory _order;\n        if (_inputs.isCreate) {\n            _order = _add(orderVars)[0];\n        } else {\n            _order = _update(_inputs);\n        }\n        // MarketLib.afterUpdateOrder(\n        //     _vars,\n        //     pluginGasLimit,\n        //     plugins,\n        //     collateralToken,\n        //     address(this)\n        // );\n    }\n\n    function cancelOrder(\n        address account,\n        uint16 market,\n        bool isIncrease,\n        uint256 orderID,\n        bool isLong\n    ) external returns (OrderProps[] memory _orders) {\n        if (address(this) != msg.sender && account != msg.sender) {\n            _checkCanCall(msg.sender, msg.data);\n        }\n        return _cancelOrder(market, isIncrease, isLong, msg.sender, orderID);\n    }\n\n    //==========================================================================================\n    //       private functions\n    //==========================================================================================\n\n    function transferIn(\n        address tokenAddress,\n        address _from,\n        address _to,\n        uint256 _tokenAmount\n    ) private {\n        // If the token amount is 0, return.\n        if (_tokenAmount == 0) return;\n        // Retrieve the token contract.\n        IERC20Metadata coll = IERC20Metadata(tokenAddress);\n        // Format the collateral amount based on the token's decimals and transfer the tokens.\n        coll.safeTransferFrom(\n            _from,\n            _to,\n            formatCollateral(_tokenAmount, tokenAddress)\n        );\n    }\n\n    function SELF_addOrders(\n        MarketCache[] memory _inputs\n    ) external onlySelf returns (OrderProps[] memory _orders) {\n        return _add(_inputs);\n    }\n\n    function _add(\n        MarketCache[] memory _inputs\n    ) private returns (OrderProps[] memory _orders) {\n        uint256 len = _inputs.length;\n        _orders = new OrderProps[](len);\n\n        for (uint256 i; i < len; ) {\n            OrderProps memory _order; //= _inputs[i].order;\n            // _order.version = Order.STRUCT_VERSION;\n            bytes32 sk = OrderHelper.storageKey(\n                _inputs[i].market,\n                _inputs[i].isLong,\n                _inputs[i].isOpen\n            );\n            _order.orderID = uint64(\n                OrderHandler.generateID(sk, _order.account)\n            );\n            _order = _setupTriggerAbove(_inputs[i], _order);\n            _orders[i] = _order;\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (len == 2) {\n            _orders[0].pairId = _orders[1].orderID;\n            _orders[1].pairId = _orders[0].orderID;\n        }\n\n        for (uint256 i; i < len; ) {\n            OrderProps memory _order = _orders[i];\n            _validInputParams(_order, _inputs[i].isOpen, _inputs[i].isLong);\n            bytes32 sk = OrderHelper.storageKey(\n                _inputs[i].market,\n                _inputs[i].isLong,\n                _inputs[i].isOpen\n            );\n            OrderHandler.add(sk, _order);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _validInputParams(\n        OrderProps memory _order,\n        bool _isOpen,\n        bool isLong\n    ) private pure {\n        if (_isOpen) {\n            // _order.validTPSL(isLong);\n            require(_order.collateral > 0, \"OB:invalid collateral\");\n        }\n        require(_order.account != address(0), \"OrderBook:invalid account\");\n    }\n\n    function _update(\n        MarketCache memory _inputs\n    ) internal returns (OrderProps memory _order) {\n        bytes32 okey = OrderHelper.getKey(_inputs.account, _inputs.orderId);\n        bytes32 sk = OrderHelper.storageKey(\n            _inputs.market,\n            _inputs.isLong,\n            _inputs.isOpen\n        );\n        require(\n            OrderHandler.containsKey(sk, okey),\n            \"OrderBook:invalid orderKey\"\n        );\n        _order = OrderHandler.getOrders(sk, okey);\n        require(\n            _order.version == OrderHelper.STRUCT_VERSION,\n            \"OrderBook:wrong version\"\n        ); // ，\n        _order.price = _inputs.price;\n\n        //******************************************************************\n        // 2023/10/07:  trigger\n        if (!_inputs.isOpen) {\n            _order.triggerAbove = _inputs.triggerAbove;\n        } else {\n            _order.isKeepLevTP = _inputs.isKeepLevTP;\n            _order.isKeepLevSL = _inputs.isKeepLevSL;\n        }\n\n        //******************************************************************\n        _order = _setupTriggerAbove(_inputs, _order); // order\n        if (_inputs.isOpen) {\n            _order.tp = _inputs.tp;\n            _order.sl = _inputs.sl;\n        }\n        _validInputParams(_order, _inputs.isOpen, _inputs.isLong);\n        OrderHandler.set(_order, sk);\n    }\n\n    function _cancelOrder(\n        uint16 market,\n        bool isIncrease,\n        bool isLong,\n        address account,\n        uint256 orderID\n    ) private returns (OrderProps[] memory _orders) {\n        bytes32 sk = OrderHelper.storageKey(market, isLong, isIncrease);\n        bytes32 ok = OrderHelper.getKey(account, uint64(orderID));\n        // TODO\n        // if (false == isIncrease) {\n        // bytes32 pairKey = OrderHelper.getPairKey(\n        // ); // pairKey\n        //     _orders = new OrderProps[](pairKey != bytes32(0) ? 2 : 1); // pairKey0_orders\n        //     if (pairKey != bytes32(0)) _orders[1] = _remove(sk, pairKey);\n        // } else {\n        //     _orders = new OrderProps[](1);\n        // } // pairKey0_orders\n        // _orders[0] = _remove(sk, ok);\n        require(_orders[0].account != address(0), \"PositionSubMgr:!account\"); // new added\n    }\n\n    function _setupTriggerAbove(\n        MarketCache memory _inputs,\n        OrderProps memory _order\n    ) private pure returns (OrderProps memory) {\n        if (_inputs.isFromMarket) {\n            _order.triggerAbove = _inputs.isOpen == !_inputs.isLong;\n            _order.isFromMarket = true;\n        } else {\n            if (_inputs.isOpen) {\n                _order.triggerAbove = !_inputs.isLong;\n            } else if (_inputs.triggerAbove == false) {\n                _order.triggerAbove = _inputs.oraclePrice < _order.price;\n            } else {\n                _order.triggerAbove = _inputs.triggerAbove;\n            }\n        }\n        return _order;\n    }\n}\n"
    },
    "src/facets/PositionAddFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\npragma abicoder v2;\n\nimport {Validations} from \"../lib/types/Valid.sol\";\nimport {OrderHelper} from \"../lib/order/OrderHelper.sol\";\n//===============\n// interfaces\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\nimport {PositionFacetBase, IncreasePositionInputs, DecreasePositionInputs} from \"./PositionFacetBase.sol\";\n//===============\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {StringsPlus} from \"../lib/utils/Strings.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"./funcs.sol\";\n//===============\n// data types\nimport \"../lib/types/Types.sol\";\nimport {Event} from \"../lib/types/Event.sol\";\n// //===============\n// // handlers\nimport {GValidHandler} from \"../lib/globalValid/GValidHandler.sol\";\nimport {PositionStorage} from \"../lib/position/PositionStorage.sol\";\nimport {MarketHandler} from \"../lib/market/MarketHandler.sol\";\nimport {OrderHandler} from \"../lib/order/OrderHandler.sol\";\n\ncontract PositionAddFacet is IAccessManaged, PositionFacetBase {\n    using Validations for OrderProps;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    //==========================================================================================\n    //       admin functions\n    //==========================================================================================\n\n    function execAddOrder(\n        OrderProps memory order,\n        MarketCache memory _params\n    ) external restricted {\n        _params.oraclePrice = _getOpenPrice(_params.market, _params.isLong);\n        if (0 == _params.slippage && 0 == _params.fromOrder) {\n            _params.slippage = 30;\n        }\n\n        // ------------\n        // validations\n        require(_params.isOpen, \"PositionAddMgr:invalid isopen\");\n        require(\n            _params.collateralDelta == order.collateral,\n            \"PositionAddMgr: insufficient collateral\"\n        );\n        Validations.validOrderAccountAndID(order);\n        require(\n            OrderHelper.isMarkPriceValid(order, _params.oraclePrice),\n            order.isFromMarket\n                ? \"PositionAddMgr:market slippage\"\n                : StringsPlus.POSITION_TRIGGER_ABOVE\n        );\n        validateIncreasePosition(_params);\n\n        // ------------\n        // cancel order\n        _orderFacet().cancelOrder(\n            order.account,\n            _params.market,\n            _params.isOpen,\n            order.orderID,\n            _params.isLong\n        );\n        _params.execNum += 1;\n        emit Event.DeleteOrder(\n            order.account,\n            _params.isLong,\n            _params.isOpen,\n            order.orderID,\n            _params.market,\n            uint8(CancelReason.Executed),\n            \"\",\n            _params.oraclePrice,\n            int256(0)\n        );\n\n        // TODO call referrals\n        // if (false == _params.isValid()) {\n        //     if (_params.isExec) return;\n        //     else revert(\"PositionAddMgr:invalid params\");\n        // }\n\n        // ------------\n        // increase position\n        PositionProps memory _position = PositionStorage.getPosition(\n            _params.market,\n            _params.account,\n            _params.sizeDelta == 0 ? 0 : _params.oraclePrice,\n            _params.isLong\n        );\n\n        int256 collateralChanged = SELF_increasePosition(_params, _position);\n        if (collateralChanged < 0) collateralChanged = 0;\n\n        // ------------\n        // create decrease order\n        bool shouldCreateDecreaseOrder = MarketHandler\n            .getDecreaseOrderValidation(\n                _params.market,\n                OrderHandler.getOrderNum(\n                    _params.market,\n                    _params.isLong,\n                    _params.isOpen,\n                    _params.account\n                )\n            );\n        if (false == shouldCreateDecreaseOrder || _params.sizeDelta == 0) {\n            return;\n        }\n        bool placeTp = _params.tp != 0 &&\n            (_params.tp > _params.price == _params.isLong ||\n                _params.tp == _params.price);\n        bool placeSl = _params.sl != 0 &&\n            (_params.isLong == _params.price > _params.sl ||\n                _params.price == _params.sl);\n        MarketCache[] memory _vars;\n        uint256 ordersCount = placeTp && placeSl\n            ? 2\n            : (placeTp || placeSl ? 1 : 0);\n        if (ordersCount > 0) {\n            _vars = new MarketCache[](ordersCount);\n            _vars[0] = _buildDecreaseVars(\n                _params,\n                uint256(collateralChanged),\n                placeTp ? _params.tp : _params.sl,\n                placeTp\n            );\n\n            if (ordersCount == 2) {\n                _vars[1] = _buildDecreaseVars(\n                    _params,\n                    uint256(collateralChanged),\n                    _params.sl,\n                    false\n                );\n            }\n        } else {\n            return;\n        }\n\n        OrderProps[] memory _os = _orderFacet().SELF_addOrders(_vars);\n        // uint256[] memory inputs = new uint256[](0);\n        // for (uint256 i; i < _os.length;) {\n        //     OrderProps memory _order = _os[i];\n\n        //     MarketLib.afterUpdateOrder(\n        //         MarketDataTypes.UpdateOrderInputs({\n        //             _market: address(this),\n        //             _isLong: _params.isLong,\n        //             _oraclePrice: _params.oraclePrice,\n        //             isOpen: false,\n        //             isCreate: true,\n        //             _order: _order,\n        //             inputs: inputs\n        //         }),\n        //         pluginGasLimit,\n        //         plugins,\n        //         collateralToken,\n        //         address(this)\n        //     );\n\n        //     unchecked {\n        //         ++i;\n        //     }\n        // }\n    }\n\n    //==========================================================================================\n    //       view functions\n    //==========================================================================================\n    function getMarketsOfMarket(\n        uint16 market\n    ) public view returns (uint256[] memory) {\n        address _vault = MarketHandler.Storage().vault[market];\n        return EnumerableSet.values(MarketHandler.Storage().marketIds[_vault]);\n    }\n\n    function getGlobalSize(\n        uint16 market\n    ) public view returns (uint256 sizesLong, uint256 sizesShort) {\n        uint256[] memory ids = getMarketsOfMarket(market);\n        for (uint256 i = 0; i < ids.length; i++) {\n            (uint256 l, uint256 s) = PositionStorage\n                .getMarketSizesForBothDirections(uint16(ids[i]));\n            sizesLong += l;\n            sizesShort += s;\n        }\n    }\n\n    function getAccountSizeOfMarkets(\n        uint16 market,\n        address account\n    ) public view returns (uint256 sizesL, uint256 sizesS) {\n        uint256[] memory ids = getMarketsOfMarket(market);\n        for (uint256 i = 0; i < ids.length; i++) {\n            (uint256 l, uint256 s) = PositionStorage\n                .getAccountSizesForBothDirections(uint16(ids[i]), account);\n            sizesL += l;\n            sizesS += s;\n        }\n    }\n\n    //==========================================================================================\n    //       private functions\n    //==========================================================================================\n\n    function validateIncreasePosition(MarketCache memory _params) private view {\n        GValid memory params;\n        params.market = _params.market;\n        params.isLong = _params.isLong;\n        params.sizeDelta = _params.sizeDelta;\n\n        (params.globalLongSizes, params.globalShortSizes) = getGlobalSize(\n            _params.market\n        );\n        (params.userLongSizes, params.userShortSizes) = getAccountSizeOfMarkets(\n            params.market,\n            _params.account\n        );\n        (params.marketLongSizes, params.marketShortSizes) = PositionStorage\n            .getMarketSizesForBothDirections(params.market);\n        address _collateralToken = MarketHandler.collateralToken(\n            _params.market\n        );\n        params.aum = parseVaultAsset(\n            vault(_params.market).getAUM(),\n            _collateralToken\n        );\n        require(GValidHandler.isIncreasePosition(params), \"mr:gv\");\n    }\n\n    function _buildDecreaseVars(\n        MarketCache memory _params,\n        uint256 collateralIncreased,\n        uint256 triggerPrice,\n        bool isTP\n    ) private view returns (MarketCache memory _createVars) {\n        _createVars.market = _params.market;\n        _createVars.isLong = _params.isLong;\n        _createVars.oraclePrice = _getClosePrice(\n            _params.market,\n            _params.isLong\n        );\n        _createVars.isCreate = true;\n\n        _createVars.fromOrder = _params.fromOrder;\n        _createVars.account = _params.account;\n        _createVars.sizeDelta = _params.sizeDelta;\n        _createVars.collateral = 0; // painter0\n\n        if (\n            (isTP && _params.isKeepLevTP) ||\n            (false == isTP && _params.isKeepLevSL)\n        ) {\n            _createVars.collateral = collateralIncreased;\n            _createVars.isKeepLev = true;\n        }\n        _createVars.triggerAbove = isTP == _params.isLong;\n        _createVars.price = triggerPrice;\n        _createVars.refCode = _params.refCode;\n    }\n\n    function SELF_increasePosition(\n        MarketCache memory _params,\n        PositionProps memory _position\n    ) private returns (int256 collD) {\n        SELF_updateCumulativeFundingRate(_params.market);\n\n        (int256[] memory _fees, int256 _totalfee) = _feeFacet()\n            .getFeesReceivable(_params, _position);\n\n        if (_params.sizeDelta > 0) {\n            Validations.validPosition(_params, _position, _totalfee);\n        } else {\n            Validations.validCollateralDelta(\n                MarketBusinessType.IncreaseCollateral,\n                _params.market,\n                _position.collateral,\n                _params.collateralDelta,\n                _position.size,\n                0,\n                _totalfee\n            );\n        }\n        int256 _fundingRate = _feeFacet().cumulativeFundingRates(\n            _params.market,\n            _params.isLong\n        );\n        collD = _params.collateralDelta.toInt256() - _totalfee;\n        commitIncreasePosition(_params, collD, _fundingRate);\n        // (_params.account, _params.isLong);\n        // _transationsFees(_params.account, collateralToken, _fees, _totalfee); // 手续费转账\n        // MarketLib.afterUpdatePosition(\n        //     MarketPositionCallBackIntl.UpdatePositionEvent(\n        //         _params, _position, _fees, collateralToken, indexToken, collD\n        //     ),\n        //     pluginGasLimit,\n        //     plugins,\n        //     collateralToken,\n        //     address(this)\n        // );\n    }\n\n    function commitIncreasePosition(\n        MarketCache memory _params,\n        int256 collD,\n        int256 fr\n    ) private returns (PositionProps memory result) {\n        if (_params.sizeDelta == 0 && collD < 0) {\n            // abi.encode(_params.account, uint256(-collD), _params.sizeDelta, fr, _params.isLong)\n            result = _positionFacet().SELF_decreasePosition(\n                DecreasePositionInputs({\n                    market: _params.market,\n                    account: _params.account,\n                    collateralDelta: collD,\n                    sizeDelta: _params.sizeDelta,\n                    fundingRate: fr,\n                    isLong: _params.isLong\n                })\n            );\n        } else {\n            address collateralToken = MarketHandler.collateralToken(\n                _params.market\n            );\n\n            vault(_params.market).borrowFromVault(\n                _params.market,\n                formatCollateral(_params.sizeDelta, collateralToken)\n            );\n            result = _positionFacet().SELF_increasePosition(\n                IncreasePositionInputs({\n                    market: _params.market,\n                    account: _params.account,\n                    collateralDelta: collD,\n                    sizeDelta: _params.sizeDelta,\n                    markPrice: _params.oraclePrice,\n                    fundingRate: fr,\n                    isLong: _params.isLong\n                })\n            );\n        }\n        //PositionProps\n        Validations.validLev(_params.market, result.size, result.collateral);\n    }\n}\n"
    },
    "src/facets/PositionFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IPositionFacet.sol\";\nimport \"../lib/utils/EnumerableValues.sol\";\nimport {PositionProps} from \"../lib/types/Types.sol\";\nimport {IPrice} from \"../interfaces/IPrice.sol\";\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\n//==========================================================================================\n// hanlders\nimport {PositionHandler} from \"../lib/position/PositionHandler.sol\";\nimport {PositionStorage, PositionCache} from \"../lib/position/PositionStorage.sol\";\n\ncontract PositionFacet is IPositionFacet, IAccessManaged {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableValues for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.UintSet;\n\n    //==========================================================================================\n    //       self functions\n    //==========================================================================================\n    function SELF_increasePosition(\n        IncreasePositionInputs calldata _data\n    ) external override onlySelf returns (PositionProps memory result) {\n        PositionCache memory cache;\n        cache.market = _data.market;\n        cache.account = _data.account;\n        cache.collateralDelta = _data.collateralDelta;\n        cache.sizeDelta = _data.sizeDelta;\n        cache.markPrice = _data.markPrice;\n        cache.fundingRate = _data.fundingRate;\n        cache.isLong = _data.isLong;\n        return PositionHandler.increasePosition(cache);\n    }\n\n    function SELF_decreasePosition(\n        DecreasePositionInputs calldata inputs\n    ) external onlySelf returns (PositionProps memory result) {\n        PositionCache memory cache;\n        cache.market = inputs.market;\n        cache.account = inputs.account;\n        cache.collateralDelta = inputs.collateralDelta;\n        cache.sizeDelta = inputs.sizeDelta;\n        cache.fundingRate = inputs.fundingRate;\n        cache.isLong = inputs.isLong;\n        return PositionHandler.decreasePosition(cache);\n    }\n\n    function SELF_liquidatePosition(\n        uint16 market,\n        address account,\n        uint256 oraclePrice,\n        bool isLong\n    ) external override onlySelf returns (PositionProps memory result) {\n        PositionCache memory cache;\n        cache.market = market;\n        cache.account = account;\n        cache.markPrice = oraclePrice;\n        cache.isLong = isLong;\n        return PositionHandler.liquidatePosition(cache);\n    }\n\n    //==========================================================================================\n    //       view functions\n    //==========================================================================================\n    function isLiquidate(\n        address _account,\n        uint16 _market,\n        bool _isLong,\n        uint256 _price\n    ) external view override returns (LiquidationState _state) {}\n\n    function getAccountSize(\n        uint16 market,\n        address account\n    ) external view returns (uint256, uint256) {\n        return\n            PositionStorage.getAccountSizesForBothDirections(market, account);\n    }\n\n    function getPosition(\n        uint16 market,\n        address account,\n        uint256 markPrice,\n        bool isLong\n    ) public view override returns (PositionProps memory) {\n        return PositionStorage.getPosition(market, account, markPrice, isLong);\n    }\n\n    function getMarketSizes(\n        uint16 market\n    ) external view returns (uint256, uint256) {\n        return PositionStorage.getMarketSizesForBothDirections(market);\n    }\n\n    function getPositions(\n        uint16 market,\n        address account\n    )\n        external\n        view\n        returns (PositionProps memory posLong, PositionProps memory posShort)\n    {\n        return PositionStorage.getPositionsForBothDirections(market, account);\n    }\n\n    function getGlobalPosition(\n        uint16 market,\n        bool isLong\n    ) external view returns (PositionProps memory) {\n        return PositionStorage.getGlobalPosition(market, isLong);\n    }\n\n    function containsPositionOfUser(\n        uint16 market,\n        address account\n    ) external view returns (bool) {\n        PositionStorage.StorageStruct storage ps = PositionStorage.Storage();\n        return\n            ps\n            .positions[PositionStorage.storageKey(market, true)][account].size >\n            0 ||\n            ps\n            .positions[PositionStorage.storageKey(market, false)][account]\n                .size >\n            0;\n    }\n\n    function getPositionKeys(\n        uint16 market,\n        uint256 start,\n        uint256 end,\n        bool isLong\n    ) external view returns (address[] memory) {\n        // DONE\n        PositionStorage.StorageStruct storage ps = PositionStorage.Storage();\n        bytes32 k = PositionStorage.storageKey(market, isLong);\n        uint256 len = ps.positionKeys[k].length();\n        if (len == 0) {\n            return new address[](0);\n        }\n        if (end > len) end = len;\n        return ps.positionKeys[k].valuesAt(start, end);\n    }\n\n    function getPositionCount(\n        uint16 market,\n        bool isLong\n    ) external view returns (uint256) {\n        PositionStorage.StorageStruct storage ps = PositionStorage.Storage();\n        return\n            ps\n                .positionKeys[PositionStorage.storageKey(market, isLong)]\n                .length();\n    }\n\n    function getPNLOfUser(\n        uint16 market,\n        address account,\n        uint256 sizeDelta,\n        uint256 markPrice,\n        bool isLong\n    ) external view override returns (int256) {\n        return\n            PositionStorage.getPNL(\n                market,\n                account,\n                sizeDelta,\n                markPrice,\n                isLong\n            );\n    }\n\n    function getPNLOfMarket(uint16 market) external view returns (int256 pnl) {\n        // TODO\n        // uint256 longPrice = IPrice(this).getPrice(market, false);\n        // uint256 shortPrice = IPrice(this).getPrice(market, true);\n        // pnl = TransferHelper.parseVaultAssetSigned(\n        //     PositionHandler.getMarketPNL(market, longPrice, shortPrice), collateralTokenDigits\n        // );\n    }\n\n    //==========================================================================================\n    //       private functions\n    //==========================================================================================\n}\n"
    },
    "src/facets/PositionFacetBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\npragma abicoder v2;\n\n// interfaces\nimport {IFeeFacet} from \"../interfaces/IFeeFacet.sol\";\nimport {IPrice} from \"../interfaces/IPrice.sol\";\nimport {IPositionFacet, IncreasePositionInputs, DecreasePositionInputs} from \"../interfaces/IPositionFacet.sol\";\nimport {IVault} from \"../interfaces/IVault.sol\";\nimport {IOrderFacet} from \"../interfaces/IOrderFacet.sol\";\n//================================================\n// handlers\nimport {PositionStorage} from \"../lib/position/PositionStorage.sol\";\nimport {MarketHandler} from \"../lib/market/MarketHandler.sol\";\n\nabstract contract PositionFacetBase {\n    function _feeFacet() internal view returns (IFeeFacet) {\n        return IFeeFacet(address(this));\n    }\n\n    function _positionFacet() internal view returns (IPositionFacet) {\n        return IPositionFacet(address(this));\n    }\n\n    function _orderFacet() internal view returns (IOrderFacet) {\n        return IOrderFacet(address(this));\n    }\n\n    function SELF_updateCumulativeFundingRate(uint16 market) internal {\n        (uint256 _longSize, uint256 _shortSize) = PositionStorage\n            .getMarketSizesForBothDirections(market);\n        _feeFacet().SELF_updateCumulativeFundingRate(\n            market,\n            _longSize,\n            _shortSize\n        ); //1\n    }\n\n    function _getClosePrice(\n        uint16 market,\n        bool _isLong\n    ) internal view returns (uint256 p) {\n        return _priceFacet().getPrice(market, !_isLong);\n    }\n\n    function _getOpenPrice(\n        uint16 market,\n        bool _isLong\n    ) internal view returns (uint256 p) {\n        return _priceFacet().getPrice(market, _isLong);\n    }\n\n    function _priceFacet() private view returns (IPrice) {\n        return IPrice(address(this));\n    }\n\n    /**\n     * @dev Calculates the delta collateral for decreasing a position.\n     * @return deltaCollateral The calculated delta collateral.\n     */\n    function getDecreaseDeltaCollateral(\n        bool isKeepLev,\n        uint256 size,\n        uint256 dSize,\n        uint256 collateral\n    ) internal pure returns (uint256 deltaCollateral) {\n        if (isKeepLev) {\n            deltaCollateral = (collateral * dSize) / size;\n        } else {\n            deltaCollateral = 0;\n        }\n    }\n}\n"
    },
    "src/facets/PositionSubFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\npragma abicoder v2;\n\nimport \"./funcs.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {StringsPlus} from \"../lib/utils/Strings.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {PositionSubMgrLib} from \"../lib/market/PositionSubMgrLib.sol\";\n\n//===============\n// data types\nimport \"../lib/types/Types.sol\";\n//===============\n// handlers\nimport {MarketHandler} from \"../lib/market/MarketHandler.sol\";\n\nimport {Validations} from \"../lib/types/Valid.sol\";\nimport {OrderHandler, OrderHelper} from \"../lib/order/OrderHandler.sol\";\nimport {BalanceHandler} from \"../lib/balance/BalanceHandler.sol\";\nimport {PositionStorage} from \"../lib/position/PositionStorage.sol\";\n//===============\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\nimport {PositionFacetBase, DecreasePositionInputs, IncreasePositionInputs} from \"./PositionFacetBase.sol\";\n\ncontract PositionSubFacet is IAccessManaged, PositionFacetBase {\n    using OrderHelper for OrderProps;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using PositionSubMgrLib for MarketCache;\n    // //==========================================================================================\n    // //       external functions\n    // //==========================================================================================\n\n    // //==========================================================================================\n    // //       self functions\n    // //==========================================================================================\n\n    // //==========================================================================================\n    // //       admin functions\n    // //==========================================================================================\n    function liquidate(\n        uint16 market,\n        address accounts,\n        bool _isLong\n    ) external restricted {}\n\n    function execSubOrder(\n        OrderProps memory order,\n        MarketCache memory _params\n    ) external restricted {\n        _params.oraclePrice = _getClosePrice(_params.market, _params.isLong);\n        PositionProps memory _position = PositionStorage.getPosition(\n            _params.market,\n            order.account,\n            _params.oraclePrice,\n            _params.isLong\n        );\n        (int256[] memory fees, int256 totalFee) = _feeFacet().getFeesReceivable(\n            _params,\n            _position\n        );\n        if (order.size > 0) {\n            _params.collateralDelta = getDecreaseDeltaCollateral(\n                order.isKeepLev,\n                _position.size,\n                order.size,\n                _position.collateral\n            );\n        }\n\n        //--------------\n        // validations\n        Validations.validOrderAccountAndID(order);\n        require(_params.isOpen == false, \"PositionSubMgr:invalid isOpen\");\n        Validations.validateLiquidation(\n            _params.market,\n            totalFee,\n            fees[uint8(FeeType.LiqFee)],\n            true\n        );\n\n        //--------------\n        // cancel order\n        OrderProps[] memory ods = _orderFacet().cancelOrder(\n            _params.account,\n            _params.market,\n            _params.isOpen,\n            order.orderID,\n            _params.isLong\n        );\n\n        for (uint256 i = 0; i < ods.length; i++) {\n            OrderProps memory od = ods[i];\n            if (address(0) == od.account) continue;\n            // todo call referral\n            // MarketLib.afterDeleteOrder(\n            //     MarketOrderCallBackIntl.DeleteOrderEvent(\n            //         od,\n            //         _params,\n            //         uint8(i == 0 ? CancelReason.Executed : CancelReason.TpAndSlExecuted), // Executed, TpAndSlExecuted, 3, 4\n            //         \"\",\n            //         i == 0\n            //             ? (_position.realisedPnl * _params.sizeDelta.toInt256()) / _position.size.toInt256()\n            //             : int256(0)\n            //     ),\n            //     pluginGasLimit,\n            //     plugins,\n            //     collateralToken,\n            //     address(this)\n            // );\n            if (i == 0) {\n                _params.execNum += 1;\n                // require(\n                // od.isMarkPriceValid(_params.oraclePrice),\n                //     order.isFromMarket ? \"PositionSubMgr:market slippage\" : StringsPlus.POSITION_TRIGGER_ABOVE\n                // );\n            }\n        }\n        SELF_decreasePosition(_params, _position);\n    }\n\n    // //==========================================================================================\n    // //       private functions\n    // //==========================================================================================\n\n    function SELF_decreasePosition(\n        MarketCache memory _params,\n        PositionProps memory _position\n    ) private {\n        // Return if the position size is zero or the account is invalid\n        if (_position.size == 0 || _params.account == address(0)) return;\n\n        // Update the cumulative funding rate\n        SELF_updateCumulativeFundingRate(_params.market);\n\n        // Check if the position is being closed entirely\n        bool isCloseAll = _position.size == _params.sizeDelta;\n\n        if (isCloseAll) {\n            // Determine the cancellation reason based on the liquidation state\n            CancelReason reason = CancelReason.PositionClosed;\n            if (_params.liqState == LiquidationState.Collateral) {\n                reason = CancelReason.Liquidation;\n            } else if (_params.liqState == LiquidationState.Leverage) {\n                reason = CancelReason.LeverageLiquidation;\n            }\n\n            // Remove orders associated with the account\n            OrderProps[] memory _ordersDeleted = OrderHandler.removeByAccount(\n                _params.market,\n                false,\n                _params.isLong,\n                _params.account\n            );\n\n            // Iterate over the deleted orders and perform necessary actions\n            for (uint256 i = 0; i < _ordersDeleted.length; i++) {\n                OrderProps memory _orderDeleted = _ordersDeleted[i];\n                if (_orderDeleted.account == address(0)) {\n                    continue;\n                }\n                _params.execNum += 1;\n\n                // Perform actions after deleting the order\n                // MarketLib.afterDeleteOrder(\n                //     MarketOrderCallBackIntl.DeleteOrderEvent(_orderDeleted, _params, uint8(reason), \"\", 0),\n                //     pluginGasLimit,\n                //     plugins,\n                //     collateralToken,\n                //     address(this)\n                // );\n            }\n        }\n\n        (int256[] memory _originFees, int256 totalFees) = _feeFacet()\n            .getFeesReceivable(_params, _position);\n\n        if (_params.sizeDelta == 0) {\n            uint256 collateral = totalFees <= 0\n                ? (_position.collateral.toInt256() - totalFees).toUint256()\n                : _position.collateral;\n            // Validations.validCollateralDelta(abi.encode(4, collateral, _params.collateralDelta, _position.size, 0, 0));\n        } else {\n            // Validations.validPosition(_params, _position, _originFees);\n        }\n\n        int256 dPnl;\n        if (_params.sizeDelta > 0) {\n            dPnl = _positionFacet().getPNLOfUser(\n                _params.market,\n                _params.account,\n                _params.sizeDelta,\n                _params.oraclePrice,\n                _params.isLong\n            );\n        }\n        _position.realisedPnl = dPnl;\n\n        // >>>>>>>>>>>>>>>>>>>>>>>>>开始转账\n        PositionSubMgrLib.DecreaseTransactionOuts\n            memory _outs = _decreaseTransaction(\n                _params,\n                _position,\n                dPnl,\n                _originFees\n            );\n        // <<<<<<<<<<<<<<<<<<<<<<<<<<转账结束\n\n        // >>>>>>>>>>>>>>>>>>>>>仓位修改\n        //                     获取现在的累计资金费率\n        int256 _nowFundRate = _feeFacet().cumulativeFundingRates(\n            _params.market,\n            _params.isLong\n        );\n        //                     先把资金费结算给用户\n        if (_outs.newCollateralUnsigned > 0 && _outs.withdrawFromFeeVault > 0) {\n            _positionFacet().SELF_increasePosition(\n                IncreasePositionInputs({\n                    market: _params.market,\n                    account: _params.account,\n                    collateralDelta: _outs.withdrawFromFeeVault,\n                    sizeDelta: 0,\n                    markPrice: _params.oraclePrice,\n                    fundingRate: _nowFundRate,\n                    isLong: _params.isLong\n                })\n            );\n        }\n\n        // >>>>>>>>>>>>>>>>>>>>>>偿还 CoreVault 的账目\n        address colleteralToken = MarketHandler.collateralToken(_params.market);\n        vault(_params.market).repayToVault(\n            _params.market,\n            formatCollateral(_params.sizeDelta, colleteralToken)\n        );\n        PositionProps memory result = _positionFacet().SELF_decreasePosition(\n            DecreasePositionInputs({\n                market: _params.market,\n                account: _params.account,\n                collateralDelta: int256(_outs.collateralDecreased),\n                sizeDelta: _params.sizeDelta,\n                fundingRate: _nowFundRate,\n                isLong: _params.isLong\n            })\n        );\n        // <<<<<<<<<<<<<<<<<<仓位修改\n\n        Validations.validLev(_params.market, result.size, result.collateral);\n\n        if (PositionSubMgrLib.isClearPos(_params, _position)) {\n            // validLiq(_params.account, _params.isLong);\n        }\n\n        // MarketLib.afterUpdatePosition(\n        //     MarketPositionCallBackIntl.UpdatePositionEvent(\n        //         _params, _position, _originFees, collateralToken, indexToken, _outs.collateralDeltaAfter\n        //     ),\n        //     pluginGasLimit,\n        //     plugins,\n        //     collateralToken,\n        //     address(this)\n        // );\n    }\n\n    function _decreaseTransaction(\n        MarketCache memory _params,\n        PositionProps memory _position,\n        int256 dPNL,\n        int256[] memory _originFees\n    ) private returns (PositionSubMgrLib.DecreaseTransactionOuts memory _outs) {\n        //================================================\n        //                  Calc\n        //================================================\n        _outs = _params.calDecreaseTransactionValues(\n            _position,\n            dPNL,\n            _originFees\n        );\n        uint256 fundfeeLoss = PositionSubMgrLib.calculateFundFeeLoss(\n            _position.collateral.toInt256(),\n            dPNL,\n            _originFees\n        );\n\n        //================================================\n        //            fee vault transactions\n        //================================================\n        address _collateralToken = MarketHandler.collateralToken(\n            _params.market\n        );\n        // IERC20Metadata _collateralTokenERC20 = IERC20Metadata(_collateralToken);\n        uint256 amount = formatCollateral(\n            _outs.transToFeeVault >= 0\n                ? _outs.transToFeeVault.toUint256()\n                : (-_outs.transToFeeVault).toUint256(),\n            _collateralToken\n        );\n\n        if (_outs.transToFeeVault >= 0) {\n            //todo\n            // BalanceHandler.marketToFee(_params.market, _params.account, _outs.transToFeeVault);\n            // feeRouter.collectFees(_params.account, _collateralToken, _originFees, fundfeeLoss);\n        } else {\n            //todo\n            // BalanceHandler.feeToMarket(_params.market, _params.account, _originFees, amount);\n            // feeRouter.payoutFees(_params.account, _collateralToken, _originFees, amount);\n        }\n\n        //================================================\n        // vault transactions\n        //================================================\n        // if (_outs.transToVault > 0) {\n        //     _transferToVault(_collateralTokenERC20, uint256(_outs.transToVault));\n        // } else {\n        //     MarketLib.vaultWithdraw(\n        //         _collateralToken, address(this), -_outs.transToVault, collateralTokenDigits, vaultRouter\n        //     );\n        // }\n        //================================================\n        //         usr transactions\n        //================================================\n        if (_outs.transToUser > 0) {\n            transferOut(\n                _collateralToken,\n                _params.account,\n                uint256(_outs.transToUser)\n            );\n        }\n    }\n}\n"
    },
    "src/facets/ReferralFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IAccessManaged} from \"../ac/IAccessManaged.sol\";\nimport {ReferralHandler} from \"../lib/referral/ReferralHandler.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/IReferral.sol\";\n\ncontract ReferralFacet is\n    IAccessManaged,\n    ReentrancyGuardUpgradeable,\n    IReferral\n{\n    //==========================================================================================\n    //       external functions\n    //==========================================================================================\n    function setTraderReferralCodeByUser(bytes32 _code) external nonReentrant {\n        ReferralHandler._setTraderReferralCode(msg.sender, _code);\n    }\n\n    function registerCode(bytes32 _code) external nonReentrant {\n        ReferralHandler.registerCode(_code);\n    }\n\n    function setCodeOwner(\n        bytes32 _code,\n        address _newAccount\n    ) external nonReentrant {\n        ReferralHandler.setCodeOwner(_code, _newAccount);\n    }\n\n    //==========================================================================================\n    //       admin functions\n    //==========================================================================================\n    function govSetCodeOwner(\n        bytes32 _code,\n        address _newAccount\n    ) external restricted {\n        ReferralHandler.govSetCodeOwner(_code, _newAccount);\n    }\n\n    function setTier(\n        uint256 _tierId,\n        uint256 _totalRebate,\n        uint256 _discountShare\n    ) external restricted {\n        ReferralHandler.setTier(_tierId, _totalRebate, _discountShare);\n    }\n\n    function setReferrerTier(\n        address _referrer,\n        uint256 _tierId\n    ) external restricted {\n        // ReferralHandler.setReferrerTier(_referrer, _tierId);\n    }\n\n    function setReferrerDiscountShare(\n        address _account,\n        uint256 _discountShare\n    ) external restricted {\n        // ReferralHandler.setReferrerDiscountShare(_account, _discountShare);\n    }\n\n    function setTraderReferralCodeByGov(\n        address _account,\n        bytes32 _code\n    ) external restricted {\n        // ReferralHandler._setTraderReferralCode(_account, _code);\n    }\n\n    //==========================================================================================\n    //       self functions\n    //==========================================================================================\n\n    function SELF_updatePositionCallback(\n        ReferralUpdatePositionEvent calldata _event\n    ) external override onlySelf {\n        ReferralHandler.updatePositionCallback(_event);\n    }\n\n    //==========================================================================================\n    //       view functions\n    //==========================================================================================\n    function getTraderReferralInfo(\n        address _account\n    ) internal view returns (bytes32, address) {\n        // return ReferralHandler.getTraderReferralInfo(_account);\n    }\n\n    function getCodeOwners(bytes32 _code) external view returns (address) {\n        // return ReferralHandler.codeOwners(_code);\n    }\n    //==========================================================================================\n    //       private functions\n    //==========================================================================================\n}\n"
    },
    "src/facets/StreamsUpkeepBase.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.16;\n\n// import {Common} from \"chainlink_8_contracts/src/v0.8/libraries/Common.sol\";\n// import {StreamsLookupCompatibleInterface} from\n//     \"chainlink_8_contracts/src/v0.8/automation/interfaces/StreamsLookupCompatibleInterface.sol\";\n// import {ILogAutomation, Log} from \"chainlink_8_contracts/src/v0.8/automation/interfaces/ILogAutomation.sol\";\n// import {IRewardManager} from \"chainlink_8_contracts/src/v0.8/llo-feeds/interfaces/IRewardManager.sol\";\n// import {IERC20} from\n//     \"chainlink_8_contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/interfaces/IERC20.sol\";\n// import {SafeERC20} from\n//     \"chainlink_8_contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/token/ERC20/utils/SafeERC20.sol\";\n// import \"../interfaces/IVerifierProxy.sol\";\n// import \"../interfaces/IPriceFeed.sol\";\n// import {IAccessManaged} from \"../ac/IAccessManaged.sol\";\n\n// abstract contract StreamsUpkeepBase is ILogAutomation, StreamsLookupCompatibleInterface, IAccessManaged {\n//     using SafeERC20 for IERC20;\n\n//     struct CheckCallbackCache {\n//         address market;\n//         uint8 logType;\n//         bytes logData;\n//     }\n\n//     struct BasicReport {\n//         bytes32 feedId; // 报告所包含数据的数据流 ID\n//         uint32 validFromTimestamp; // 价格适用的最早时间戳\n//         uint32 observationsTimestamp; // 价格适用的最新时间戳\n//         uint192 nativeFee; // 使用报告验证交易的基本成本，以链上本地代币（WETH/ETH）计价\n//         uint192 linkFee; // 使用报告验证交易的基本成本，以 LINK 计价\n//         uint32 expiresAt; // 报告可在链上验证的最新时间戳\n//         int192 price; // DON 共识中位数价格，保留 8 位小数\n//     }\n\n//     enum LogType {\n//         DefaultLog,\n//         ChainlinkLog,\n//         UniswapLog,\n//         MarketLog\n//     }\n\n//     uint256 constant LOWER = 0;\n//     uint256 constant UPPER = 9999;\n//     string public constant DATASTREAMS_FEEDLABEL = \"feedIDs\";\n//     string public constant DATASTREAMS_QUERYLABEL = \"timestamp\";\n\n//     mapping(address => string) public feedId; // market => feedId\n//     mapping(address => uint8) public logType; // source => logType\n\n//     bool public shouldExec = true;\n//     mapping(address => IVerifierProxy) public verifier; // market => feedId\n\n//     // 此示例读取 Arbitrum Sepolia 上基本 ETH/USD 价格报告的 ID。\n//     // 在 https://docs.chain.link/data-streams/stream-ids 找到完整的 ID 列表\n\n//     event UpdateShouldExec(bool b);\n//     event UpdateVerifier(address market, address verifier);\n\n//     function setShouldExec(bool b) external restricted {\n//         shouldExec = b;\n//         emit UpdateShouldExec(b);\n//     }\n\n//     function setVerifier(address market, address _verifier) external restricted {\n//         verifier[market] = IVerifierProxy(_verifier);\n//         emit UpdateVerifier(market, _verifier);\n//     }\n\n//     event UpdateAutoOrder(address autoOrder);\n\n//     function setAutoOrder(address _autoOrder) external restricted {\n//         autoOrder = _autoOrder;\n//         emit UpdateAutoOrder(_autoOrder);\n//     }\n\n//     function withdraw(address token, address receiver, uint256 amount) external restricted {\n//         IERC20(token).safeTransfer(receiver, amount);\n//     }\n\n//     function withdrawETH(address receiver, uint256 amount) external restricted {\n//         payable(receiver).transfer(amount);\n//     }\n\n//     event UpdateFeedId(address market, string feedId);\n\n//     function setFeedId(address market, string memory fid) external restricted {\n//         feedId[market] = fid;\n//         emit UpdateFeedId(market, fid);\n//     }\n\n//     event UpdateLogType(address source, uint8 typee);\n\n//     function setLogType(address source, uint8 _t) external restricted {\n//         logType[source] = _t;\n//         emit UpdateLogType(source, _t);\n//     }\n\n//     function sendETH() external payable {}\n\n//     // 此函数使用 revert 来传达调用信息。\n//     // 有关详细信息，请参阅 https://eips.ethereum.org/EIPS/eip-3668#rationale\n//     /**\n//      * @notice 由keeper模拟执行以查看是否实际上需要执行任何工作的方法。该方法实际上不需要可执行，并且由于它只是模拟，因此可能消耗大量 gas。\n//      * @dev 为确保它永远不被调用，您可能希望将 cannotExecute 修饰符从 KeeperBase 添加到此方法的实现中。\n//      * @param log 匹配此合约已注册为触发器的原始日志数据\n//      * @param checkData 用户指定的额外数据，为此维护提供上下文\n//      * @return upkeepNeeded 布尔值，指示keeper是否应调用 performUpkeep。\n//      * @return performData 如果需要维护，则keeper应该使用的字节，用于调用 performUpkeep。如果您想要编码数据以供以后解码，请尝试 `abi.encode`。\n//      */\n//     function checkLog(Log calldata log, bytes memory checkData)\n//         external\n//         virtual\n//         returns (bool upkeepNeeded, bytes memory performData)\n//     {}\n\n//     // Data Streams 报告字节传递到此处。\n//     // extraData 是来自数据流查找过程的上下文数据。\n//     // 您的合约可能包含进一步处理此数据的逻辑。\n//     // 此方法仅打算由 Automation 在链下模拟。\n//     // 然后 Automation 将返回的数据传递到 performUpkeep\n//     ///////////////////////////////////////////////////\n//     // 这个函数是用来接收数据流返回的数据和额外的上下文信息，并判断是否需要执行维护操作的。\n//     // 如果需要维护，函数会返回一个布尔值和一个字节数据，作为执行维护的参数。\n//     // 这个函数是为了使用数据流查询功能的合约所必须实现的接口之一，另一个是自动化兼容接口。\n//     // 数据流查询功能可以让合约从数据流引擎获取签名的报告，包含了实时的数据和验证信息。这个函数的参数和返回值的含义如下：\n//     /**\n//      * @param signedReports 一个字节数组，包含了数据流端点返回的数据，例如价格、买卖价差等。\n//      * @param extraData 一个字节数据，包含了数据流查询过程中的上下文信息，例如查询的时间戳、数据流的ID等。\n//      * @return upkeepNeeded 一个布尔值，表示是否需要执行维护操作。如果为真，表示合约需要根据数据流返回的数据进行一些逻辑处理，例如更新状态、触发事件等。\n//      * @return performData 一个字节数据，作为执行performUpkeep操作的参数。可以使用`abi.encode`函数来编码一些数据，以便在维护操作中解码使用。\n//      */\n//     function checkCallback(\n//         bytes[] calldata signedReports, //signedReports\n//         bytes calldata extraData //extraData from checkLog\n//     ) external view virtual returns (bool upkeepNeeded, bytes memory performData) {}\n\n//     // 函数将在链上执行\n//     // 被 chainlink automation 调用(Log trigger event)\n//     function performUpkeep(bytes calldata performData) external virtual {}\n\n//     function verifyReport(bytes memory unverifiedReport, IVerifierProxy _verifier)\n//         internal\n//         returns (BasicReport memory verifiedReport)\n//     {\n//         (, /* bytes32[3] reportContextData */ bytes memory reportData) =\n//             abi.decode(unverifiedReport, (bytes32[3], bytes));\n//         // 报告验证费用\n//         IFeeManager feeManager = IFeeManager(address(_verifier.s_feeManager()));\n//         IRewardManager rewardManager = IRewardManager(address(feeManager.i_rewardManager()));\n//         address feeTokenAddress = feeManager.i_linkAddress();\n//         (Common.Asset memory fee,,) = feeManager.getFeeAndReward(address(this), reportData, feeTokenAddress);\n\n//         if (IERC20(feeTokenAddress).balanceOf(address(this)) < fee.amount) {\n//             return verifiedReport;\n//         }\n\n//         // 授权 rewardManager 消耗此合约在费用方面的余额\n//         IERC20(feeTokenAddress).approve(address(rewardManager), fee.amount);\n//         // 验证报告\n//         try _verifier.verify(unverifiedReport, abi.encode(feeTokenAddress)) returns (bytes memory verifiedReportData) {\n//             verifiedReport = abi.decode(verifiedReportData, (BasicReport));\n//         } catch {}\n//     }\n\n//     function mockVerify(bytes memory payload) internal pure returns (bytes memory) {\n//         (, bytes memory reportData,,,) = abi.decode(payload, (bytes32[3], bytes, bytes32[], bytes32[], bytes32));\n//         return reportData;\n//     }\n\n//     function formatPrice(int192 price, address market) internal view returns (uint256) {\n//         IPriceFeed pf = IPriceFeed(IPrice(address(this)).priceFeeds(market));\n//         return uint256(uint192(price)) * 10 ** (30 - pf.decimals());\n//     }\n\n//     event UDSTPrice(address);\n\n//     function convertToUSDTPrice(address market, uint256 price) internal view returns (uint256) {\n//         address usdt = AMLib.cp(market).USDT();\n//         IPriceFeed USDTPriceFeed = IPriceFeed(IPrice(address(this)).usdtFeed());\n//         uint256 xxx = uint256(USDTPriceFeed.latestAnswer());\n//         return (price * 10 ** USDTPriceFeed.decimals()) / xxx; // 8\n//     }\n\n//     function _isLiquidate(address account, address market, bool isLong, uint256 price)\n//         internal\n//         view\n//         returns (uint256 _state)\n//     {\n//         _state = AMLib.mv(market).isLiquidate(\n//             account, market, isLong, IMarket(market).positionBook(), IMarket(market).feeRouter(), price\n//         );\n//     }\n\n//     function setPriceWithUSDT(address _market, BasicReport memory verifiedReport) internal {\n//         address[] memory tokens = new address[](1);\n//         tokens[0] = IMarket(_market).indexToken();\n\n//         uint256[] memory prices = new uint256[](1);\n\n//         prices[0] = convertToUSDTPrice(_market, formatPrice(verifiedReport.price, _market));\n\n//         try AMLib.fp(_market).setPrices(tokens, prices, uint256(verifiedReport.observationsTimestamp)) {} catch {}\n//     }\n\n//     function getPriceWithUSDT(address _market, BasicReport memory verifiedReport) internal view returns (uint256) {\n//         address[] memory tokens = new address[](1);\n//         tokens[0] = IMarket(_market).indexToken();\n//         uint256[] memory prices = new uint256[](1);\n//         return convertToUSDTPrice(_market, formatPrice(verifiedReport.price, _market));\n//     }\n// }\n"
    },
    "src/facets/StreamsUpkeepFacet.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.0;\n\n// import {Log} from \"chainlink_8_contracts/src/v0.8/automation/interfaces/ILogAutomation.sol\";\n// // import {IMarket} from \"../interfaces/market/IMarket.sol\";\n// import {StreamsUpkeepBase} from \"./StreamsUpkeepBase.sol\";\n// import {AMLib} from \"./AMLib.sol\";\n// import {Order} from \"../interfaces/order/OrderStruct.sol\";\n// import {MarketDataTypes} from \"../interfaces/market/MarketDataTypes.sol\";\n// import {AutomationCompatibleInterface} from\n//     \"chainlink_8_contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\";\n\n// contract OrderLiqStreamsUpkeep is StreamsUpkeepBase {\n//     // ==================================sepolia checkdata eth==================================\n//     // market: 0xd9CD2FEAF3453d8cA9b26E1F17F583b414B4A2b8\n//     // checkData: 0x000000000000000000000000d9cd2feaf3453d8ca9b26e1f17f583b414b4a2b8\n\n//     // ==================================Event ABI==================================\n//     /**\n//      * {\n//      *     \"anonymous\": false,\n//      *     \"inputs\": [\n//      *     {\n//      *         \"indexed\": true,\n//      *         \"internalType\": \"int256\",\n//      *         \"name\": \"current\",\n//      *         \"type\": \"int256\"\n//      *     },\n//      *     {\n//      *         \"indexed\": true,\n//      *         \"internalType\": \"uint256\",\n//      *         \"name\": \"roundId\",\n//      *         \"type\": \"uint256\"\n//      *     },\n//      *     {\n//      *         \"indexed\": false,\n//      *         \"internalType\": \"uint256\",\n//      *         \"name\": \"updatedAt\",\n//      *         \"type\": \"uint256\"\n//      *     }\n//      *     ],\n//      *     \"name\": \"AnswerUpdated\",\n//      *     \"type\": \"event\"\n//      * }\n//      */\n\n//     /**\n//      * @dev Checks the log for upkeep necessity based on provided data.\n//      * @param log The Log struct containing relevant data.(AnswerUpdated(int256 indexed answer, etc...))\n//      * @param checkData The data for market address (fill in the market address, isLong, lower, upper).\n//      * @return upkeepNeeded A boolean indicating if upkeep is needed.\n//      * @return performData The data required for performing upkeep.\n//      */\n//     function checkLog(Log calldata log, bytes memory checkData)\n//         external\n//         override\n//         returns (bool, /* upkeepNeeded */ bytes memory /* performData */ )\n//     {\n//         CheckCallbackCache memory c;\n//         (c.market) = abi.decode(checkData, (address));\n//         if (log.source == address(this)) c.logType = uint8(LogType.MarketLog);\n//         else c.logType = logType[log.source];\n//         string[] memory _feedIds = new string[](1);\n//         _feedIds[0] = feedId[c.market];\n//         c.logData = log.data;\n\n//         revert StreamsLookup(\n//             DATASTREAMS_FEEDLABEL, //feedParamKey\n//             _feedIds, //feeds\n//             DATASTREAMS_QUERYLABEL, //timeParamKey\n//             log.timestamp, //time\n//             abi.encode(c)\n//         );\n//     }\n\n//     function getPrice(int192 price, address market, bool isMax, bool isUSDT) public view returns (uint256 myPrice) {\n//         if (!isUSDT) myPrice = convertToUSDTPrice(market, formatPrice(price, market));\n//         else myPrice = formatPrice(price, market);\n//         uint256 chainPrice = AMLib.cp(market).getPrice(IMarket(market).indexToken(), isMax);\n//         if (isMax == (myPrice < chainPrice)) myPrice = chainPrice;\n//     }\n\n//     function _checkCallbackOrders(\n//         int192 priceOffChain, // DON 共识中位数价格，保留 8 位小数\n//         address market,\n//         bool isUSDT\n//     ) internal view returns (bool upkeepNeeded, bytes memory results) {\n//         for (uint256 isLong = 0; isLong < 2; isLong++) {\n//             for (uint256 isIncrease = 0; isIncrease < 2; isIncrease++) {\n//                 uint256 myPrice;\n//                 myPrice = getPrice(priceOffChain, market, isLong == isIncrease, isUSDT);\n//                 Order.Props[] memory execOrders = (\n//                     isLong == 1 ? IMarket(market).orderBookLong() : IMarket(market).orderBookShort()\n//                 ).getExecutableOrdersByPrice(LOWER, UPPER, isIncrease == 1, myPrice);\n\n//                 if (execOrders.length > 0) {\n//                     bytes32[] memory keys = new bytes32[](1);\n//                     keys[0] = keccak256(abi.encodePacked(execOrders[0].account, execOrders[0].orderID));\n//                     return (true, abi.encode(IMarket(market), isLong == 1, isIncrease == 1, keys));\n//                 }\n//             }\n//         }\n//     }\n\n//     function checkCallbackByPrice(int192 priceOffChain, address market)\n//         external\n//         view\n//         returns (bool upkeepNeeded, bytes memory performData)\n//     {\n//         (upkeepNeeded, performData) = _checkCallbackOrders(priceOffChain, market, true);\n//         if (!upkeepNeeded) return _checkCallbackLiq(priceOffChain, market, true);\n//     }\n\n//     function checkCallbackLiq(\n//         uint256 priceOffChain, // DON 共识中位数价格，保留 8 位小数\n//         address market\n//     ) public view returns (bool upkeepNeeded, bytes memory performData) {\n//         (upkeepNeeded, performData) = _checkCallbackOrders(int192(uint192(priceOffChain)), market, true);\n//         if (!upkeepNeeded) return _checkCallbackLiq(int192(uint192(priceOffChain)), market, true);\n//         // return _checkCallbackLiq(int192(uint192(priceOffChain)), market);\n//     }\n\n//     function _checkCallbackLiq(int192 priceOffChain, address market, bool isUSDT)\n//         internal\n//         view\n//         returns (bool upkeepNeeded, bytes memory)\n//     {\n//         address[] memory empty = new address[](0);\n//         address[] memory _keysOut = new address[](1);\n//         for (uint256 isLong = 0; isLong < 2; isLong++) {\n//             // Get the position keys from the market\n//             address[] memory _keys = IPositionFacet(address(this)).getPositionKeys(LOWER, UPPER, isLong == 1);\n//             uint256 price = getPrice(priceOffChain, market, isLong == 0, isUSDT);\n//             // Iterate through the position keys to check liquidation status\n//             for (uint256 i; i < _keys.length; i++) {\n//                 // Check if the position should be liquidated\n//                 uint256 state = _isLiquidate(_keys[i], market, isLong == 1, price);\n//                 if (state != 0) {\n//                     _keysOut[0] = _keys[i];\n//                     if (isLong == 1) return (true, abi.encode(market, _keysOut, empty));\n//                     else return (true, abi.encode(market, empty, _keys[i]));\n//                 }\n//             }\n//         }\n//     }\n\n//     /**\n//      * @dev Function to check callback data and trigger upkeep.\n//      * @param signedReports Array of signed reports.\n//      * @param extraData Extra data from checkLog.\n//      * @return upkeepNeeded Boolean indicating if upkeep is needed.\n//      * @return performData Bytes containing perform data if upkeep is needed.\n//      */\n//     function checkCallback(\n//         bytes[] calldata signedReports, //signedReports\n//         bytes calldata extraData //extraData from checkLog\n//     ) external view override returns (bool upkeepNeeded, bytes memory performData) {\n//         BasicReport memory mockVerifiedReport = abi.decode(\n//             mockVerify(signedReports[0]), // Verify the first signed report\n//             (BasicReport)\n//         );\n//         CheckCallbackCache memory c = abi.decode(\n//             extraData, // Decode extraData\n//             (CheckCallbackCache)\n//         );\n\n//         bytes memory r;\n//         address target = address(0);\n//         if (c.logType == uint8(LogType.MarketLog)) {\n//             MarketDataTypes.UpdateOrderInputs memory ip = abi.decode(\n//                 c.logData,\n//                 (MarketDataTypes.UpdateOrderInputs) //params\n//             );\n\n//             upkeepNeeded = MarketDataTypes.isFromMarket(ip);\n//             if (upkeepNeeded) {\n//                 IMarket.OrderExec[] memory _l = new IMarket.OrderExec[](1);\n//                 _l[0] = IMarket.OrderExec(ip._market, ip._order.account, ip._order.orderID, ip.isOpen, ip._isLong);\n//                 r = abi.encode(_l);\n//             }\n//         } else {\n//             target = autoLiq;\n//             (upkeepNeeded, r) = _checkCallbackOrders(mockVerifiedReport.price, c.market, false);\n//             if (!upkeepNeeded) {\n//                 (upkeepNeeded, r) = _checkCallbackLiq(mockVerifiedReport.price, c.market, false);\n//             } else {\n//                 target = autoOrder;\n//             }\n//         }\n//         performData = abi.encode(signedReports, c.market, c.logType, r, target);\n//     }\n\n//     function performUpkeep(bytes calldata performData) external override {\n//         (bytes[] memory signedReports, address market, uint8 lType, bytes memory r, address target) =\n//             abi.decode(performData, (bytes[], address, uint8, bytes, address));\n\n//         bytes memory unverifiedReport = signedReports[0];\n//         BasicReport memory verifiedReport = verifyReport(unverifiedReport, verifier[market]);\n//         // BasicReport memory verifiedReport = abi.decode(mockVerify(unverifiedReport), (BasicReport));\n\n//         if (lType == uint8(LogType.MarketLog)) {\n//             if (shouldExec) {\n//                 //mkt odr\n//                 IMarket.OrderExec[] memory ol = abi.decode(r, (IMarket.OrderExec[]));\n//                 try AMLib.fp(market).setPricesAndExecute(\n//                     IMarket(market).indexToken(),\n//                     getPriceWithUSDT(market, verifiedReport),\n//                     uint256(verifiedReport.observationsTimestamp),\n//                     ol\n//                 ) {} catch {}\n//             } else {\n//                 setPriceWithUSDT(market, verifiedReport);\n//             }\n//         } else {\n//             setPriceWithUSDT(market, verifiedReport);\n//             if (shouldExec) try AutomationCompatibleInterface(target).performUpkeep(r) {} catch {}\n//         }\n//     }\n// }\n"
    },
    "src/interfaces/IFeeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {MarketCache, PositionProps} from \"../lib/types/Types.sol\";\n\ninterface IFeeFacet {\n    function SELF_collectFees(bytes calldata _data) external;\n    function SELF_updateCumulativeFundingRate(\n        uint16 market,\n        uint256 longSize,\n        uint256 shortSize\n    ) external;\n    //================================================================\n    // view functions\n    //================================================================\n\n    function getFeeAndRatesOfMarket(\n        uint16 market\n    )\n        external\n        view\n        returns (\n            uint256[] memory fees,\n            int256[] memory fundingRates,\n            int256[] memory _cumulativeFundingRates\n        );\n\n    function getOrderFees(\n        MarketCache calldata data\n    ) external view returns (int256 fees);\n\n    function getFeesReceivable(\n        MarketCache calldata params,\n        PositionProps calldata position\n    ) external view returns (int256[] memory fees, int256 totalFee);\n\n    function cumulativeFundingRates(\n        uint16 market,\n        bool isLong\n    ) external view returns (int256);\n    function SELF_addFee(uint16 market, bytes calldata fee) external;\n}\n"
    },
    "src/interfaces/IMarketFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderProps} from \"./../lib/types/Types.sol\";\n\nstruct OrderFinderCache {\n    uint16 market;\n    bool isLong;\n    bool isIncrease;\n    uint256 start;\n    uint256 end;\n    bool isOpen;\n    uint256 oraclePrice;\n    bytes32 storageKey;\n}\n\ninterface IMarketFacet {\n    //================================================================\n    // view functions\n    //================================================================\n    function getExecutableOrdersByPrice(\n        OrderFinderCache memory cache\n    ) external view returns (OrderProps[] memory _orders);\n}\n"
    },
    "src/interfaces/IOrderFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {OrderProps, MarketCache} from \"../lib/types/Types.sol\";\n\ninterface IOrderFacet {\n    function updateOrder(MarketCache calldata _inputs) external payable;\n\n    function cancelOrder(\n        address account,\n        uint16 market,\n        bool isIncrease,\n        uint256 orderID,\n        bool isLong\n    ) external returns (OrderProps[] memory _orders);\n\n    function SELF_addOrders(\n        MarketCache[] memory _inputs\n    ) external returns (OrderProps[] memory _orders);\n}\n"
    },
    "src/interfaces/IPositionFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {PositionProps, LiquidationState} from \"../lib/types/Types.sol\";\n\nstruct IncreasePositionInputs {\n    uint16 market;\n    address account;\n    int256 collateralDelta;\n    uint256 sizeDelta;\n    uint256 markPrice;\n    int256 fundingRate;\n    bool isLong;\n}\n\nstruct DecreasePositionInputs {\n    uint16 market;\n    address account;\n    int256 collateralDelta;\n    uint256 sizeDelta;\n    int256 fundingRate;\n    bool isLong;\n}\n\ninterface IPositionFacet {\n    function SELF_increasePosition(\n        IncreasePositionInputs calldata _data\n    ) external returns (PositionProps memory);\n    function SELF_decreasePosition(\n        DecreasePositionInputs calldata _data\n    ) external returns (PositionProps memory);\n    function SELF_liquidatePosition(\n        uint16 market,\n        address account,\n        uint256 oraclePrice,\n        bool isLong\n    ) external returns (PositionProps memory result);\n    //====================================\n    // view\n    function getPositionKeys(\n        uint16 market,\n        uint256 start,\n        uint256 end,\n        bool isLong\n    ) external view returns (address[] memory);\n\n    function isLiquidate(\n        address _account,\n        uint16 _market,\n        bool _isLong,\n        uint256 _price\n    ) external view returns (LiquidationState _state);\n\n    function getPNLOfUser(\n        uint16 market,\n        address account,\n        uint256 sizeDelta,\n        uint256 markPrice,\n        bool isLong\n    ) external view returns (int256);\n    function getPosition(\n        uint16 market,\n        address account,\n        uint256 markPrice,\n        bool isLong\n    ) external view returns (PositionProps memory);\n}\n"
    },
    "src/interfaces/IPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPrice {\n    function getPrice(\n        uint16 market,\n        bool _maximise\n    ) external view returns (uint256);\n    function priceFeed(uint16 market) external view returns (address);\n    function usdtFeed() external view returns (address);\n}\n"
    },
    "src/interfaces/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPriceFeed {\n    function decimals() external view returns (uint8);\n\n    function version() external view returns (uint256);\n\n    function description() external view returns (string memory);\n\n    function aggregator() external view returns (address);\n\n    function latestAnswer() external view returns (int256);\n\n    function latestRound() external view returns (uint80);\n\n    function getRoundData(\n        uint80 roundId\n    ) external view returns (uint80, int256, uint256, uint256, uint80);\n}\n"
    },
    "src/interfaces/IReferral.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {MarketCache, PositionProps, OrderProps} from \"../lib/types/Types.sol\";\n\nstruct ReferralUpdatePositionEvent {\n    MarketCache inputs;\n    PositionProps position;\n    int256[] fees;\n    address collateralToken;\n    address indexToken;\n    int256 collateralDeltaAfter;\n}\n\nstruct ReferralDeleteOrderEvent {\n    OrderProps order;\n    MarketCache inputs;\n    uint8 reason;\n    string reasonStr;\n    int256 dPNL;\n}\n\ninterface IReferral {\n    function SELF_updatePositionCallback(\n        ReferralUpdatePositionEvent calldata _event\n    ) external;\n}\n"
    },
    "src/interfaces/IRewardDistributor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRewardDistributor {\n    function initialize(address _rewardToken, address _rewardTracker) external;\n\n    function pendingRewards() external view returns (uint256);\n\n    function distribute() external returns (uint256);\n\n    function tokensPerInterval() external view returns (uint256);\n}\n"
    },
    "src/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC4626} from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\ninterface IVault is IERC4626 {\n    function withdrawFromVault(address to, uint256 amount) external; //transferToVault\n\n    function borrowFromVault(uint16 market, uint256 amount) external;\n\n    function repayToVault(uint16 market, uint256 amount) external;\n\n    //=======================view==============\n\n    function sellLpFee() external view returns (uint256);\n\n    function buyLpFee() external view returns (uint256);\n\n    function computationalCosts(\n        bool isBuy,\n        uint256 amount\n    ) external view returns (uint256);\n\n    function getLPFee(bool isBuy) external view returns (uint256);\n\n    function getUSDBalance() external view returns (uint256);\n\n    function getAUM() external view returns (uint256);\n\n    function fundsUsed(uint16 market) external view returns (uint256);\n\n    function priceDecimals() external pure returns (uint256);\n}\n"
    },
    "src/interfaces/IVaultReward.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {IERC4626} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\n\ninterface IVaultReward {\n    function updateRewards() external;\n\n    function updateRewardsByAccount(address) external;\n\n    function setMarket(address market, address vault) external;\n\n    function initialize(\n        address _coreVault,\n        address _vaultRouter,\n        address _feeRouter\n    ) external;\n\n    function buy(\n        IERC4626 vault,\n        address to,\n        uint256 amount,\n        uint256 minSharesOut\n    ) external returns (uint256); // move\n\n    function sell(\n        IERC4626 vault,\n        address to,\n        uint256 amount,\n        uint256 minAssetsOut\n    ) external returns (uint256); // move\n\n    function calimLPReward() external;\n\n    function getAPR() external returns (uint256);\n\n    function getUSDBalance() external view returns (uint256); // move\n\n    function getAUM() external returns (uint256);\n\n    function getLPReward() external returns (uint256);\n\n    function pendingRewards() external returns (uint256);\n\n    function getLPPrice() external returns (uint256); // move\n\n    function priceDecimals() external returns (uint256);\n\n    function buyLpFee() external view returns (uint256);\n\n    function sellLpFee() external view returns (uint256);\n}\n"
    },
    "src/lib/balance/BalanceHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {IVault} from \"../../interfaces/IVault.sol\";\n\nlibrary BalanceHandler {\n    using SafeERC20 for IERC20;\n\n    bytes32 constant STORAGE_POSITION = keccak256(\"blex.balance.storage\");\n\n    enum Type {\n        FeeToMarket,\n        MarketToFee,\n        MarketToUser,\n        UserToMarket,\n        MarketToVault,\n        VaultToMarket,\n        FeeToReward\n    }\n\n    struct StorageStruct {\n        mapping(uint16 => uint256) feeBalance;\n        mapping(uint16 => uint256) marketBalance;\n    }\n\n    event Transfer(\n        uint16 indexed market,\n        Type indexed transferType,\n        address indexed account,\n        uint256 value,\n        bytes extra\n    );\n\n    function Storage() internal pure returns (StorageStruct storage fs) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n\n    // DONE-----------\n    function vaultToMarket(\n        address vault,\n        uint16 market,\n        address account,\n        uint256 value\n    ) internal {\n        IVault(vault).withdrawFromVault(account, value);\n        Storage().marketBalance[market] += value;\n        emit Transfer(market, Type.VaultToMarket, account, value, bytes(\"\"));\n    }\n\n    function marketToFee(\n        uint16 market,\n        address account,\n        uint256 value,\n        bytes memory extraData\n    ) internal {\n        Storage().marketBalance[market] -= value;\n        Storage().feeBalance[market] += value;\n        emit Transfer(market, Type.MarketToFee, account, value, extraData);\n    }\n\n    function feeToMarket(\n        uint16 market,\n        address account,\n        uint256 value,\n        int256[] memory feesReceivable\n    ) internal {\n        // in case the balance is not enough, transfer the remaining balance\n        uint256 _amount = Storage().feeBalance[market];\n        if (value > _amount) value = _amount;\n\n        Storage().feeBalance[market] -= value;\n        Storage().marketBalance[market] += value;\n        emit Transfer(\n            market,\n            Type.FeeToMarket,\n            account,\n            value,\n            abi.encode(feesReceivable)\n        );\n    }\n    // TODO-------------\n\n    function marketToVault(\n        address vault,\n        uint16 market,\n        address account,\n        uint256 value,\n        uint256 pnlReceivable\n    ) internal {\n        revert(\"TODO decimal convertion for pnl\");\n        Storage().marketBalance[market] -= value;\n        emit Transfer(\n            market,\n            Type.MarketToVault,\n            account,\n            value,\n            abi.encode(pnlReceivable)\n        );\n    }\n\n    function marketToUser(\n        address token,\n        uint16 market,\n        address account,\n        uint256 value\n    ) internal {\n        Storage().marketBalance[market] -= value;\n        IERC20(token).safeTransfer(account, value);\n        emit Transfer(market, Type.MarketToUser, account, value, bytes(\"\"));\n    }\n\n    function userToMarket(\n        uint16 market,\n        address account,\n        uint256 value\n    ) internal {\n        Storage().marketBalance[market] += value;\n        emit Transfer(market, Type.UserToMarket, account, value, bytes(\"\"));\n    }\n\n    function feeToReward(\n        address token,\n        uint16 market,\n        address to,\n        uint256 value\n    ) internal {\n        Storage().feeBalance[market] -= value;\n        IERC20(token).safeTransfer(to, value);\n        emit Transfer(market, Type.FeeToReward, to, value, bytes(\"\"));\n    }\n}\n"
    },
    "src/lib/fee/FeeHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../types/Types.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {FundingRateCalculator} from \"./FundingRateCalculator.sol\";\nimport {PercentageMath} from \"../utils/PercentageMath.sol\";\n\nlibrary FeeHandler {\n    using SafeCast for int256;\n    using SafeERC20 for IERC20;\n    using PercentageMath for uint256;\n\n    bytes32 constant FEE_STORAGE_POSITION = keccak256(\"blex.fee.storage\");\n\n    enum ConfigType {\n        SkipTime,\n        MaxFRatePerDay,\n        FRateFactor,\n        MaxFRate,\n        MinFRate,\n        FeeLoss,\n        MinFundingInterval,\n        MinorityFRate,\n        MinCFRate,\n        FundingFeeLossOffLimit,\n        Counter\n    }\n\n    struct FeeStorage {\n        // =========================================================================\n        //                            FundFeeStore & FundFee\n        // =========================================================================\n        mapping(uint16 market => uint256 interval) fundingIntervals;\n        mapping(uint16 market => mapping(uint8 configType => uint256 value)) configs;\n        mapping(uint16 market => uint256 calInterval) calIntervals;\n        mapping(uint16 market => uint256 lastCalTime) lastCalTimes;\n        mapping(uint16 market => mapping(bool isLong => int256 calFundingRate)) calFundingRates;\n        mapping(uint16 market => uint256 loss) fundFeeLoss;\n        // =========================================================================\n        //                            FeeRouter\n        // =========================================================================\n        // market's feeRate and fee\n        mapping(uint16 market => mapping(uint8 feeType => uint256 feeAndRate)) feeAndRates;\n        // FeeVault-storage\n        // cumulativeFundingRates tracks the funding rates based on utilization\n        mapping(uint16 market => mapping(bool isLong => int256)) cumulativeFundingRates;\n        // fundingRates tracks the funding rates based on position size\n        mapping(uint16 market => mapping(bool isLong => int256)) fundingRates;\n        // lastFundingTimes tracks the last time funding was updated for a token\n        mapping(uint16 market => uint256) lastFundingTimes;\n    }\n\n    event UpdateFundInterval(uint16 indexed market, uint256 interval);\n    event UpdateCalInterval(uint16 indexed market, uint256 interval);\n    event AddSkipTime(uint256 indexed startTime, uint256 indexed endTime);\n    event UpdateConfig(uint256 index, uint256 oldFRate, uint256 newFRate);\n    event UpdateFee(\n        address indexed account,\n        uint16 indexed market,\n        int256[] fees,\n        uint256 amount\n    );\n    event UpdateFeeAndRates(\n        uint16 indexed market,\n        uint8 kind,\n        uint256 oldFeeOrRate,\n        uint256 feeOrRate\n    );\n    event UpdateCumulativeFundRate(\n        uint16 indexed market,\n        int256 longRate,\n        int256 shortRate\n    );\n    event UpdateFundRate(\n        uint16 indexed market,\n        int256 longRate,\n        int256 shortRate\n    );\n    event UpdateLastFundTime(uint16 indexed market, uint256 timestamp);\n    event AddNegativeFeeLoss(\n        uint16 indexed market,\n        address account,\n        uint256 amount,\n        uint256 lossBefore,\n        uint256 lossAfter\n    );\n\n    function initialize(uint16 market) internal {\n        FeeStorage storage fs = Storage();\n        fs.configs[market][uint8(ConfigType.MaxFRatePerDay)] = PercentageMath\n            .PERCENTAGE_FACTOR;\n        fs.configs[market][uint8(ConfigType.FRateFactor)] = PercentageMath\n            .PERCENTAGE_FACTOR;\n        fs.configs[market][uint8(ConfigType.MinFRate)] = 1250;\n        fs.configs[market][uint8(ConfigType.MinFundingInterval)] = 1 hours;\n        fs.configs[market][uint8(ConfigType.FundingFeeLossOffLimit)] = 0.1e7;\n    }\n\n    function Storage() internal pure returns (FeeStorage storage fs) {\n        bytes32 position = FEE_STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n\n    function getOrderFees(\n        MarketCache memory data\n    ) internal view returns (int256 fees) {\n        FeeStorage storage $ = Storage();\n        uint8 _kind;\n\n        if (data.isOpen) {\n            _kind = uint8(FeeType.OpenFee);\n        } else {\n            _kind = uint8(FeeType.CloseFee);\n        }\n\n        uint256 _tradeFee = getFeeOfKind(data.market, data.sizeDelta, _kind);\n        uint256 _execFee = getExecFee(data.market);\n        return int256(_tradeFee + _execFee);\n    }\n\n    function getExecFee(uint16 market) internal view returns (uint256) {\n        return Storage().feeAndRates[market][uint8(FeeType.ExecFee)];\n    }\n\n    function payoutFees(\n        address account,\n        address token,\n        int256[] memory fees,\n        uint256 feesTotal\n    ) internal {\n        // todo\n    }\n\n    function getFundingRate(\n        uint16 market,\n        bool isLong\n    ) internal view returns (int256) {\n        // todo\n    }\n    function getFundingFee(\n        uint16 market,\n        uint256 size,\n        int256 entryFundingRate,\n        bool isLong\n    ) internal view returns (int256) {\n        //todo\n    }\n\n    function totalFees(\n        int256[] memory fees\n    ) internal pure returns (int256 total) {\n        for (uint256 i = 0; i < fees.length; i++) {\n            total += fees[i];\n        }\n    }\n\n    function getFeesReceivable(\n        MarketCache memory params,\n        PositionProps memory position\n    ) internal view returns (int256[] memory fees) {\n        int256 fundfee = getFundingFee(\n            params.market,\n            params.sizeDelta,\n            position.entryFundingRate,\n            params.isLong\n        );\n        fees = _getFeesReceivable(params, fundfee);\n        return fees;\n    }\n\n    /**\n     * @dev Calculates the fee for a given size delta and fee kind.\n     * @param market The address of the market.\n     * @param sizeDelta The change in position size.\n     * @param kind The fee kind.\n     * @return The fee amount.\n     */\n    function getFeeOfKind(\n        uint16 market,\n        uint256 sizeDelta,\n        uint8 kind\n    ) internal view returns (uint256) {\n        if (sizeDelta == 0) {\n            return 0;\n        }\n\n        uint256 _point = PercentageMath.maxPctIfZero(\n            Storage().feeAndRates[market][kind]\n        );\n        return sizeDelta.percentMul(_point);\n    }\n\n    //==========================================================================================\n    //        private functions\n    //==========================================================================================\n\n    function _updateGlobalFundingRate(\n        uint16 market,\n        int256 longRate,\n        int256 shortRate,\n        int256 longRateDelta,\n        int256 shortRateDelta,\n        uint256 timestamp\n    ) private {\n        // DONE\n        Storage().cumulativeFundingRates[market][true] += longRateDelta;\n        Storage().cumulativeFundingRates[market][false] += shortRateDelta;\n        Storage().fundingRates[market][true] = longRate;\n        Storage().fundingRates[market][false] = shortRate;\n        Storage().lastFundingTimes[market] = timestamp;\n\n        emit UpdateCumulativeFundRate(market, longRateDelta, shortRateDelta);\n        emit UpdateFundRate(market, longRate, shortRate);\n        emit UpdateLastFundTime(market, timestamp);\n    }\n\n    function _getLastCollectTimes(\n        uint16 market\n    ) private view returns (uint256) {\n        return Storage().lastFundingTimes[market];\n    }\n\n    function _calFeeRate(\n        uint16 _market,\n        uint256 _longSize,\n        uint256 _shortSize\n    ) private view returns (uint256) {}\n\n    function _getMaxFRate(\n        uint16 market,\n        uint256 openInterest,\n        uint256 aum\n    ) internal view returns (uint256) {\n        uint256 fundingInterval = _getCalInterval(market);\n        return\n            FundingRateCalculator.calculateMaxFundingRate(\n                openInterest,\n                aum,\n                maxFRatePerDay(market),\n                fundingInterval\n            );\n    }\n\n    function _getCalInterval(\n        uint16 market\n    ) private view returns (uint256 _interval) {\n        FeeStorage storage fs = Storage();\n        _interval = fs.fundingIntervals[market];\n        if (_interval == 0)\n            return FundingRateCalculator.MIN_FUNDING_INTERVAL_3600;\n    }\n\n    function maxFRatePerDay(uint16 market) internal view returns (uint256) {\n        FeeStorage storage fs = Storage();\n        return fs.configs[market][uint8(ConfigType.MaxFRatePerDay)];\n    }\n\n    function getCalFundingRates(\n        address market\n    ) internal view returns (int256, int256) {\n        //todo\n    }\n\n    /**\n     * 只是获取根据当前仓位获取各种费用应该收取多少, 并不包含收费顺序和是否能收得到\n     */\n    function _getFeesReceivable(\n        MarketCache memory params,\n        int256 _fundFee\n    ) internal view returns (int256[] memory fees) {\n        // todo merge with feeAndRates?\n        fees = new int256[](uint8(FeeType.Counter));\n\n        fees[uint8(FeeType.FundFee)] = _fundFee;\n\n        if (params.sizeDelta == 0 && params.collateralDelta != 0) {\n            return fees;\n        }\n\n        // open position\n        if (params.isOpen) {\n            fees[uint8(FeeType.OpenFee)] = int256(\n                getFeeOfKind(\n                    params.market,\n                    params.sizeDelta,\n                    uint8(FeeType.OpenFee)\n                )\n            );\n        } else {\n            // close position\n            fees[uint8(FeeType.CloseFee)] = int256(\n                getFeeOfKind(\n                    params.market,\n                    params.sizeDelta,\n                    uint8(FeeType.CloseFee)\n                )\n            );\n\n            // liquidate position\n            if (params.liqState == LiquidationState.Collateral) {\n                uint256 _fee = Storage().feeAndRates[params.market][\n                    uint8(FeeType.LiqFee)\n                ];\n                fees[uint8(FeeType.LiqFee)] = int256(_fee);\n            }\n        }\n        if (params.execNum > 0) {\n            // exec fee\n            uint256 _fee = Storage().feeAndRates[params.market][\n                uint8(FeeType.ExecFee)\n            ];\n            _fee = _fee * params.execNum;\n\n            fees[uint8(FeeType.ExecFee)] = int256(_fee);\n        }\n        return fees;\n    }\n}\n"
    },
    "src/lib/fee/FundingRateCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\nimport {Calc} from \"../utils/Calc.sol\";\nimport {PercentageMath} from \"../utils/PercentageMath.sol\";\n\nlibrary FundingRateCalculator {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using PercentageMath for uint256;\n    using FundingRateCalculator for FundFeeStorageMemory;\n    using FundingRateCalculator for FundFeeVars;\n\n    uint256 internal constant MIN_FUNDING_INTERVAL_3600 = 1 hours; // 8hours\n    uint256 internal constant BASIS_INTERVAL_HOUR_24 = 24;\n    uint256 internal constant DEFAULT_RATE_DIVISOR_100 = 100;\n\n    /**\n     * 计算最大单位资金费限制\n     */\n    /**\n     *\n     * @param openInterest18Decimals 18zeros\n     * @param aumWith18Decimals 18zeros\n     * @param maxFRatePerDayWith8Decimals 8zeros\n     * @param fundingIntervalSeconds seconds\n     */\n    function calculateMaxFundingRate(\n        uint256 openInterest18Decimals,\n        uint256 aumWith18Decimals,\n        uint256 maxFRatePerDayWith8Decimals,\n        uint256 fundingIntervalSeconds\n    ) internal pure returns (uint256) {\n        uint256 _maxFRate = (openInterest18Decimals *\n            fundingIntervalSeconds *\n            maxFRatePerDayWith8Decimals *\n            PercentageMath.PERCENTAGE_FACTOR) /\n            aumWith18Decimals /\n            BASIS_INTERVAL_HOUR_24 /\n            PercentageMath.PERCENTAGE_FACTOR /\n            MIN_FUNDING_INTERVAL_3600;\n        return _maxFRate;\n    }\n\n    /**\n     * 计算单位资金费(加上最大最小限制之后)\n     */\n    function capFundingRateByLimits(\n        uint256 long,\n        uint256 short,\n        uint256 maxFRate,\n        uint256 minFRate,\n        uint256 calculatedMaxFRate8Decimals,\n        uint256 fRate,\n        uint256 minority\n    ) internal pure returns (uint256, uint256) {\n        //- FRate<=minFRate时：FRate=minFRate（取消双边收取MinFRate）。\n        /*\n        if (fRate <= minFRate) return (minFRate, minFRate);\n         */\n        maxFRate = maxFRate == 0 ? calculatedMaxFRate8Decimals : maxFRate;\n        if (fRate > maxFRate) fRate = maxFRate;\n        if (fRate < minFRate) fRate = minFRate;\n        return long >= short ? (fRate, minority) : (minority, fRate);\n    }\n\n    /**\n     * 计算用户的资金费\n     */\n    function calUserFundingFee(\n        uint256 size,\n        int256 entryFundingRate,\n        int256 cumRates\n    ) internal pure returns (int256) {\n        // Calculate the funding fee by multiplying the position size with the rate.\n        // - 收取周期负资金费方头寸为0时，正资金费>0，负资金费率为<0；收取的资金费全部用于抵扣亏损，无亏损时不发放；\n        // TODO 需要和 painter 讨论\n        return\n            (int256(size) * (cumRates - entryFundingRate)) /\n            int256(PercentageMath.PERCENTAGE_FACTOR);\n    }\n\n    /**\n     * 计算资金费公式\n     */\n    function calFeeRate(\n        uint256 _longSizeWith18Decimals,\n        uint256 _shortSizeWith18Decimals,\n        uint256 _intervalSeconds,\n        uint256 fRateFactorWith8Decimals\n    ) internal pure returns (uint256) {\n        // Calculate the absolute difference between longSize and shortSize.\n        uint256 _size = Calc.abs(\n            _longSizeWith18Decimals,\n            _shortSizeWith18Decimals\n        );\n        uint256 _rate;\n        if (_size != 0) {\n            // Calculate the divisor by summing longSize and shortSize.\n            uint256 _divisor = _longSizeWith18Decimals +\n                _shortSizeWith18Decimals;\n            // (1666-2000)/(2000+1666)\n\n            // Calculate the fee rate.\n            _rate = (_size * PercentageMath.PERCENTAGE_FACTOR) / _divisor;\n\n            // ((2000-1664)/(2000+1664) * 10**8)**2 * 3600 / (10**8) / 100 / 24 / 3600\n            //350\n            _rate =\n                ((_rate ** 2) * _intervalSeconds) /\n                PercentageMath.PERCENTAGE_FACTOR /\n                DEFAULT_RATE_DIVISOR_100 /\n                BASIS_INTERVAL_HOUR_24 /\n                MIN_FUNDING_INTERVAL_3600;\n            _rate =\n                (_rate * fRateFactorWith8Decimals) /\n                PercentageMath.PERCENTAGE_FACTOR;\n        }\n        return _rate;\n    }\n\n    /**\n     * 计算 CFRate\n     * @param Long_CumFRate 多头的累计资金费率, 精度 8\n     * @param Short_CumFRate 空头的累计资金费率, 精度 8\n     * @param minCFRate 最小 CFRate 限制, 管理后台配置, 精度 8\n     */\n    function calCFRate(\n        int256 Long_CumFRate,\n        int256 Short_CumFRate,\n        uint256 minCFRate\n    ) internal pure returns (uint256 _CFRate) {\n        // - 资金费率 C_FRate: 每当多空仓位的FRate完成一个计算周期时(即计算出8个FRate)，多空CumFRate的差值绝对值为C_Frate；\n        //   - C_FRate=| Long_CumFRate - Short_CumFRate |\n        // - minC_FRate用于限制C_FRate下限(管理后台配置，区间0-1，默认为0.0001，收取最低资金费率万三每天)\n        //   - C_FRate < minC_FRate 时，C_FRate取minC_FRate\n        _CFRate = Calc.abs(Long_CumFRate, Short_CumFRate).toUint256();\n        _CFRate = Math.max(_CFRate, minCFRate);\n    }\n\n    /**\n     * 用于计算 C_FRate_Long 和 C_FRate_Short\n     * @param Long_CumFRate 多头累计资金费率 8精度\n     * @param Short_CumFRate 多头累计资金费率 8精度\n     * @param C_FRate C_FRate 8精度\n     * @param fundingFeeLossOffLimit 负资金费率公式抵扣资金亏损比例(管理后台配置) 8精度 取值范围[0,10^8]\n     * @param fundingFeeLoss 单个市场记录资金费亏损总值 精度18\n     * @param Size_Long Size_Long 精度18\n     * @param Size_Short Size_Short 精度18\n     * @return C_FRate_Long C_FRate_Long 8精度\n     * @return C_FRate_Short C_FRate_Short 8精度\n     */\n    function calNextCFRate(\n        int256 Long_CumFRate,\n        int256 Short_CumFRate,\n        uint256 C_FRate,\n        uint256 fundingFeeLossOffLimit,\n        uint256 fundingFeeLoss,\n        uint256 Size_Long,\n        uint256 Size_Short\n    )\n        internal\n        pure\n        returns (\n            int256 C_FRate_Long,\n            int256 C_FRate_Short,\n            uint256 deductFundFeeAmount\n        )\n    {\n        //- 收取周期正资金费方头寸为0时，正资金费>0,，收取的资金费为0，负资金费率=0；\n        //- 收取周期负资金费方头寸为0时，正资金费>0，负资金费率取0；\n        bool isFomular = Size_Long > 0 && Size_Short > 0;\n        if (Long_CumFRate >= Short_CumFRate) {\n            deductFundFeeAmount = _getLossOffset(\n                Size_Long,\n                C_FRate,\n                fundingFeeLossOffLimit,\n                fundingFeeLoss\n            );\n            C_FRate_Long = C_FRate.toInt256();\n            if (isFomular) {\n                C_FRate_Short =\n                    -((Size_Long.toInt256() * C_FRate_Long) -\n                        deductFundFeeAmount.toInt256() *\n                        PercentageMath.PERCENTAGE_FACTOR.toInt256()) /\n                    Size_Short.toInt256();\n            }\n        } else {\n            deductFundFeeAmount = _getLossOffset(\n                Size_Short,\n                C_FRate,\n                fundingFeeLossOffLimit,\n                fundingFeeLoss\n            );\n            C_FRate_Short = C_FRate.toInt256();\n            if (isFomular) {\n                //feeLoss计算出来的一定 < Size_Short.toInt256() * C_FRate_Short\n                C_FRate_Long =\n                    -((Size_Short.toInt256() * C_FRate_Short) -\n                        deductFundFeeAmount.toInt256() *\n                        PercentageMath.PERCENTAGE_FACTOR.toInt256()) /\n                    Size_Long.toInt256();\n            }\n        }\n    }\n\n    /**\n     * 计算资金费亏损值\n     * @param size 某个方向头寸, 精度 18\n     * @param _CFRate CFRate, 精度 8\n     * @param fundingFeeLossOffLimit 负资金费率公式抵扣资金亏损比例(管理后台配置), 精度 8\n     * @param totalLoss 单个市场记录市场剩余亏损, 精度18\n     */\n    // function _getFundingFeeLoss(\n    function _getLossOffset(\n        uint256 size,\n        uint256 _CFRate,\n        uint256 fundingFeeLossOffLimit,\n        uint256 totalLoss\n    ) internal pure returns (uint256) {\n        // 资金费亏损<= Size_Long * C_FRate_Long *10%\n        return\n            Math.min(\n                (size * _CFRate * fundingFeeLossOffLimit) /\n                    (PercentageMath.PERCENTAGE_FACTOR ** 2),\n                totalLoss\n            );\n    }\n\n    //========================================================================\n    //               TIM\n    //========================================================================\n    // 设 小周期别名 a，大周期别名 b\n    struct FundFeeStorageMemory {\n        uint256 aInterval;\n        uint256 bInterval;\n        uint256 aUpdatedAt;\n        uint256 bUpdatedAt;\n        uint256 sFRate;\n        uint256 lFRate;\n        int256 sCumFRate;\n        int256 lCumFRate;\n        uint256 fundFeeLoss;\n    }\n\n    struct FundFeeVars {\n        uint256 fundFeeLoss;\n        uint256 intervalsN;\n        uint256 intervals1; // 第一时段间隔数\n        uint256 intervals2; // 第二时段间隔数\n        uint256 intervals3; // 第三时段间隔数\n        uint256 updatedAt; // 在不同时段代表不同行时段的大周期更新时间\n        uint256 deductAmount;\n        uint256 accDeductAmount;\n        int256 sCumFRate;\n        int256 lCumFRate;\n        int256 lCFRate;\n        int256 sCFRate;\n        int256 sCFRateDelta;\n        int256 lCFRateDelta;\n    }\n\n    function initializeFundFeeVars(\n        FundFeeStorageMemory memory sm\n    ) internal pure returns (FundFeeVars memory vars) {\n        vars.intervalsN = sm.bInterval / sm.aInterval;\n        vars.lCumFRate = sm.lCumFRate;\n        vars.sCumFRate = sm.sCumFRate;\n        vars.updatedAt = sm.aUpdatedAt; // 小周期更新时间, 初始化 0\n        vars.fundFeeLoss = sm.fundFeeLoss;\n        return vars;\n    }\n\n    // 判断是否存在前置大区间\n    function needsUpdateFirstOrSecondInterval(\n        FundFeeStorageMemory memory sm,\n        FundFeeVars memory vars,\n        uint256 currentTime\n    ) internal pure returns (bool) {\n        if (vars.updatedAt == 0) {\n            // 时间未初始化\n            vars.updatedAt = (currentTime / sm.bInterval) * sm.bInterval;\n            return true;\n        }\n\n        // 当前时间 小于 小周期更新时间\n        if (currentTime < vars.updatedAt) return false;\n\n        // 大周期的更新时间 + 大周期的周期 < 当前时间\n        return sm.bUpdatedAt + sm.bInterval <= currentTime;\n    }\n\n    // 判断第一时段存在的周期间隔数\n    function hasFirstInterval(\n        FundFeeStorageMemory memory sm,\n        FundFeeVars memory vars\n    ) internal pure returns (bool) {\n        // 第一段有多少个小周期剩余 = (小周期的更新时间 - 大周期的更新时间) / 小周期的秒数\n        vars.intervals1 = (sm.aUpdatedAt - sm.bUpdatedAt) / sm.aInterval;\n        return vars.intervals1 > 0;\n    }\n\n    // 更新第一时段结束时间和CumFRate\n    function updateFirstInterval(\n        FundFeeStorageMemory memory sm,\n        FundFeeVars memory vars\n    ) internal pure {\n        vars.updatedAt = sm.bUpdatedAt + sm.bInterval;\n        vars.lCumFRate =\n            sm.lCumFRate +\n            (sm.lFRate * (vars.intervalsN - vars.intervals1)).toInt256();\n        vars.sCumFRate =\n            sm.sCumFRate +\n            (sm.sFRate * (vars.intervalsN - vars.intervals1)).toInt256();\n    }\n\n    // 判断是否存在第二时段\n    function hasSecondInterval(\n        FundFeeStorageMemory memory sm,\n        uint256 currentTime,\n        FundFeeVars memory vars\n    ) internal pure returns (bool) {\n        vars.intervals2 = (currentTime - vars.updatedAt) / sm.bInterval;\n        return vars.intervals2 > 0;\n    }\n\n    // 更新第二时段结束时间和CumFRate\n    function updateSecondInterval(\n        FundFeeStorageMemory memory sm,\n        FundFeeVars memory vars\n    ) internal pure {\n        vars.updatedAt += sm.bInterval * vars.intervals2;\n        vars.lCumFRate = (sm.lFRate * vars.intervalsN).toInt256();\n        vars.sCumFRate = (sm.sFRate * vars.intervalsN).toInt256();\n    }\n\n    // 判断是否处理过第一时段或第二时段\n    /*\n    function hasFirstOrSecondInterval(\n        FundFeeVars memory vars\n    ) internal pure returns (bool) {\n        return vars.intervals1 > 0 || vars.intervals2 > 0;\n    }\n    */\n\n    // 判断是否需要更新小周期\n    function updateThirdInterval(\n        FundFeeStorageMemory memory sm,\n        uint256 currentTime,\n        FundFeeVars memory vars\n    ) internal pure returns (bool) {\n        if (currentTime < vars.updatedAt) {\n            return false;\n        }\n        // (当前时间 - 内存中维护的第二段的结束时间) / 小周期秒数\n        vars.intervals3 = (currentTime - vars.updatedAt) / sm.aInterval;\n        return vars.intervals3 > 0;\n    }\n\n    // 时段拆分:\n    // // ___    |________|________|________|________|    __\n    function updateFundFee(\n        uint256 lSize,\n        uint256 sSize,\n        uint256 currentTime,\n        FundFeeStorageMemory memory sm,\n        uint256 minCFRate,\n        uint256 fundingFeeLossOffLimit\n    )\n        internal\n        pure\n        returns (\n            FundFeeVars memory vars,\n            FundFeeStorageMemory memory sm2,\n            FundFeeVars memory vars2,\n            bool update12Interval\n        )\n    {\n        vars = sm.initializeFundFeeVars();\n        update12Interval = sm.needsUpdateFirstOrSecondInterval(\n            vars,\n            currentTime\n        );\n        if (update12Interval) {\n            if (sm.hasFirstInterval(vars)) {\n                sm.updateFirstInterval(vars);\n                _updateFundFeeStorageMemory(\n                    vars,\n                    lSize,\n                    sSize,\n                    minCFRate,\n                    fundingFeeLossOffLimit\n                );\n            }\n            if (sm.hasSecondInterval(currentTime, vars)) {\n                sm.updateSecondInterval(vars);\n                for (uint256 i = 0; i < vars.intervals2; i++) {\n                    _updateFundFeeStorageMemory(\n                        vars,\n                        lSize,\n                        sSize,\n                        minCFRate,\n                        fundingFeeLossOffLimit\n                    );\n                }\n            }\n            vars2 = abi.decode(abi.encode(vars), (FundFeeVars));\n            sm2 = abi.decode(abi.encode(sm), (FundFeeStorageMemory));\n            vars.lCumFRate = 0;\n            vars.sCumFRate = 0;\n        }\n        if (sm.updateThirdInterval(currentTime, vars)) {\n            vars.updatedAt += sm.aInterval * vars.intervals3;\n            vars.lCumFRate += (sm.lFRate * vars.intervals3).toInt256();\n            vars.sCumFRate += (sm.sFRate * vars.intervals3).toInt256();\n        }\n    }\n\n    // 更新正负资金费和抵扣\n    function _updateFundFeeStorageMemory(\n        FundingRateCalculator.FundFeeVars memory vars,\n        uint256 lSize,\n        uint256 sSize,\n        uint256 minCFRate,\n        uint256 fundingFeeLossOffLimit\n    ) internal pure {\n        uint256 CFRate = calCFRate(vars.lCumFRate, vars.sCumFRate, minCFRate);\n        (vars.lCFRate, vars.sCFRate, vars.deductAmount) = calNextCFRate(\n            vars.lCumFRate,\n            vars.sCumFRate,\n            CFRate,\n            fundingFeeLossOffLimit,\n            vars.fundFeeLoss,\n            lSize,\n            sSize\n        );\n        vars.lCFRateDelta += vars.lCFRate;\n        vars.sCFRateDelta += vars.sCFRate;\n        vars.fundFeeLoss = vars.fundFeeLoss > vars.deductAmount\n            ? vars.fundFeeLoss - vars.deductAmount\n            : 0;\n    }\n}\n"
    },
    "src/lib/globalValid/GValidHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\n\nimport {GValid} from \"../types/Types.sol\";\nimport {PercentageMath} from \"../utils/PercentageMath.sol\";\n\nlibrary GValidHandler {\n    using PercentageMath for uint256;\n\n    bytes32 constant STORAGE_POSITION = keccak256(\"blex.globalvalid.storage\");\n\n    struct StorageStruct {\n        uint256 maxSizeLimit;\n        uint256 maxNetSizeLimit;\n        uint256 maxUserNetSizeLimit;\n        mapping(uint256 => uint256) maxMarketSizeLimit;\n    }\n\n    function Storage() internal pure returns (StorageStruct storage fs) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n\n    function setMaxSizeLimit(uint256 limit) internal {\n        PercentageMath.valid(limit);\n        Storage().maxSizeLimit = limit;\n    }\n\n    function setMaxNetSizeLimit(uint256 limit) internal {\n        PercentageMath.valid(limit);\n        Storage().maxNetSizeLimit = limit;\n    }\n\n    function setMaxUserNetSizeLimit(uint256 limit) internal {\n        PercentageMath.valid(limit);\n        Storage().maxUserNetSizeLimit = limit;\n    }\n\n    function setMaxMarketSizeLimit(uint16 market, uint256 limit) internal {\n        PercentageMath.valid(limit);\n        Storage().maxMarketSizeLimit[market] = limit;\n    }\n\n    function maxSizeLimit() internal view returns (uint256) {\n        return PercentageMath.maxPctIfZero(Storage().maxSizeLimit);\n    }\n\n    function maxNetSizeLimit() internal view returns (uint256) {\n        return PercentageMath.maxPctIfZero(Storage().maxNetSizeLimit);\n    }\n\n    function maxUserNetSizeLimit() internal view returns (uint256) {\n        return PercentageMath.maxPctIfZero(Storage().maxUserNetSizeLimit);\n    }\n\n    function maxMarketSizeLimit(uint16 market) internal view returns (uint256) {\n        return\n            PercentageMath.maxPctIfZero(Storage().maxMarketSizeLimit[market]);\n    }\n\n    /**\n     * @dev Checks if the position should be increased.\n     * @param params The ValidParams struct containing the valid parameters.\n     * @return A boolean indicating whether the position should be increased.\n     */\n    function isIncreasePosition(\n        GValid memory params\n    ) internal view returns (bool) {\n        if (params.sizeDelta == 0) {\n            return true;\n        }\n\n        uint256 _max = getMaxIncreasePositionSize(params);\n        return (_max >= params.sizeDelta);\n    }\n\n    /**\n     * @dev Retrieves the maximum increase in position size based on the provided parameters.\n     * @param params The ValidParams struct containing the valid parameters.\n     * @return The maximum increase in position size as a uint256 value.\n     */\n    function getMaxIncreasePositionSize(\n        GValid memory params\n    ) internal view returns (uint256) {\n        uint256 _min = _getMaxUseableGlobalSize(\n            params.globalLongSizes,\n            params.globalShortSizes,\n            params.aum,\n            params.isLong\n        );\n        if (_min == 0) return 0;\n\n        uint256 _tmp = _getMaxUseableNetSize(\n            params.globalLongSizes,\n            params.globalShortSizes,\n            params.aum,\n            params.isLong\n        );\n        if (_tmp == 0) return 0;\n\n        if (_tmp < _min) _min = _tmp;\n\n        _tmp = _getMaxUseableUserNetSize(\n            params.userLongSizes,\n            params.userShortSizes,\n            params.aum,\n            params.isLong\n        );\n        if (_tmp == 0) return 0;\n\n        if (_tmp < _min) _min = _tmp;\n\n        _tmp = _getMaxUseableMarketSize(\n            params.market,\n            params.isLong,\n            params.marketLongSizes,\n            params.marketShortSizes\n        );\n        if (_tmp < _min) _min = _tmp;\n\n        return _min;\n    }\n\n    /**\n     * @dev Calculates the maximum usable global position size based on the provided parameters.\n     * @param longSize The current long position size.\n     * @param shortSize The current short position size.\n     * @param isLong A boolean indicating whether the position is long (true) or short (false).\n     * @return The maximum usable global position size as a uint256 value.\n     */\n    function _getMaxUseableGlobalSize(\n        uint256 longSize,\n        uint256 shortSize,\n        uint256 aum,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 _size = isLong ? longSize : shortSize;\n        uint256 _limit = aum.percentMul(maxSizeLimit());\n        return calRemaining(_size, _limit);\n    }\n\n    /**\n     * @dev Calculates the maximum usable net position size based on the provided parameters.\n     * @param longSize The current long position size.\n     * @param shortSize The current short position size.\n     * @return The maximum usable net position size as a uint256 value.\n     */\n    function _getMaxUseableNetSize(\n        uint256 longSize,\n        uint256 shortSize,\n        uint256 aum,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 _size = isLong ? longSize : shortSize;\n        uint256 _limit = aum.percentMul(maxNetSizeLimit());\n        _limit = isLong ? _limit + shortSize : _limit + longSize;\n        return calRemaining(_size, _limit);\n    }\n\n    /**\n     * @dev Calculates the maximum usable net position size for the user based on the provided parameters.\n     * @param longSize The user's current long position size.\n     * @param shortSize The user's current short position size.\n     * @return The maximum usable net position size for the user as a uint256 value.\n     */\n    function _getMaxUseableUserNetSize(\n        uint256 longSize,\n        uint256 shortSize,\n        uint256 aum,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 _size = isLong ? longSize : shortSize;\n        uint256 _limit = aum.percentMul(maxUserNetSizeLimit());\n        _limit = isLong ? _limit + shortSize : _limit + longSize;\n        return calRemaining(_size, _limit);\n    }\n\n    /**\n     * @dev Calculates the maximum usable market position size based on the provided parameters.\n     * @param market The address of the market.\n     * @param isLong A boolean indicating whether the position is long (true) or short (false).\n     * @param longSize The current long position size.\n     * @param shortSize The current short position size.\n     * @return The maximum usable market position size as a uint256 value.\n     */\n    function _getMaxUseableMarketSize(\n        uint16 market,\n        bool isLong,\n        uint256 longSize,\n        uint256 shortSize\n    ) internal view returns (uint256) {\n        uint256 _limit = maxMarketSizeLimit(market);\n        uint256 _size = isLong ? longSize : shortSize;\n        return calRemaining(_size, _limit);\n    }\n\n    function calRemaining(\n        uint256 _size,\n        uint256 _limit\n    ) internal pure returns (uint256) {\n        if (_size >= _limit) return 0;\n        return (_limit - _size);\n    }\n}\n"
    },
    "src/lib/market/MarketHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nlibrary MarketHandler {\n    /* is IOrderBook, Ac */\n    bytes32 constant STORAGE_POSITION = keccak256(\"blex.market.storage\");\n\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    struct Props {\n        bool isSuspended;\n        bool allowOpen;\n        bool allowClose;\n        bool validDecrease;\n        uint16 minSlippage;\n        uint16 maxSlippage;\n        uint16 minLeverage;\n        uint16 maxLeverage;\n        uint16 minPayment;\n        uint16 minCollateral;\n        uint16 decreaseNumLimit; //default: 10\n        uint32 maxTradeAmount;\n    }\n\n    struct StorageStruct {\n        mapping(uint16 => Props) config;\n        mapping(uint16 => string) name;\n        mapping(uint16 => address) vault;\n        mapping(uint16 => address) token;\n        mapping(uint16 => uint256) balance;\n        mapping(address vault => EnumerableSet.UintSet) marketIds;\n        uint16 marketIdAutoIncrease;\n    }\n\n    function vault(uint16 market) internal view returns (address) {\n        return MarketHandler.Storage().vault[market];\n    }\n\n    function Storage() internal pure returns (StorageStruct storage fs) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n\n    function collateralToken(uint16 market) internal view returns (address) {\n        return Storage().token[market];\n    }\n\n    function getDecreaseOrderValidation(\n        uint16 market,\n        uint256 decrOrderCount\n    ) internal view returns (bool isValid) {\n        Props storage conf = Storage().config[market];\n        return conf.decreaseNumLimit >= decrOrderCount + 1;\n    }\n}\n"
    },
    "src/lib/market/PositionSubMgrLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\npragma abicoder v2;\n\nimport \"../types/Types.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {SignedMath} from \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\n\nlibrary PositionSubMgrLib {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    error TotalFeesLtZero(int256 fees);\n\n    /**\n     * @param _originFees 原始应当收取的费用数据\n     * @return withdrawFromFeeVault 应该提取到 market 的费用总数\n     * @return afterFees 按照费用优先级, 在考虑盈亏数据之后, 返回的真实费用数组\n     */\n    function calculateWithdrawFromFeeVault(\n        int256[] memory _originFees\n    )\n        internal\n        pure\n        returns (int256 withdrawFromFeeVault, int256[] memory afterFees)\n    {\n        int256 fundFee = _originFees[uint8(FeeType.FundFee)];\n        if (fundFee >= 0) return (0, _originFees);\n        afterFees = new int256[](_originFees.length);\n        for (uint256 i = 0; i < _originFees.length; i++) {\n            afterFees[i] = _originFees[i];\n        }\n        afterFees[uint8(FeeType.FundFee)] = 0;\n        return (-fundFee, afterFees);\n    }\n\n    /**\n     *\n     * @param _position 用户仓位\n     * @param dPNL 盈亏\n     * @param fees 原始费用数据\n     */\n    function calculateTransToFeeVault(\n        PositionProps memory _position, // 仓位属性\n        int256 dPNL, // 盈亏\n        int256 fees // 手续费\n    ) internal pure returns (int256 transferToFeeVaultAmount) {\n        int256 remain = _position.collateral.toInt256() + dPNL; // 计算剩余金额\n        if (fees < 0) revert TotalFeesLtZero(fees); // 如果手续费小于0，则抛出异常\n        if (remain > 0) return SignedMath.min(remain, fees); // 如果剩余金额大于0，则返回剩余金额和手续费中较小的一个\n        // 默认返回 0\n    }\n\n    function calculateTransToVault(\n        int256 collateral,\n        int256 dPNL\n    ) internal pure returns (int256) {\n        return collateral + dPNL <= 0 ? collateral : -dPNL;\n    }\n\n    function calculateTransToUser(\n        MarketCache memory _params, // 定义更新仓位所需的参数\n        PositionProps memory _position, // 定义当前仓位的属性\n        int256 dPNL, // 变动盈亏\n        int256 fees // 手续费\n    ) internal pure returns (int256) {\n        // 检查是否完全平仓\n        bool isCloseAll = _position.size == _params.sizeDelta;\n        // 如果完全平仓，更新参数中的保证金变动\n        if (isCloseAll) _params.collateralDelta = _position.collateral;\n        // 如果保证金不足以支付亏损和手续费，则触发清算，返回0\n        if (_position.collateral.toInt256() + dPNL - fees <= 0) return 0;\n        // 如果保证金变动后能够保持杠杆或增仓\n        if (_params.collateralDelta.toInt256() + dPNL - fees > 0) {\n            return _params.collateralDelta.toInt256() + dPNL - fees;\n        }\n        // 包含不保持杠杆减仓的情况，返回0\n        if (_params.collateralDelta.toInt256() + dPNL - fees <= 0) return 0;\n        // 返回保证金变动后的值\n        return _params.collateralDelta.toInt256() + dPNL;\n    }\n\n    function calculateNewCollateral(\n        MarketCache memory _params,\n        PositionProps memory _position,\n        int256 dPNL,\n        int256 fees\n    ) internal pure returns (uint256) {\n        bool isCloseAll = _position.size == _params.sizeDelta;\n        if (isCloseAll) _params.collateralDelta = _position.collateral;\n        if (_params.liqState != LiquidationState.None || isCloseAll) return 0; // 如果处于清算状态或者是全部清算，则返回0\n        if (_position.collateral.toInt256() + dPNL - fees <= 0) return 0; // 如果保证金加上盈亏减去费用小于等于0，则返回0\n        if (_params.collateralDelta.toInt256() + dPNL - fees < 0) {\n            return (_position.collateral.toInt256() + dPNL - fees).toUint256();\n        } // 如果保证金增量加上盈亏减去费用小于0，则返回保证金加上盈亏减去费用的值\n        return _position.collateral - _params.collateralDelta; // 否则返回保证金减去保证金增量的值\n    }\n\n    /**\n     * 计算用户保证金亏损\n     * @param coll 用户仓位保证金 18 decimals\n     * @param pnl 盈亏金额 18 decimals\n     * @param fs 手续费数组 18 decimals\n     * @return fundFeeLoss 资金费亏损 18 decimals\n     */\n    function calculateFundFeeLoss(\n        int256 coll, // 用户仓位保证金\n        int256 pnl, // 盈亏金额\n        int256[] memory fs // 手续费数组\n    ) internal pure returns (uint256 fundFeeLoss) {\n        int256 fFee = fs[uint8(FeeType.FundFee)]; // 资金费用\n        int256 remain = -fs[uint8(FeeType.CloseFee)] + coll + pnl; // 剩余资金\n        if (fFee > 0 && fFee > remain) {\n            return uint256(fFee - SignedMath.max(remain, 0));\n        } // 计算资金费用亏损\n    }\n\n    struct DecreaseTransactionOuts {\n        // 计算转入费用金库的金额\n        int256 transToFeeVault;\n        // 计算转入金库的金额\n        int256 transToVault;\n        uint256 newCollateralUnsigned;\n        int256 transToUser;\n        // 从费用金库中计算提取金额和剩余手续费\n        int256 withdrawFromFeeVault;\n        // 需要在事件上触发的collateral变化值(包含 collateral 和 withdrawFromFeeVault)\n        int256 collateralDeltaAfter;\n        // 需要在 position 上面减少的 collateral 数量(不包含withdrawFromFeeVault)\n        uint256 collateralDecreased;\n    }\n\n    function calDecreaseTransactionValues(\n        MarketCache memory _params,\n        PositionProps memory _position,\n        int256 dPNL,\n        int256[] memory _originFees\n    ) internal pure returns (DecreaseTransactionOuts memory outs) {\n        // 从手续费保险库中计算提取金额和剩余手续费\n        (\n            int256 withdrawFromFeeVault,\n            int256[] memory afterFees\n        ) = calculateWithdrawFromFeeVault(_originFees);\n        int256 totalFees; // = afterFees.totoalFees();\n        // 如果提取金额大于0，则增加头寸保证金\n        if (withdrawFromFeeVault > 0) {\n            // 零时增加, 方便计算\n            _position.collateral += uint256(withdrawFromFeeVault);\n            outs.withdrawFromFeeVault = withdrawFromFeeVault;\n        }\n        // 计算转入手续费保险库的金额\n        outs.transToFeeVault =\n            calculateTransToFeeVault(_position, dPNL, totalFees) -\n            withdrawFromFeeVault;\n        // 计算转入保险库的金额\n        outs.transToVault = calculateTransToVault(\n            _position.collateral.toInt256(),\n            dPNL\n        );\n        // 计算新的保证金金额（无符号）\n        outs.newCollateralUnsigned = calculateNewCollateral(\n            _params,\n            _position,\n            dPNL,\n            totalFees\n        );\n        // 计算转入用户的金额\n        outs.transToUser = calculateTransToUser(\n            _params,\n            _position,\n            dPNL,\n            totalFees\n        );\n        // 计算完毕, 数据还原\n\n        // 如果仓位大小等于参数中的大小变化，则从保证金中扣除提取的金额\n        if (_position.size == _params.sizeDelta) {\n            _position.collateral -= withdrawFromFeeVault.toUint256();\n            _params.collateralDelta = _position.collateral;\n        }\n\n        // 计算保证金减少的金额\n        outs.collateralDecreased =\n            _position.collateral -\n            outs.newCollateralUnsigned;\n\n        // 计算保证金变化后的值，如果仓位大小等于参数中的大小变化，则为保证金本身，否则为保证金减少的金额减去提取的金额\n        outs.collateralDeltaAfter = (_position.size == _params.sizeDelta)\n            ? _position.collateral.toInt256()\n            : outs.collateralDecreased.toInt256() - outs.withdrawFromFeeVault;\n    }\n\n    function isClearPos(\n        MarketCache memory _params, // 定义更新仓位所需的参数\n        PositionProps memory _position // 定义当前仓位的属性\n    ) internal pure returns (bool) {\n        return\n            (_params.liqState != LiquidationState.Collateral ||\n                _params.liqState != LiquidationState.Leverage) &&\n            _params.sizeDelta != _position.size;\n    }\n}\n"
    },
    "src/lib/oracle/OracleHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IPriceFeed} from \"../../interfaces/IPriceFeed.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nlibrary OracleHandler {\n    using SafeCast for int256;\n\n    bytes32 constant STORAGE_POSITION = keccak256(\"blex.oracle.storage\");\n    uint256 constant PRICE_PRECISION = 10 ** 30;\n    uint256 constant ONE_USD = PRICE_PRECISION;\n    uint256 constant CUMULATIVE_DELTA_PRECISION = 10 * 1000 * 1000;\n    uint256 constant MAX_REF_PRICE = type(uint160).max;\n    uint256 constant MAX_CUMULATIVE_REF_DELTA = type(uint32).max;\n    uint256 constant MAX_CUMULATIVE_FAST_DELTA = type(uint32).max;\n    uint256 constant BP_DIVISOR = 10000;\n\n    // fit data in a uint256 slot to save gas costs\n    struct PriceDataItem {\n        uint160 refPrice; // Chainlink price\n        uint32 refTime; // last updated at time\n        uint32 cumulativeRefDelta; // cumulative Chainlink price delta\n        uint32 cumulativeFastDelta; // cumulative fast price delta\n    }\n\n    struct ConfigStruct {\n        uint32 maxDeviationBP; // 1000\n        uint32 priceDuration; // 300\n        uint32 maxPriceUpdateDelay; // 3600\n        uint32 priceDataInterval; // 60\n        uint32 sampleSpace; // 3\n    }\n\n    struct StorageStruct {\n        address USDT;\n        ConfigStruct config;\n        mapping(uint16 => address) priceFeeds;\n        mapping(uint16 => uint256) spreadBP;\n        mapping(uint16 => uint256) prices;\n        mapping(uint16 => uint256) maxCumulativeDeltaDiffs;\n        mapping(uint16 => PriceDataItem) priceData;\n    }\n\n    event PriceData(\n        uint16 market,\n        uint256 refPrice,\n        uint256 fastPrice,\n        uint256 cumulativeRefDelta,\n        uint256 cumulativeFastDelta\n    );\n    event MaxCumulativeDeltaDiffExceeded(\n        uint16 market,\n        uint256 refPrice,\n        uint256 fastPrice,\n        uint256 cumulativeRefDelta,\n        uint256 cumulativeFastDelta\n    );\n    event UpdatePrice(address feed, uint16 indexed market, uint256 price);\n\n    function Storage() internal pure returns (StorageStruct storage fs) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n\n    function config() internal view returns (ConfigStruct memory) {\n        return Storage().config;\n    }\n\n    function setPrices(\n        uint16[] memory _markets,\n        uint256[] memory _prices\n    ) internal {\n        for (uint256 i = 0; i < _markets.length; i++) {\n            _setPrice(_markets[i], _prices[i]);\n        }\n    }\n\n    function setPrice(uint16 _market, uint256 _price) internal {\n        _setPrice(_market, _price);\n    }\n\n    //==================================================================================================\n    //================ view    functions================================================================\n    //==================================================================================================\n\n    // under regular operation, the fastPrice (prices[token]) is returned and there is no spread returned from this function,\n    // though VaultPriceFeed might apply its own spread\n    //\n    // if the fastPrice has not been updated within priceDuration then it is ignored and only _refPrice with a spread is used (spread: spreadBPIfInactive)\n    // in case the fastPrice has not been updated for maxPriceUpdateDelay then the _refPrice with a larger spread is used (spread: spreadBPIfChainError)\n    //\n    // there will be a spread from the _refPrice to the fastPrice in the following cases:\n    // - in case the maxDeviationBP between _refPrice and fastPrice is exceeded\n    // - in case watchers flag an issue\n    // - in case the cumulativeFastDelta exceeds the cumulativeRefDelta by the maxCumulativeDeltaDiff\n\n    function getPrice(\n        uint16 market,\n        bool _maximise\n    ) internal view returns (uint256) {\n        uint256 chainPrice = getChainPrice(market, _maximise);\n        return getFastPrice(market, chainPrice, _maximise);\n    }\n\n    function getFastPrice(\n        uint16 market,\n        uint256 _refPrice,\n        bool _maximise\n    ) internal view returns (uint256) {\n        uint256 lastUpdate = uint256(Storage().priceData[market].refTime);\n        uint256 fastPrice = Storage().prices[market];\n        if (\n            block.timestamp >\n            lastUpdate + uint256(Storage().config.maxPriceUpdateDelay) ||\n            block.timestamp >\n            lastUpdate + uint256(Storage().config.priceDuration) ||\n            fastPrice == 0\n        ) {\n            return _refPrice;\n        }\n\n        uint256 diffBP = _refPrice > fastPrice\n            ? _refPrice - fastPrice\n            : fastPrice - _refPrice;\n        diffBP = (diffBP * BP_DIVISOR) / _refPrice;\n\n        // create a spread between the _refPrice and the fastPrice if the maxDeviationBP is exceeded\n        // or if watchers have flagged an issue with the fast price\n        // 1. fastPrice\n        // 2. fastprice > chainlink, false\n        // 2. 1%\n        // 3. fastPricechainlink/, fastPrice\n\n        if (\n            favorFastPrice(market) &&\n            diffBP <= uint256(Storage().config.maxDeviationBP)\n        ) {\n            return fastPrice;\n        }\n\n        return comparePrices(_refPrice, fastPrice, _maximise);\n    }\n\n    function comparePrices(\n        uint256 price1,\n        uint256 price2,\n        bool maximize\n    ) internal pure returns (uint256) {\n        return\n            maximize\n                ? (price1 > price2 ? price1 : price2)\n                : (price1 < price2 ? price1 : price2);\n    }\n\n    function getChainPrice(\n        uint16 market,\n        bool _maximise\n    ) internal view returns (uint256) {\n        uint256 xxxUSD = _getChainPrice(market, _maximise);\n        uint256 _USDTUSD = _getChainPrice(market, _maximise);\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\n        }\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\n    }\n\n    //==================================================================================================\n    //================ internal functions================================================================\n    //==================================================================================================\n    function _setPrice(uint16 market, uint256 _price) internal {\n        // check if the market has a price feed\n        if (Storage().priceFeeds[market] != address(0)) {\n            uint256 refPrice = _getLatestPriceWithUSDT(market);\n            uint256 fastPrice = Storage().prices[market];\n\n            (\n                uint256 prevRefPrice,\n                uint256 refTime,\n                uint256 cumulativeRefDelta,\n                uint256 cumulativeFastDelta\n            ) = _getPriceData(market);\n\n            if (prevRefPrice > 0) {\n                // chainlink\n                uint256 refDeltaAmount = refPrice > prevRefPrice\n                    ? refPrice - prevRefPrice\n                    : prevRefPrice - refPrice;\n                // fastPrice\n                uint256 fastDeltaAmount = fastPrice > _price\n                    ? fastPrice - _price\n                    : _price - fastPrice;\n\n                // reset cumulative delta values if it is a new time window\n                if (\n                    refTime / Storage().config.priceDataInterval !=\n                    block.timestamp / Storage().config.priceDataInterval\n                ) {\n                    cumulativeRefDelta = 0;\n                    cumulativeFastDelta = 0;\n                }\n                //\n                cumulativeRefDelta =\n                    cumulativeRefDelta +\n                    (refDeltaAmount * CUMULATIVE_DELTA_PRECISION) /\n                    prevRefPrice;\n                cumulativeFastDelta =\n                    cumulativeFastDelta +\n                    (fastDeltaAmount * CUMULATIVE_DELTA_PRECISION) /\n                    fastPrice;\n            }\n\n            if (\n                cumulativeFastDelta > cumulativeRefDelta &&\n                cumulativeFastDelta - cumulativeRefDelta >\n                Storage().maxCumulativeDeltaDiffs[market]\n            ) {\n                emit MaxCumulativeDeltaDiffExceeded(\n                    market,\n                    refPrice,\n                    fastPrice,\n                    cumulativeRefDelta,\n                    cumulativeFastDelta\n                );\n            }\n\n            _setPriceData(\n                market,\n                refPrice,\n                cumulativeRefDelta,\n                cumulativeFastDelta\n            );\n            emit PriceData(\n                market,\n                refPrice,\n                fastPrice,\n                cumulativeRefDelta,\n                cumulativeFastDelta\n            );\n        }\n\n        Storage().prices[market] = _price;\n        emit UpdatePrice(msg.sender, market, _price);\n    }\n\n    function _setPriceData(\n        uint16 _market,\n        uint256 _refPrice,\n        uint256 _cumulativeRefDelta,\n        uint256 _cumulativeFastDelta\n    ) internal {\n        require(_refPrice < MAX_REF_PRICE, \"FastPriceFeed: invalid refPrice\");\n        // skip validation of block.timestamp, it should only be out of range after the year 2100\n        require(\n            _cumulativeRefDelta < MAX_CUMULATIVE_REF_DELTA,\n            \"FastPriceFeed: invalid cumulativeRefDelta\"\n        );\n        require(\n            _cumulativeFastDelta < MAX_CUMULATIVE_FAST_DELTA,\n            \"FastPriceFeed: invalid cumulativeFastDelta\"\n        );\n\n        Storage().priceData[_market] = PriceDataItem(\n            uint160(_refPrice),\n            uint32(block.timestamp),\n            uint32(_cumulativeRefDelta),\n            uint32(_cumulativeFastDelta)\n        );\n    }\n\n    function _getLatestPriceWithUSDT(\n        uint16 market\n    ) internal view returns (uint256) {\n        uint256 xxxUSD = _getLatestPrice(market);\n        uint256 _USDTUSD = (IPriceFeed(Storage().USDT).latestAnswer())\n            .toUint256();\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\n        }\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\n    }\n\n    function _getLatestPrice(uint16 market) internal view returns (uint256) {\n        address _feed = Storage().priceFeeds[market];\n        require(_feed != address(0), \"PriceFeed: invalid price feed\");\n        IPriceFeed _priceFeed = IPriceFeed(_feed);\n        int256 _price = _priceFeed.latestAnswer();\n        require(_price > 0, \"PriceFeed: invalid price\");\n        return uint256(_price);\n    }\n\n    function _getChainPrice(\n        uint16 market,\n        bool _maximise\n    ) internal view returns (uint256) {\n        address _feed = Storage().priceFeeds[market];\n        require(_feed != address(0), \"PriceFeed: invalid price feed\");\n\n        uint256 _price = 0;\n        uint80 _id = IPriceFeed(Storage().priceFeeds[market]).latestRound();\n\n        for (uint80 i = 0; i < Storage().config.sampleSpace; i++) {\n            if (_id <= i) {\n                break;\n            }\n            uint256 p;\n\n            if (i == 0) {\n                int256 _p = IPriceFeed(Storage().priceFeeds[market])\n                    .latestAnswer();\n                require(_p > 0, \"PriceFeed: invalid price\");\n                p = uint256(_p);\n            } else {\n                (, int256 _p, , , ) = IPriceFeed(Storage().priceFeeds[market])\n                    .getRoundData(_id - i);\n                require(_p > 0, \"PriceFeed: invalid price\");\n                p = uint256(_p);\n            }\n\n            if (_price == 0) {\n                _price = p;\n                continue;\n            }\n\n            if (_maximise && p > _price) {\n                _price = p;\n                continue;\n            }\n\n            if (!_maximise && p < _price) {\n                _price = p;\n            }\n        }\n\n        require(_price > 0, \"PriceFeed: could not fetch price\");\n        uint256 _decimals = IPriceFeed(Storage().priceFeeds[market]).decimals();\n        return (_price * PRICE_PRECISION) / (10 ** _decimals);\n    }\n\n    function setMaxCumulativeDeltaDiff(\n        uint16 market,\n        uint256 _maxCumulativeDeltaDiff\n    ) internal {\n        Storage().maxCumulativeDeltaDiffs[market] = _maxCumulativeDeltaDiff;\n    }\n\n    function _getPriceData(\n        uint16 market\n    ) internal view returns (uint256, uint256, uint256, uint256) {\n        PriceDataItem memory data = Storage().priceData[market];\n        return (\n            uint256(data.refPrice),\n            uint256(data.refTime),\n            uint256(data.cumulativeRefDelta),\n            uint256(data.cumulativeFastDelta)\n        );\n    }\n\n    function favorFastPrice(uint16 market) internal view returns (bool) {\n        (\n            ,\n            ,\n            uint256 cumulativeRefDelta,\n            uint256 cumulativeFastDelta\n        ) = _getPriceData(market);\n        return\n            isFastPriceFavored(\n                cumulativeRefDelta,\n                cumulativeFastDelta,\n                Storage().maxCumulativeDeltaDiffs[market]\n            );\n    }\n\n    function isFastPriceFavored(\n        uint256 cumulativeRefDelta,\n        uint256 cumulativeFastDelta,\n        uint256 maxCumulativeDeltaDiffs\n    ) internal pure returns (bool) {\n        if (\n            cumulativeFastDelta > cumulativeRefDelta &&\n            cumulativeFastDelta - cumulativeRefDelta > maxCumulativeDeltaDiffs\n        ) {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "src/lib/order/OrderFinder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.20;\n\nimport \"../utils/EnumerableValues.sol\";\nimport {OrderHandler, OrderHelper, OrderProps} from \"./OrderHandler.sol\";\nimport {OrderFinderCache} from \"../../interfaces/IMarketFacet.sol\";\n\nlibrary OrderFinder {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableValues for EnumerableSet.Bytes32Set;\n    using OrderHelper for OrderProps;\n    using OrderHelper for OrderProps;\n\n    function getExecutableOrdersByPrice(\n        OrderFinderCache memory cache\n    ) internal view returns (OrderProps[] memory _orders) {\n        cache.storageKey = OrderHelper.storageKey(\n            cache.market,\n            cache.isLong,\n            cache.isIncrease\n        );\n        require(cache.oraclePrice > 0, \"oraclePrice zero\");\n        bytes32[] memory keys = OrderHandler.getKeysInRange(\n            cache.storageKey,\n            cache.start,\n            cache.end\n        );\n        uint256 _listCount;\n        uint256 _len = keys.length;\n        for (uint256 index; index < _len; ) {\n            bytes32 key = keys[index];\n            OrderProps memory _open = OrderHandler.getOrders(\n                cache.storageKey,\n                key\n            );\n            if (\n                (_open.isMarkPriceValid(cache.oraclePrice) &&\n                    key != bytes32(0)) || _open.isFromMarket\n            ) {\n                unchecked {\n                    ++_listCount;\n                }\n            }\n            unchecked {\n                ++index;\n            }\n        }\n        _orders = new OrderProps[](_listCount);\n\n        uint256 _orderKeysIdx;\n        for (uint256 index; index < _len; ) {\n            bytes32 key = keys[index];\n            OrderProps memory _open = OrderHandler.getOrders(\n                cache.storageKey,\n                key\n            );\n            if (\n                (_open.isMarkPriceValid(cache.oraclePrice) &&\n                    key != bytes32(0)) || _open.isFromMarket\n            ) {\n                _orders[_orderKeysIdx] = _open;\n                unchecked {\n                    ++_orderKeysIdx;\n                }\n            }\n            unchecked {\n                ++index;\n            }\n        }\n    }\n}\n"
    },
    "src/lib/order/OrderHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.20;\npragma abicoder v2;\n\nimport \"../utils/EnumerableValues.sol\";\nimport {OrderHelper, OrderProps} from \"./OrderHelper.sol\";\n\nlibrary OrderHandler {\n    /* is IOrderBook, Ac */\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableValues for EnumerableSet.Bytes32Set;\n    using OrderHelper for OrderProps;\n\n    bytes32 constant OB_STORAGE_POSITION = keccak256(\"blex.orderbook.storage\");\n\n    struct OrderStorage {\n        mapping(bytes32 storageKey => mapping(bytes32 orderKey => OrderProps)) orders; // keyorder\n        mapping(bytes32 storageKey => mapping(address account => uint256)) ordersIndex; // orderID\n        mapping(bytes32 storageKey => mapping(address account => uint256)) orderNum; // order\n        mapping(bytes32 storageKey => mapping(address account => EnumerableSet.Bytes32Set)) ordersByAccount; // position => order\n        mapping(bytes32 storageKey => EnumerableSet.Bytes32Set) orderKeys; // orderkey\n    }\n\n    function Storage() internal pure returns (OrderStorage storage fs) {\n        bytes32 position = OB_STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n\n    function generateID(\n        bytes32 sk,\n        address _acc\n    ) internal returns (uint256 retVal) {\n        retVal = Storage().ordersIndex[sk][_acc];\n        if (retVal == 0) {\n            retVal = 1;\n        }\n        OrderStorage storage $ = Storage();\n        unchecked {\n            $.ordersIndex[sk][_acc] = retVal + 1;\n        }\n    }\n\n    function add(bytes32 sk, OrderProps memory order) internal {\n        order.updateTime();\n        bytes32 key = order.getKey();\n        Storage().orders[sk][key] = order;\n        Storage().orderKeys[sk].add(key); // ，\n        Storage().orderNum[sk][order.account] += 1;\n        Storage().ordersByAccount[sk][order.account].add(order.getKey());\n    }\n\n    function remove(\n        bytes32 sk,\n        bytes32 key\n    ) internal returns (OrderProps memory _order) {\n        _order = Storage().orders[sk][key];\n        Storage().orderNum[sk][_order.account] -= 1;\n        delete Storage().orders[sk][key];\n        Storage().orderKeys[sk].remove(key);\n        Storage().ordersByAccount[sk][_order.account].remove(key);\n    }\n\n    function set(OrderProps memory order, bytes32 sk) internal {\n        order.updateTime(); // block\n        bytes32 key = order.getKey();\n        OrderStorage storage $ = Storage();\n        $.orders[sk][key] = order;\n    }\n\n    function removeByAccount(\n        uint16 market,\n        bool isIncrease,\n        bool isLong,\n        address account\n    ) internal returns (OrderProps[] memory _orders) {\n        bytes32 sk = OrderHelper.storageKey(market, isLong, isIncrease);\n        if (account == address(0)) return _orders;\n        bytes32[] memory _ordersKeys = Storage()\n        .ordersByAccount[sk][account].values();\n        uint256 orderCount = _filterOrders(sk, _ordersKeys);\n        uint256 len = _ordersKeys.length;\n        // return & del\n        _orders = new OrderProps[](orderCount);\n        uint256 readIdx;\n        for (uint256 i = 0; i < len && readIdx < orderCount; ) {\n            bytes32 _orderKey = _ordersKeys[i];\n            if (Storage().orderKeys[sk].contains(_orderKey)) {\n                OrderProps memory _order = remove(sk, _orderKey);\n                _orders[readIdx] = _order;\n                unchecked {\n                    readIdx++;\n                }\n            }\n            unchecked {\n                i++;\n            }\n        }\n\n        // del key\n        delete Storage().ordersByAccount[sk][account];\n    }\n\n    //===============================================================\n    // view only\n    //===============================================================\n    function containsKey(bytes32 sk, bytes32 key) internal view returns (bool) {\n        return Storage().orderKeys[sk].contains(key);\n    }\n\n    function getOrderByIndex(\n        uint16 market,\n        bool isLong,\n        bool isIncrease,\n        uint256 index\n    ) internal view returns (OrderProps memory) {\n        bytes32 sk = OrderHelper.storageKey(market, isLong, isIncrease);\n        bytes32 key = Storage().orderKeys[sk].at(index);\n        return Storage().orders[sk][key];\n    }\n\n    function getOrderCount(\n        uint16 market,\n        bool isLong,\n        bool isIncrease\n    ) internal view returns (uint256) {\n        bytes32 sk = OrderHelper.storageKey(market, isLong, isIncrease);\n        return Storage().orderKeys[sk].length();\n    }\n\n    function getKeyByIndex(\n        uint16 market,\n        bool isLong,\n        bool isIncrease,\n        uint256 _index\n    ) internal view returns (bytes32) {\n        bytes32 sk = OrderHelper.storageKey(market, isLong, isIncrease);\n        return Storage().orderKeys[sk].at(_index);\n    }\n\n    function getKeysInRange(\n        bytes32 sk,\n        uint256 start,\n        uint256 end\n    ) internal view returns (bytes32[] memory) {\n        return Storage().orderKeys[sk].valuesAt(start, end);\n    }\n\n    function getOrders(\n        bytes32 storageKey,\n        bytes32 orderKey\n    ) internal view returns (OrderProps memory _orders) {\n        return Storage().orders[storageKey][orderKey];\n    }\n\n    function getOrderNum(\n        uint16 market,\n        bool isLong,\n        bool isIncrease,\n        address account\n    ) internal view returns (uint256) {\n        bytes32 sk = OrderHelper.storageKey(market, isLong, isIncrease);\n        return Storage().orderNum[sk][account];\n    }\n\n    //===============================================================\n    // private functions\n    //===============================================================\n\n    function _filterOrders(\n        bytes32 sk,\n        bytes32[] memory _ordersKeys\n    ) private view returns (uint256 orderCount) {\n        uint256 len = _ordersKeys.length;\n        for (uint256 i = 0; i < len; i++) {\n            bytes32 _orderKey = _ordersKeys[i];\n            if (Storage().orderKeys[sk].contains(_orderKey)) {\n                orderCount++;\n            }\n        }\n    }\n}\n"
    },
    "src/lib/order/OrderHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport {OrderProps} from \"../types/Types.sol\";\n\nlibrary OrderHelper {\n    uint8 internal constant STRUCT_VERSION = 0x01;\n\n    function getKey(OrderProps memory order) internal pure returns (bytes32) {\n        return keccak256(abi.encode(order.account, order.orderID));\n    }\n\n    function updateTime(OrderProps memory _order) internal view {\n        _order.updatedAtBlock = uint32(block.timestamp);\n    }\n\n    // 精度\n    // 创建结构体\n    // valid\n    // 转换结构体\n    function getKey(\n        address account,\n        uint64 orderID\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encode(account, orderID));\n    }\n\n    function storageKey(\n        uint16 market,\n        bool isLong,\n        bool isIncrease\n    ) internal pure returns (bytes32 orderKey) {\n        return bytes32(abi.encode(isLong, isIncrease, market));\n    }\n\n    function getPairKey(\n        OrderProps memory order\n    ) internal pure returns (bytes32) {\n        return getKey(order.account, order.pairId);\n    }\n\n    function isMarkPriceValid(\n        OrderProps memory _order,\n        uint256 _oraclePrice\n    ) internal pure returns (bool) {\n        if (_order.triggerAbove) return _oraclePrice >= uint256(_order.price);\n        else return _oraclePrice <= uint256(_order.price);\n    }\n}\n"
    },
    "src/lib/position/PositionHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\npragma abicoder v2;\n\nimport \"../utils/EnumerableValues.sol\";\nimport {Position, PositionProps} from \"./../types/PositionStruct.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {PositionStorage, PositionCache} from \"./PositionStorage.sol\";\n\nlibrary PositionHandler {\n    using Position for PositionProps;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.AddressSet;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using SafeCast for int128;\n    using SafeCast for uint128;\n\n    function increasePosition(\n        PositionCache memory cache\n    ) internal returns (PositionProps memory result) {\n        cache.isOpen = true;\n        cache.sk = PositionStorage.storageKey(cache.market, cache.isLong);\n        cache.position = PositionStorage.Storage().positions[cache.sk][\n            cache.account\n        ];\n\n        if (cache.position.size == 0)\n            cache.position.averagePrice = uint128(cache.markPrice);\n\n        if (cache.position.size > 0 && cache.sizeDelta > 0) {\n            (bool _hasProfit, uint256 _realisedPnl) = cache.position.calPNL(\n                cache.markPrice\n            );\n            cache.position.averagePrice = cache.position.calAveragePrice(\n                cache.sizeDelta,\n                cache.markPrice,\n                _realisedPnl,\n                _hasProfit\n            );\n\n            int256 _pnl = _hasProfit\n                ? int256(_realisedPnl)\n                : -int256(_realisedPnl);\n\n            result.realisedPnl = _pnl;\n            result.averagePrice = cache.position.averagePrice;\n        }\n\n        cache.position.collateral = (cache.position.collateral.toInt256() +\n            cache.collateralDelta).toUint256();\n        cache.position.entryFundingRate = cache.fundingRate;\n        cache.position.size = cache.position.size + cache.sizeDelta;\n        cache.position.isLong = cache.isLong;\n        cache.position.lastTime = uint32(block.timestamp);\n\n        require(cache.position.isValid(), \"positionBook: invalid position\");\n        cache.globalPosition = _calGlobalPosition(cache);\n        PositionStorage.set(cache);\n        result.size = cache.position.size;\n        result.collateral = cache.position.collateral;\n    }\n\n    function decreasePosition(\n        PositionCache memory cache\n    ) internal returns (PositionProps memory result) {\n        cache.isOpen = false;\n        cache.sk = PositionStorage.storageKey(cache.market, cache.isLong);\n        cache.position = PositionStorage.Storage().positions[cache.sk][\n            cache.account\n        ];\n        require(\n            cache.position.lastTime != uint32(block.timestamp),\n            \"pb:same block\"\n        );\n        require(cache.position.isValid(), \"positionBook: invalid position\");\n        if (cache.collateralDelta > 0) {\n            require(\n                cache.position.collateral >= cache.collateralDelta.toUint256(),\n                \"positionBook: invalid collateral\"\n            );\n        }\n        require(\n            cache.position.size >= cache.sizeDelta,\n            \"positionBook: invalid size\"\n        );\n        if (cache.position.size != cache.sizeDelta) {\n            cache.position.entryFundingRate = cache.fundingRate;\n            cache.position.size = cache.position.size - cache.sizeDelta;\n            cache.position.collateral = (cache.position.collateral.toInt256() -\n                cache.collateralDelta).toUint256();\n            require(cache.position.isValid(), \"positionBook: invalid position\");\n            cache.globalPosition = _calGlobalPosition(cache);\n            PositionStorage.set(cache);\n            result.size = cache.position.size;\n            result.collateral = cache.position.collateral;\n        } else {\n            PositionStorage.remove(cache);\n        }\n    }\n\n    function liquidatePosition(\n        PositionCache memory cache\n    ) internal returns (PositionProps memory result) {\n        cache.isOpen = false;\n        cache.sk = PositionStorage.storageKey(cache.market, cache.isLong);\n        cache.position = PositionStorage.Storage().positions[cache.sk][\n            cache.account\n        ];\n        require(\n            cache.position.isExist(),\n            \"positionBook: position does not exist\"\n        );\n        if (cache.markPrice != 0) {\n            (bool _hasProfit, uint256 _realisedPnl) = cache.position.calPNL(\n                cache.markPrice\n            );\n            int256 _pnl = _hasProfit\n                ? int256(_realisedPnl)\n                : -int256(_realisedPnl);\n\n            result.realisedPnl = _pnl;\n        }\n        PositionStorage.remove(cache);\n        result.size = cache.position.size;\n        result.collateral = cache.position.collateral;\n    }\n\n    // =====================================================\n    //           internal only\n    // =====================================================\n\n    function _calGlobalPosition(\n        PositionCache memory cache\n    ) internal view returns (PositionProps memory) {\n        PositionProps memory _position = PositionStorage\n            .Storage()\n            .globalPositions[cache.sk];\n        if (cache.isOpen) {\n            uint256 _averagePrice = _calGlobalAveragePrice(\n                _position,\n                cache.sizeDelta,\n                cache.markPrice\n            );\n            require(_averagePrice > 100, \"pb:invalid global position\");\n            _position.averagePrice = _averagePrice;\n            _position.size += cache.sizeDelta;\n            _position.collateral = (_position.collateral.toInt256() +\n                cache.collateralDelta).toUint256();\n            _position.isLong = cache.isLong;\n            _position.lastTime = uint32(block.timestamp);\n\n            return _position;\n        }\n\n        _position.size -= cache.sizeDelta;\n        _position.collateral -= cache.collateralDelta.toUint256();\n\n        return _position;\n    }\n\n    function _calGlobalAveragePrice(\n        PositionProps memory position,\n        uint256 sizeDelta,\n        uint256 markPrice\n    ) internal pure returns (uint256) {\n        if (position.size == 0) {\n            return markPrice;\n        }\n        if (position.size > 0 && sizeDelta > 0) {\n            (bool _hasProfit, uint256 _pnl) = position.calPNL(markPrice);\n            position.averagePrice = position.calAveragePrice(\n                sizeDelta,\n                markPrice,\n                _pnl,\n                _hasProfit\n            );\n        }\n\n        return position.averagePrice;\n    }\n}\n"
    },
    "src/lib/position/PositionStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\npragma abicoder v2;\n\nimport \"../utils/EnumerableValues.sol\";\nimport \"./../types/PositionStruct.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport {Event} from \"../types/Event.sol\";\n\nstruct PositionCache {\n    uint16 market;\n    address account;\n    int256 collateralDelta;\n    uint256 sizeDelta;\n    uint256 markPrice;\n    int256 fundingRate;\n    bool isLong;\n    bool isOpen;\n    bytes32 sk;\n    PositionProps position;\n    PositionProps globalPosition;\n}\n\nlibrary PositionStorage {\n    using Position for PositionProps;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.AddressSet;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using SafeCast for int128;\n    using SafeCast for uint128;\n\n    bytes32 constant POS_STORAGE_POSITION = keccak256(\"blex.position.storage\");\n\n    event UpdatePosition(\n        address indexed account,\n        uint256 size,\n        uint256 collateral\n    );\n    event RemovePosition(\n        address indexed account,\n        uint256 size,\n        uint256 collateral\n    );\n\n    struct StorageStruct {\n        // save user position, address -> position\n        mapping(bytes32 => mapping(address => PositionProps)) positions;\n        // set of position address\n        mapping(bytes32 => EnumerableSet.AddressSet) positionKeys;\n        // global position\n        mapping(bytes32 => PositionProps) globalPositions;\n    }\n\n    function Storage() internal pure returns (StorageStruct storage fs) {\n        bytes32 position = POS_STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n\n    function storageKey(\n        uint16 market,\n        bool isLong\n    ) internal pure returns (bytes32 orderKey) {\n        return bytes32(abi.encodePacked(isLong, market));\n    }\n\n    // =====================================================\n    //           write\n    // =====================================================\n\n    function set(PositionCache memory cache) internal {\n        PositionProps memory _oldPosition = Storage().positions[cache.sk][\n            cache.account\n        ];\n        PositionProps memory _oldGlobalPosition = Storage().globalPositions[\n            cache.sk\n        ];\n        Storage().positions[cache.sk][cache.account] = cache.position;\n        Storage().globalPositions[cache.sk] = cache.globalPosition;\n        Storage().positionKeys[cache.sk].add(cache.account);\n\n        emit Event.PositionUpdate(\n            cache.account,\n            cache.market,\n            cache.isLong,\n            _oldPosition,\n            cache.position\n        );\n        emit Event.PositionKeyAdd(cache.account, cache.market, cache.isLong);\n        emit Event.GlobalPositionUpdate(\n            cache.market,\n            cache.isLong,\n            cache.globalPosition,\n            cache.globalPosition\n        );\n    }\n\n    function remove(PositionCache memory cache) internal {\n        PositionProps memory _oldPosition = Storage().positions[cache.sk][\n            cache.account\n        ];\n\n        bool has = Storage().positionKeys[cache.sk].contains(cache.account);\n        require(has, \"position does not exist\");\n        Storage().globalPositions[cache.sk] = cache.globalPosition;\n        delete Storage().positions[cache.sk][cache.account];\n        Storage().positionKeys[cache.sk].remove(cache.account);\n\n        emit Event.PositionDelete(\n            cache.account,\n            cache.market,\n            cache.isLong,\n            _oldPosition\n        );\n        emit Event.PositionKeyDelete(cache.account, cache.market, cache.isLong);\n        emit Event.GlobalPositionUpdate(\n            cache.market,\n            cache.isLong,\n            cache.globalPosition,\n            cache.globalPosition\n        );\n    }\n    // =====================================================\n    //           view only\n    // =====================================================\n\n    function getAccountSizesForBothDirections(\n        uint16 market,\n        address account\n    ) internal view returns (uint256 sizeLong, uint256 sizeShort) {\n        sizeLong = _getPosition(market, account, true).size;\n        sizeShort = _getPosition(market, account, false).size;\n    }\n\n    function getGlobalPosition(\n        uint16 market,\n        bool isLong\n    ) internal view returns (PositionProps memory) {\n        return _getGlobalPosition(storageKey(market, isLong));\n    }\n\n    function getMarketSizesForBothDirections(\n        uint16 market\n    ) internal view returns (uint256 globalSizeLong, uint256 globalSizeShort) {\n        StorageStruct storage ps = Storage();\n        globalSizeLong = ps.globalPositions[storageKey(market, true)].size;\n        globalSizeShort = ps.globalPositions[storageKey(market, false)].size;\n    }\n\n    function getMarketPNLInBoth(\n        uint16 market,\n        uint256 longPrice,\n        uint256 shortPrice\n    ) internal view returns (int256) {\n        int256 _totalPNL = _getMarketPNL(market, longPrice, true);\n        _totalPNL += _getMarketPNL(market, shortPrice, false);\n        return _totalPNL;\n    }\n\n    function getPosition(\n        uint16 market,\n        address account,\n        uint256 markPrice,\n        bool isLong\n    ) internal view returns (PositionProps memory) {\n        //todo\n        return Storage().positions[storageKey(market, isLong)][account];\n    }\n\n    function getPositionsForBothDirections(\n        uint16 market,\n        address account\n    )\n        internal\n        view\n        returns (PositionProps memory posLong, PositionProps memory posShort)\n    {\n        StorageStruct storage ps = Storage();\n        posLong = ps.positions[storageKey(market, true)][account];\n        posShort = ps.positions[storageKey(market, false)][account];\n    }\n\n    function getPNL(\n        uint16 market,\n        address account,\n        uint256 sizeDelta,\n        uint256 markPrice,\n        bool isLong\n    ) internal view returns (int256) {\n        PositionProps memory _position = getPosition(\n            market,\n            account,\n            markPrice,\n            isLong\n        );\n        return _calPNL(_position, sizeDelta, markPrice);\n    }\n\n    //==========================================================\n    //    internal\n    //==========================================================\n\n    function _getGlobalPosition(\n        bytes32 sk\n    ) internal view returns (PositionProps memory _position) {\n        // DONE\n        _position = Storage().globalPositions[sk];\n    }\n\n    function _getMarketPNL(\n        uint16 market,\n        uint256 markPrice,\n        bool isLong\n    ) internal view returns (int256) {\n        // DONE\n        PositionProps memory _position = _getGlobalPosition(\n            storageKey(market, isLong)\n        );\n        if (_position.size == 0) {\n            return 0;\n        }\n\n        (bool _hasProfit, uint256 _pnl) = _position.calPNL(markPrice);\n        return _hasProfit ? int256(_pnl) : -int256(_pnl);\n    }\n\n    function _getPosition(\n        uint16 market,\n        address account,\n        bool isLong\n    ) internal view returns (PositionProps memory) {\n        // DONE\n        return Storage().positions[storageKey(market, isLong)][account];\n    }\n\n    function _getPositionAndCalcPNL(\n        uint16 market,\n        address account,\n        uint256 markPrice,\n        bool isLong\n    ) internal view returns (PositionProps memory) {\n        // DONE\n        PositionProps memory _position = _getPosition(market, account, isLong);\n\n        if (markPrice == 0) {\n            return _position;\n        }\n\n        if (_position.size != 0) {\n            (bool _hasProfit, uint256 _realisedPnl) = _position.calPNL(\n                markPrice\n            );\n            int256 _pnl = _hasProfit\n                ? int256(_realisedPnl)\n                : -int256(_realisedPnl);\n            _position.realisedPnl = _pnl;\n        }\n\n        return _position;\n    }\n\n    function _calPNL(\n        PositionProps memory _position,\n        uint256 sizeDelta,\n        uint256 markPrice\n    ) internal pure returns (int256) {\n        if (_position.size == 0) {\n            return 0;\n        }\n\n        (bool _hasProfit, uint256 _pnl) = Position.calPNL(_position, markPrice);\n        if (sizeDelta != 0) {\n            _pnl = (sizeDelta * _pnl) / _position.size;\n        }\n\n        return _hasProfit ? int256(_pnl) : -int256(_pnl);\n    }\n}\n"
    },
    "src/lib/referral/ReferralHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {FeeType} from \"../types/Types.sol\";\nimport \"../../interfaces/IReferral.sol\";\n\nlibrary ReferralHandler {\n    bytes32 constant STORAGE_POSITION = keccak256(\"blex.referral.storage\");\n\n    struct Tier {\n        uint256 totalRebate; // e.g. 2400 for 24%\n        uint256 discountShare; // 5000 for 50%/50%, 7000 for 30% rebates/70% discount\n    }\n\n    uint256 constant BASIS_POINTS = 10000;\n    bytes32 constant DEFAULT_CODE = bytes32(\"dei\");\n\n    struct StorageStruct {\n        mapping(address => uint256) referrerDiscountShares; // to  default value in tier\n        mapping(address => uint256) referrerTiers; // link between user <> tier\n        mapping(uint256 => Tier) tiers;\n        mapping(bytes32 => address) codeOwners;\n        mapping(address => bytes32) traderReferralCodes;\n    }\n\n    event SetTraderReferralCode(address account, bytes32 code);\n    event SetTraderReferralCodeWithInviter(\n        address account,\n        address inviter,\n        bytes32 code\n    );\n    event SetTier(uint256 tierId, uint256 totalRebate, uint256 discountShare);\n    event SetReferrerTier(address referrer, uint256 tierId);\n    event SetReferrerDiscountShare(address referrer, uint256 discountShare);\n    event RegisterCode(address account, bytes32 code);\n    event SetCodeOwner(address account, address newAccount, bytes32 code);\n    event GovSetCodeOwner(bytes32 code, address newAccount);\n\n    event IncreasePositionReferral(\n        address account,\n        uint256 sizeDelta,\n        uint256 marginFeeBP,\n        bytes32 referralCode,\n        address referrer\n    );\n\n    event DecreasePositionReferral(\n        address account,\n        uint256 sizeDelta,\n        uint256 marginFeeBP,\n        bytes32 referralCode,\n        address referrer\n    );\n\n    function Storage() internal pure returns (StorageStruct storage fs) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n\n    function setTier(\n        uint256 _tierId,\n        uint256 _totalRebate,\n        uint256 _discountShare\n    ) internal {\n        require(_totalRebate <= BASIS_POINTS, \"Referral: invalid totalRebate\");\n        require(\n            _discountShare <= BASIS_POINTS,\n            \"Referral: invalid discountShare\"\n        );\n\n        Tier memory tier = Storage().tiers[_tierId];\n        tier.totalRebate = _totalRebate;\n        tier.discountShare = _discountShare;\n        Storage().tiers[_tierId] = tier;\n        emit SetTier(_tierId, _totalRebate, _discountShare);\n    }\n\n    function setReferrerTier(address _referrer, uint256 _tierId) internal {\n        Storage().referrerTiers[_referrer] = _tierId;\n        emit SetReferrerTier(_referrer, _tierId);\n    }\n\n    function setReferrerDiscountShare(\n        address _account,\n        uint256 _discountShare\n    ) internal {\n        require(\n            _discountShare <= BASIS_POINTS,\n            \"Referral: invalid discountShare\"\n        );\n\n        Storage().referrerDiscountShares[_account] = _discountShare;\n        emit SetReferrerDiscountShare(_account, _discountShare);\n    }\n\n    function registerCode(bytes32 _code) internal {\n        require(_code != bytes32(0), \"Referral: invalid _code\");\n        require(\n            Storage().codeOwners[_code] == address(0),\n            \"Referral: code already exists\"\n        );\n\n        Storage().codeOwners[_code] = msg.sender;\n        emit RegisterCode(msg.sender, _code);\n    }\n\n    modifier onlyCodeOwner(bytes32 _code) {\n        address account = Storage().codeOwners[_code];\n        require(msg.sender == account, \"Referral: forbidden\");\n        _;\n    }\n\n    /**\n     * This function is designed to change the owner address of a specific code.\n     * Only the original owner of the code has the authority to change the owner\n     * address of the code.\n     */\n    function setCodeOwner(\n        bytes32 _code,\n        address _newAccount\n    ) internal onlyCodeOwner(_code) {\n        require(_code != bytes32(0), \"Referral: invalid _code\");\n        Storage().codeOwners[_code] = _newAccount;\n        emit SetCodeOwner(msg.sender, _newAccount, _code);\n    }\n\n    function govSetCodeOwner(bytes32 _code, address _newAccount) internal {\n        require(_code != bytes32(0), \"Referral: invalid _code\");\n        Storage().codeOwners[_code] = _newAccount;\n        emit GovSetCodeOwner(_code, _newAccount);\n    }\n\n    function getTraderReferralInfo(\n        address _account\n    ) internal view returns (bytes32, address) {\n        bytes32 code = Storage().traderReferralCodes[_account];\n        address referrer;\n        if (code != bytes32(0)) {\n            referrer = Storage().codeOwners[code];\n        }\n        return (code, referrer);\n    }\n\n    function _setTraderReferralCode(address _account, bytes32 _code) internal {\n        Storage().traderReferralCodes[_account] = _code;\n        emit SetTraderReferralCode(_account, _code);\n        emit SetTraderReferralCodeWithInviter(\n            _account,\n            Storage().codeOwners[_code],\n            _code\n        );\n    }\n\n    function getCodeOwners(\n        bytes32[] memory _codes\n    ) internal view returns (address[] memory) {\n        address[] memory owners = new address[](_codes.length);\n\n        for (uint256 i = 0; i < _codes.length; i++) {\n            bytes32 code = _codes[i];\n            owners[i] = Storage().codeOwners[code];\n        }\n\n        return owners;\n    }\n\n    function updatePositionCallback(\n        ReferralUpdatePositionEvent calldata _event\n    ) internal {\n        (bytes32 referralCode, address referrer) = getTraderReferralInfo(\n            _event.inputs.account\n        );\n\n        if (referralCode == bytes32(0)) {\n            referrer = Storage().codeOwners[_event.inputs.refCode];\n            if (referrer == address(0)) return;\n            _setTraderReferralCode(\n                _event.inputs.account,\n                _event.inputs.refCode\n            );\n            referralCode = _event.inputs.refCode;\n        }\n\n        if (_event.inputs.isOpen) {\n            emit IncreasePositionReferral(\n                _event.inputs.account,\n                _event.inputs.sizeDelta,\n                uint256(_event.fees[uint8(FeeType.OpenFee)]),\n                referralCode,\n                referrer\n            );\n        } else {\n            emit DecreasePositionReferral(\n                _event.inputs.account,\n                _event.inputs.sizeDelta,\n                uint256(_event.fees[uint8(FeeType.CloseFee)]),\n                referralCode,\n                referrer\n            );\n        }\n    }\n}\n"
    },
    "src/lib/types/Error.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nlibrary Errors {\n    // TODO\n}\n"
    },
    "src/lib/types/Event.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {MarketCache, PositionProps} from \"../types/Types.sol\";\n\nlibrary Event {\n    event UpdateOrder(\n        address indexed account,\n        bool isLong,\n        bool isIncrease,\n        uint256 orderID,\n        address market,\n        uint256 size,\n        uint256 collateral,\n        uint256 triggerPrice,\n        bool triggerAbove,\n        uint256 tp,\n        uint256 sl,\n        uint128 fromOrder,\n        bool isKeepLev,\n        MarketCache params\n    );\n\n    event DeleteOrder(\n        address indexed account,\n        bool isLong,\n        bool isIncrease,\n        uint256 orderID,\n        uint16 market,\n        uint8 reason,\n        string reasonStr,\n        uint256 price,\n        int256 dPNL\n    );\n\n    event PositionUpdate(\n        address indexed account,\n        uint16 market,\n        bool isLong,\n        PositionProps oldPosition,\n        PositionProps newPosition\n    );\n\n    event PositionDelete(\n        address indexed account,\n        uint16 market,\n        bool isLong,\n        PositionProps oldPosition\n    );\n\n    event PositionKeyAdd(address indexed account, uint16 market, bool isLong);\n\n    event PositionKeyDelete(\n        address indexed account,\n        uint16 market,\n        bool isLong\n    );\n\n    event GlobalPositionUpdate(\n        uint16 market,\n        bool isLong,\n        PositionProps oldPosition,\n        PositionProps newPosition\n    );\n}\n"
    },
    "src/lib/types/MarketDataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {MarketCache} from \"./Types.sol\";\n\nlibrary MarketDataTypes {\n    function decodeCache(\n        bytes memory data\n    ) internal pure returns (MarketCache memory inputs) {\n        // (\n        //     inputs.pay,\n        //     inputs.slippage,\n        //     inputs.market,\n        //     inputs.isLong,\n        //     inputs.isOpen,\n        //     inputs.isCreate,\n        //     inputs.sizeDelta,\n        //     inputs.price,\n        //     inputs.collateralDelta,\n        //     inputs.tp,\n        //     inputs.sl,\n        //     inputs.account,\n        //     inputs.refCode,\n        //     inputs.keepLev,\n        //     inputs.orderId,\n        //     inputs.isExec,\n        //     inputs.triggerAbove,\n        //     inputs.keepLevSL,\n        //     inputs.keepLevTP\n        // ) = abi.decode(\n        //     data,\n        //     (\n        //         uint256,\n        //         uint256,\n        //         uint16,\n        //         bool,\n        //         bool,\n        //         bool,\n        //         uint256,\n        //         uint256,\n        //         uint256,\n        //         uint256,\n        //         uint256,\n        //         uint64,\n        //         address,\n        //         bytes32,\n        //         bool,\n        //         uint256,\n        //         bool,\n        //         bool,\n        //         bool,\n        //         bool\n        //     )\n        // );\n    }\n}\n"
    },
    "src/lib/types/PositionStruct.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {OrderProps, PositionProps} from \"./Types.sol\";\n\nlibrary Position {\n    function createPositionFromOrder(\n        OrderProps memory order\n    ) internal view returns (PositionProps memory result) {\n        // new added\n        result.size = order.size;\n        result.collateral = order.collateral;\n        result.isLong = order.isLong;\n        result.market = order.market;\n        result.averagePrice = order.price;\n        result.lastTime = uint32(block.timestamp);\n        return result;\n    }\n\n    function calAveragePrice(\n        PositionProps memory position,\n        uint256 sizeDelta,\n        uint256 markPrice,\n        uint256 pnl,\n        bool hasProfit\n    ) internal pure returns (uint256) {\n        uint256 _size = position.size + sizeDelta;\n        uint256 _netSize;\n\n        if (position.isLong) {\n            _netSize = hasProfit ? _size + pnl : _size - pnl;\n        } else {\n            _netSize = hasProfit ? _size - pnl : _size + pnl;\n        }\n\n        return (markPrice * _size) / _netSize;\n    }\n\n    function calLeverage(\n        PositionProps memory position\n    ) internal pure returns (uint256) {\n        return position.size / position.collateral;\n    }\n\n    function calPNL(\n        PositionProps memory position,\n        uint256 price\n    ) internal pure returns (bool, uint256) {\n        uint256 _priceDelta = position.averagePrice > price\n            ? position.averagePrice - price\n            : price - position.averagePrice;\n        uint256 _pnl = (position.size * _priceDelta) / position.averagePrice;\n        bool _hasProfit;\n\n        if (position.isLong) {\n            _hasProfit = price > position.averagePrice;\n        } else {\n            _hasProfit = position.averagePrice > price;\n        }\n\n        return (_hasProfit, _pnl);\n    }\n\n    function isExist(\n        PositionProps memory position\n    ) internal pure returns (bool) {\n        return (position.size > 0);\n    }\n\n    // only valid data of position, not include the business logic\n    function isValid(\n        PositionProps memory position\n    ) internal pure returns (bool) {\n        if (position.size == 0) {\n            return false;\n        }\n        if (position.size < position.collateral) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"
    },
    "src/lib/types/Types.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nenum MarketBusinessType {\n    None,\n    Increase,\n    IncreaseCollateral,\n    Decrease,\n    DecreaseCollateral\n}\n\nenum LiquidationState {\n    None,\n    Collateral,\n    Leverage\n}\n\nenum CancelReason {\n    Padding, //0\n    Liquidation, //1\n    PositionClosed, //2\n    Executed, //3\n    TpAndSlExecuted, //4\n    Canceled, //5\n    SysCancel, //6invalid order\n    LeverageLiquidation //7\n}\n\nenum FeeType {\n    OpenFee, // 0\n    CloseFee, // 1\n    FundFee, // 2\n    ExecFee, // 3\n    LiqFee, // 4\n    BuyLpFee, // 5\n    SellLpFee, // 6\n    ExtraFee0,\n    ExtraFee1,\n    ExtraFee2,\n    ExtraFee3,\n    ExtraFee4,\n    Counter\n}\n\nstruct GValid {\n    uint16 market;\n    uint256 sizeDelta;\n    bool isLong;\n    uint256 globalLongSizes;\n    uint256 globalShortSizes;\n    uint256 userLongSizes;\n    uint256 userShortSizes;\n    uint256 marketLongSizes;\n    uint256 marketShortSizes;\n    uint256 aum;\n}\n\nstruct OrderProps {\n    //====0\n    bytes32 refCode;\n    //====1\n    uint128 collateral;\n    uint128 size;\n    //====2\n    uint256 price;\n    uint256 tp;\n    //====3\n    bool triggerAbove;\n    bool isFromMarket;\n    bool isKeepLev;\n    bool isKeepLevTP;\n    bool isKeepLevSL;\n    uint64 orderID;\n    uint64 pairId;\n    uint64 fromId;\n    uint32 updatedAtBlock;\n    uint8 extra0;\n    //====4\n    address account; //224\n    uint96 extra1;\n    //====5\n    uint256 sl;\n    bool isIncrease;\n    bool isLong;\n    uint16 market;\n    uint96 extra2; //todo\n    uint128 gas;\n    uint8 version;\n}\n\nstruct PositionProps {\n    // 1\n    uint256 size;\n    uint256 collateral;\n    // 2\n    int256 entryFundingRate;\n    // 3\n    int256 realisedPnl;\n    // 4\n    uint256 averagePrice;\n    bool isLong;\n    uint32 lastTime;\n    uint16 market;\n    uint72 extra0;\n}\n\nstruct MarketCache {\n    MarketBusinessType busiType;\n    uint256 oraclePrice;\n    uint256 pay;\n    uint256 slippage;\n    uint16 market;\n    bool isLong;\n    bool isOpen;\n    bool isCreate;\n    bool isFromMarket;\n    uint256 sizeDelta;\n    uint256 price;\n    uint256 collateralDelta;\n    uint256 collateral;\n    uint256 tp;\n    uint256 sl;\n    uint64 orderId;\n    address account;\n    bool isExec;\n    LiquidationState liqState;\n    uint64 fromOrder;\n    bytes32 refCode;\n    uint8 execNum;\n    bool isKeepLev;\n    bool isKeepLevTP;\n    bool isKeepLevSL;\n    bool triggerAbove;\n    uint128 gas;\n}\n"
    },
    "src/lib/types/Valid.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\npragma abicoder v2;\n\n// import {OrderProps, PositionProps, MarketCache, MarketBusinessType} from \"./Types.sol\";\nimport \"./Types.sol\";\nimport {MarketHandler} from \"../market/MarketHandler.sol\";\nimport {PercentageMath} from \"../utils/PercentageMath.sol\";\n\nlibrary Validations {\n    using PercentageMath for uint256;\n\n    function validLev(\n        uint16 market,\n        uint256 newSize,\n        uint256 newCollateral\n    ) internal view {\n        if (newSize == 0 || newCollateral == 0) return;\n        uint256 lev = newSize / newCollateral;\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        require(lev <= $.config[market].maxLeverage, \"MarketValid:Lev\");\n        require(lev >= $.config[market].minLeverage, \"MarketValid:Lev\");\n    }\n\n    // //================================================================================================\n    // // position\n    // //================================================================================================\n\n    function validPayMax(uint16 market, uint256 pay) internal view {\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        require(\n            pay <= $.config[market].maxTradeAmount,\n            \"MarketValid:pay>MaxTradeAmount\"\n        );\n    }\n\n    function validPosition(\n        MarketCache memory _params,\n        PositionProps memory _position,\n        int256 totalFees\n    ) internal view {\n        validSize(_position.size, _params.sizeDelta, _params.isOpen);\n        if (_params.isOpen) {\n            validPayMax(_params.market, _params.collateralDelta);\n            _params.busiType = _params.sizeDelta > 0\n                ? MarketBusinessType.Increase\n                : MarketBusinessType.IncreaseCollateral;\n            validCollateralDelta(\n                _params.busiType,\n                _params.market,\n                _position.collateral,\n                _params.collateralDelta,\n                _position.size,\n                _params.sizeDelta,\n                totalFees\n            );\n        } else {\n            _params.busiType = _params.sizeDelta > 0\n                ? MarketBusinessType.Decrease\n                : MarketBusinessType.DecreaseCollateral;\n            if (_params.sizeDelta != _position.size) {\n                validCollateralDelta(\n                    _params.busiType,\n                    _params.market,\n                    _position.collateral,\n                    _params.collateralDelta,\n                    _position.size,\n                    _params.sizeDelta,\n                    totalFees\n                );\n            }\n        }\n        if (\n            _params.sizeDelta > 0 && _params.liqState == LiquidationState.None\n        ) {\n            require(_params.oraclePrice > 0, \"invalid oracle price\");\n            validSlippagePrice(_params);\n        }\n    }\n\n    function validateLiquidation(\n        uint16 market,\n        int256 fees,\n        int256 liquidateFee,\n        bool raise\n    ) internal view returns (uint8) {\n        // todo\n    }\n\n    // //================================================================================================\n    // // order\n    // //================================================================================================\n\n    function validIncreaseOrder(\n        MarketCache memory _vars,\n        int256 fees\n    ) internal view {\n        validSize(0, _vars.sizeDelta, true);\n        validCollateralDelta(\n            MarketBusinessType.IncreaseCollateral,\n            _vars.market,\n            0,\n            _vars.pay,\n            0,\n            _vars.sizeDelta,\n            fees\n        );\n    }\n\n    function validDecreaseOrder(\n        uint16 market,\n        uint256 collateral,\n        uint256 collateralDelta,\n        uint256 size,\n        uint256 sizeDelta,\n        int256 fees,\n        uint256 decrOrderCount\n    ) internal view {\n        MarketHandler.StorageStruct storage conf = MarketHandler.Storage();\n        require(\n            conf.config[market].decreaseNumLimit >= decrOrderCount + 1,\n            \"Max orders:config limit\"\n        );\n        validSize(size, sizeDelta, false);\n        if (conf.config[market].validDecrease) {\n            validCollateralDelta(\n                MarketBusinessType.Decrease,\n                market,\n                collateral,\n                collateralDelta,\n                size,\n                sizeDelta,\n                fees\n            );\n        }\n    }\n\n    function validCollateralDelta(\n        MarketBusinessType busType,\n        uint16 market,\n        uint256 _collateral,\n        uint256 _collateralDelta,\n        uint256 _size,\n        uint256 _sizeDelta,\n        int256 _fees\n    ) internal view {\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        if (\n            (!$.config[market].allowOpen &&\n                busType <= MarketBusinessType.IncreaseCollateral) ||\n            (!$.config[market].allowClose &&\n                busType >= MarketBusinessType.Decrease)\n        ) {\n            revert(\"MarketValid:MarketClosed\");\n        }\n        if (busType >= MarketBusinessType.Decrease && _sizeDelta == _size)\n            return;\n        uint256 newCollateral = (\n            busType <= MarketBusinessType.IncreaseCollateral\n                ? (_collateral + _collateralDelta)\n                : (_collateral - _collateralDelta)\n        );\n        if (busType == MarketBusinessType.Decrease && newCollateral == 0)\n            return;\n        if (busType <= MarketBusinessType.IncreaseCollateral) {\n            if (_fees > 0) newCollateral -= uint256(_fees);\n            else newCollateral += uint256(-_fees);\n        }\n        require(_collateral > 0, \"MarketValid:Collateral\");\n        require(\n            busType != MarketBusinessType.Increase,\n            \"MarketValid:Collateral\"\n        );\n        require(\n            _collateralDelta >= $.config[market].minPayment,\n            \"MarketValid:Collateral\"\n        );\n    }\n\n    function validOrderAccountAndID(OrderProps memory order) internal pure {\n        require(order.account != address(0), \"invalid order key\");\n        require(order.orderID != 0, \"invalid order key\");\n    }\n\n    function validTPSL(OrderProps memory _order, bool _isLong) internal pure {\n        // remove valid tp sl in order book\n        if (_order.tp > 0) {\n            if (\n                _order.tp > _order.price != _isLong || _order.tp == _order.price\n            ) {\n                revert(\"MarketValid:Tp\");\n            }\n        }\n        if (_order.sl > 0) {\n            if (\n                _isLong != _order.price > _order.sl || _order.sl == _order.price\n            ) {\n                revert(\"MarketValid:Sl\");\n            }\n        }\n    }\n\n    // //================================================================================================\n    // // private\n    // //================================================================================================\n\n    function validMarkPrice(MarketCache memory _inputs) private pure {\n        require(_inputs.oraclePrice > 0, \"MarketValid:!oracle\");\n        require(\n            _inputs.isExec ||\n                ((_inputs.isLong == _inputs.isOpen) ==\n                    (_inputs.price > _inputs.oraclePrice)),\n            \"MarketValid:!front-end price\"\n        );\n    }\n\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function validSlippagePrice(MarketCache memory _inputs) private view {\n        MarketHandler.StorageStruct storage $ = MarketHandler.Storage();\n        _inputs.slippage = min(\n            _inputs.slippage,\n            $.config[_inputs.market].maxSlippage\n        );\n        require(calSlippagePrice(_inputs) > 0, \"MarketValid:input price zero\");\n        validMarkPrice(_inputs);\n    }\n\n    function calSlippagePrice(\n        MarketCache memory _inputs\n    ) internal pure returns (uint256 _slippagePrice) {\n        return\n            _inputs.isLong == _inputs.isOpen\n                ? _inputs.price + _inputs.price.percentMul(_inputs.slippage)\n                : _inputs.price - _inputs.price.percentMul(_inputs.slippage);\n    }\n\n    function validSize(\n        uint256 _size,\n        uint256 _sizeDelta,\n        bool isOpen\n    ) private pure {\n        // size should greater than size delta when decrease position\n        require(isOpen || _size >= _sizeDelta, \"MarketValid:Size\");\n    }\n}\n"
    },
    "src/lib/utils/Calc.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nlibrary Calc {\n    using SignedMath for int256;\n\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\n        if (x >= y) return x - y;\n        else return y - x;\n    }\n\n    function abs(int256 x, int256 y) internal pure returns (int256) {\n        if (x >= y) return x - y;\n        else return y - x;\n    }\n\n    function sum(uint256 a, int256 b) internal pure returns (uint256) {\n        if (b > 0) {\n            return a + b.abs();\n        }\n\n        return a - b.abs();\n    }\n\n    function sum(int256 a, uint256 b) internal pure returns (int256) {\n        return a + SafeCast.toInt256(b);\n    }\n\n    function toSigned(\n        uint256 a,\n        bool isPositive\n    ) internal pure returns (int256) {\n        if (isPositive) {\n            return SafeCast.toInt256(a);\n        } else {\n            return -SafeCast.toInt256(a);\n        }\n    }\n}\n"
    },
    "src/lib/utils/EnumerableValues.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nlibrary EnumerableValues {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    function valuesAt(\n        EnumerableSet.Bytes32Set storage set,\n        uint256 start,\n        uint256 end\n    ) internal view returns (bytes32[] memory) {\n        uint256 max = set.length();\n        if (end > max) {\n            end = max;\n        }\n\n        bytes32[] memory items = new bytes32[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            items[i - start] = set.at(i);\n        }\n\n        return items;\n    }\n\n    function valuesAt(\n        EnumerableSet.AddressSet storage set,\n        uint256 start,\n        uint256 end\n    ) internal view returns (address[] memory) {\n        uint256 max = set.length();\n        if (end > max) {\n            end = max;\n        }\n\n        address[] memory items = new address[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            items[i - start] = set.at(i);\n        }\n\n        return items;\n    }\n\n    function valuesAt(\n        EnumerableSet.UintSet storage set,\n        uint256 start,\n        uint256 end\n    ) internal view returns (uint256[] memory) {\n        uint256 max = set.length();\n        if (end > max) {\n            end = max;\n        }\n\n        uint256[] memory items = new uint256[](end - start);\n        for (uint256 i = start; i < end; ) {\n            items[i - start] = set.at(i);\n            unchecked {\n                ++i;\n            }\n        }\n\n        return items;\n    }\n}\n"
    },
    "src/lib/utils/PercentageMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.10;\n\n/**\n * @title PercentageMath library\n * @author Aave\n * @notice Provides functions to perform percentage calculations\n * @dev PercentageMath are defined by default with 2 decimals of precision (100.00).\n * The precision is indicated by PERCENTAGE_FACTOR\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n *\n */\nlibrary PercentageMath {\n    // Maximum percentage factor (100.00%)\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\n\n    // Half percentage factor (50.00%)\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\n\n    function maxPctIfZero(uint256 m) internal pure returns (uint256) {\n        return m == 0 ? PERCENTAGE_FACTOR : m;\n    }\n\n    function valid(uint256 limit) internal pure {\n        require(\n            limit > 0 && limit <= PERCENTAGE_FACTOR,\n            \"INVALID_PERCENTAGE_FACTOR\"\n        );\n    }\n    /**\n     * @notice Executes a percentage multiplication\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\n     * @param value The value of which the percentage needs to be calculated\n     * @param percentage The percentage of the value to be calculated\n     * @return result value percentmul percentage\n     *\n     */\n\n    function percentMul(\n        uint256 value,\n        uint256 percentage\n    ) internal pure returns (uint256 result) {\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\n        assembly {\n            if iszero(\n                or(\n                    iszero(percentage),\n                    iszero(\n                        gt(\n                            value,\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\n                        )\n                    )\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            result := div(\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\n                PERCENTAGE_FACTOR\n            )\n        }\n    }\n\n    /**\n     * @notice Executes a percentage division\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\n     * @param value The value of which the percentage needs to be calculated\n     * @param percentage The percentage of the value to be calculated\n     * @return result value percentdiv percentage\n     *\n     */\n    function percentDiv(\n        uint256 value,\n        uint256 percentage\n    ) internal pure returns (uint256 result) {\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\n        assembly {\n            if or(\n                iszero(percentage),\n                iszero(\n                    iszero(\n                        gt(\n                            value,\n                            div(\n                                sub(not(0), div(percentage, 2)),\n                                PERCENTAGE_FACTOR\n                            )\n                        )\n                    )\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            result := div(\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\n                percentage\n            )\n        }\n    }\n}\n"
    },
    "src/lib/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nlibrary StringsPlus {\n    string internal constant POSITION_TRIGGER_ABOVE =\n        \"PositionAddMgr:triggerabove\";\n\n    function equals(\n        string memory _str,\n        string memory str\n    ) internal pure returns (bool) {\n        return\n            keccak256(abi.encodePacked(_str)) ==\n            keccak256(abi.encodePacked(str));\n    }\n\n    function isEmpty(string memory _str) internal pure returns (bool) {\n        return (bytes(_str).length == 0);\n    }\n}\n"
    },
    "src/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract MockERC20 is ERC20Upgradeable {\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address to,\n        uint256 amount\n    ) external initializer {\n        __ERC20_init(_name, _symbol);\n        _mint(to, amount);\n    }\n\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n}\n"
    },
    "src/MockVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IVault} from \"./interfaces/IVault.sol\";\n\ncontract MockVault {\n    function borrowFromVault(uint16 market, uint256 amount) external {\n        // do nothing\n    }\n    function withdrawFromVault(address to, uint256 amount) external {\n        // transfer???\n    }\n    function repayToVault(uint16 market, uint256 amount) external {\n        // do nothing????\n    }\n\n    function sellLpFee() external view returns (uint256) {}\n\n    function buyLpFee() external view returns (uint256) {}\n\n    function computationalCosts(\n        bool isBuy,\n        uint256 amount\n    ) external view returns (uint256) {}\n\n    function getLPFee(bool isBuy) external view returns (uint256) {}\n\n    function getUSDBalance() external view returns (uint256) {}\n\n    function getAUM() external view returns (uint256) {\n        return 10000 * 10 ** 6;\n    }\n\n    function fundsUsed(uint16 market) external view returns (uint256) {}\n\n    function priceDecimals() external pure returns (uint256) {\n        return 8;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 1
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}