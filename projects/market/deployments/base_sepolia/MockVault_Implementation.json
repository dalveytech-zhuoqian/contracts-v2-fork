{
  "address": "0xa3847Ae3F4A9Eba554f936DbE55FF951EC817F58",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrowFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyLpFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "computationalCosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "fundsUsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        }
      ],
      "name": "getLPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellLpFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeaacfd6daaca03be7b0b23df066dfdd1590787a00410b4543804a0fee5ea65b1",
  "receipt": {
    "to": null,
    "from": "0x653985cBA14eF0b751bf209fee39De78b4d21676",
    "contractAddress": "0xa3847Ae3F4A9Eba554f936DbE55FF951EC817F58",
    "transactionIndex": 3,
    "gasUsed": "371446",
    "logsBloom": "0x
    "blockHash": "0x9efaf2f95d8471e0c602b57dccaa82235df31c249e77e869dd4ea46a856e3a74",
    "transactionHash": "0xeaacfd6daaca03be7b0b23df066dfdd1590787a00410b4543804a0fee5ea65b1",
    "logs": [],
    "blockNumber": 8834760,
    "cumulativeGasUsed": "844047",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "b74fb3fbc96578d1e641785afbc18eab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"computationalCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"fundsUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"getLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MockVault.sol\":\"MockVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"src/MockVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\n\\ncontract MockVault {\\n    function borrowFromVault(uint16 market, uint256 amount) external {\\n        // do nothing???\\n    }\\n    function withdrawFromVault(address to, uint256 amount) external {\\n        // transfer???\\n    }\\n    function repayToVault(uint16 market, uint256 amount) external {\\n        // do nothing????\\n    }\\n\\n    function sellLpFee() external view returns (uint256) {}\\n\\n    function buyLpFee() external view returns (uint256) {}\\n\\n    function computationalCosts(\\n        bool isBuy,\\n        uint256 amount\\n    ) external view returns (uint256) {}\\n\\n    function getLPFee(bool isBuy) external view returns (uint256) {}\\n\\n    function getUSDBalance() external view returns (uint256) {}\\n\\n    function getAUM() external view returns (uint256) {\\n        return 10000 * 10 ** 6;\\n    }\\n\\n    function fundsUsed(uint16 market) external view returns (uint256) {}\\n\\n    function priceDecimals() external pure returns (uint256) {\\n        return 8;\\n    }\\n}\\n\",\"keccak256\":\"0xe24596e9d48fe4d1e2f7ed478160f4406a68d2500f16830558765a7d42b38af5\",\"license\":\"MIT\"},\"src/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IVault is IERC4626 {\\n    function withdrawFromVault(address to, uint256 amount) external; //transferToVault\\n\\n    function borrowFromVault(uint16 market, uint256 amount) external;\\n\\n    function repayToVault(uint16 market, uint256 amount) external;\\n\\n    //=======================view==============\\n\\n    function sellLpFee() external view returns (uint256);\\n\\n    function buyLpFee() external view returns (uint256);\\n\\n    function computationalCosts(\\n        bool isBuy,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function getLPFee(bool isBuy) external view returns (uint256);\\n\\n    function getUSDBalance() external view returns (uint256);\\n\\n    function getAUM() external view returns (uint256);\\n\\n    function fundsUsed(uint16 market) external view returns (uint256);\\n\\n    function priceDecimals() external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x0ee070871b23af98095c8f6bf20a768786effaf09d9e0e8ff8908c3e259550a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523461001f57610011610024565b6105c161003082396105c190f35b61002a565b60405190565b600080fdfe60806040526004361015610013575b6104ca565b61001e6000356100cd565b806305300b28146100c857806321116f4e146100c35780632e7e8415146100be578063315c1e08146100b95780636dc7b0a1146100b45780636fd3acb4146100af57806381558551146100aa5780639a2f44ca146100a5578063c1201054146100a0578063c7b8b46d1461009b5763f5151f350361000e5761049d565b610468565b610433565b6103fe565b6103b2565b610324565b6102ef565b6102b9565b610256565b6101e1565b610119565b60e01c90565b60405190565b600080fd5b600080fd5b60009103126100ee57565b6100de565b90565b6100ff906100f3565b9052565b9190610117906000602085019401906100f6565b565b34610149576101293660046100e3565b6101456101346104f6565b61013c6100d3565b91829182610103565b0390f35b6100d9565b60018060a01b031690565b6101629061014e565b90565b61016e81610159565b0361017557565b600080fd5b9050359061018782610165565b565b610192816100f3565b0361019957565b600080fd5b905035906101ab82610189565b565b91906040838203126101d657806101ca6101d3926000860161017a565b9360200161019e565b90565b6100de565b60000190565b34610209576101f13660046101ad565b50506101fb6100d3565b80610205816101db565b0390f35b6100d9565b151590565b61021c8161020e565b0361022357565b600080fd5b9050359061023582610213565b565b906020828203126102515761024e91600001610228565b90565b6100de565b346102865761028261027161026c366004610237565b61050c565b6102796100d3565b91829182610103565b0390f35b6100d9565b91906040838203126102b457806102a86102b19260008601610228565b9360200161019e565b90565b6100de565b346102ea576102e66102d56102cf36600461028b565b90610518565b6102dd6100d3565b91829182610103565b0390f35b6100d9565b3461031f576102ff3660046100e3565b61031b61030a610544565b6103126100d3565b91829182610103565b0390f35b6100d9565b34610354576103343660046100e3565b61035061033f61055e565b6103476100d3565b91829182610103565b0390f35b6100d9565b61ffff1690565b61036981610359565b0361037057565b600080fd5b9050359061038282610360565b565b91906040838203126103ad57806103a16103aa9260008601610375565b9360200161019e565b90565b6100de565b346103da576103c2366004610384565b50506103cc6100d3565b806103d6816101db565b0390f35b6100d9565b906020828203126103f9576103f691600001610375565b90565b6100de565b3461042e5761042a6104196104143660046103df565b610569565b6104216100d3565b91829182610103565b0390f35b6100d9565b34610463576104433660046100e3565b61045f61044e610575565b6104566100d3565b91829182610103565b0390f35b6100d9565b34610498576104783660046100e3565b610494610483610580565b61048b6100d3565b91829182610103565b0390f35b6100d9565b346104c5576104ad366004610384565b50506104b76100d3565b806104c1816101db565b0390f35b6100d9565b600080fd5b600090565b90565b90565b6104ee6104e96104f3926104d4565b6104d7565b6100f3565b90565b6104fe6104cf565b5061050960086104da565b90565b506105156104cf565b90565b50506105226104cf565b90565b90565b61053c61053761054192610525565b6104d7565b6100f3565b90565b61054c6104cf565b5061055b6402540be400610528565b90565b6105666104cf565b90565b506105726104cf565b90565b61057d6104cf565b90565b6105886104cf565b9056fea26469706673582212208455fe9be6b3735b2bd609a921dbfd0ac6b2c52193ffa290851e189804fdbede64736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361015610013575b6104ca565b61001e6000356100cd565b806305300b28146100c857806321116f4e146100c35780632e7e8415146100be578063315c1e08146100b95780636dc7b0a1146100b45780636fd3acb4146100af57806381558551146100aa5780639a2f44ca146100a5578063c1201054146100a0578063c7b8b46d1461009b5763f5151f350361000e5761049d565b610468565b610433565b6103fe565b6103b2565b610324565b6102ef565b6102b9565b610256565b6101e1565b610119565b60e01c90565b60405190565b600080fd5b600080fd5b60009103126100ee57565b6100de565b90565b6100ff906100f3565b9052565b9190610117906000602085019401906100f6565b565b34610149576101293660046100e3565b6101456101346104f6565b61013c6100d3565b91829182610103565b0390f35b6100d9565b60018060a01b031690565b6101629061014e565b90565b61016e81610159565b0361017557565b600080fd5b9050359061018782610165565b565b610192816100f3565b0361019957565b600080fd5b905035906101ab82610189565b565b91906040838203126101d657806101ca6101d3926000860161017a565b9360200161019e565b90565b6100de565b60000190565b34610209576101f13660046101ad565b50506101fb6100d3565b80610205816101db565b0390f35b6100d9565b151590565b61021c8161020e565b0361022357565b600080fd5b9050359061023582610213565b565b906020828203126102515761024e91600001610228565b90565b6100de565b346102865761028261027161026c366004610237565b61050c565b6102796100d3565b91829182610103565b0390f35b6100d9565b91906040838203126102b457806102a86102b19260008601610228565b9360200161019e565b90565b6100de565b346102ea576102e66102d56102cf36600461028b565b90610518565b6102dd6100d3565b91829182610103565b0390f35b6100d9565b3461031f576102ff3660046100e3565b61031b61030a610544565b6103126100d3565b91829182610103565b0390f35b6100d9565b34610354576103343660046100e3565b61035061033f61055e565b6103476100d3565b91829182610103565b0390f35b6100d9565b61ffff1690565b61036981610359565b0361037057565b600080fd5b9050359061038282610360565b565b91906040838203126103ad57806103a16103aa9260008601610375565b9360200161019e565b90565b6100de565b346103da576103c2366004610384565b50506103cc6100d3565b806103d6816101db565b0390f35b6100d9565b906020828203126103f9576103f691600001610375565b90565b6100de565b3461042e5761042a6104196104143660046103df565b610569565b6104216100d3565b91829182610103565b0390f35b6100d9565b34610463576104433660046100e3565b61045f61044e610575565b6104566100d3565b91829182610103565b0390f35b6100d9565b34610498576104783660046100e3565b610494610483610580565b61048b6100d3565b91829182610103565b0390f35b6100d9565b346104c5576104ad366004610384565b50506104b76100d3565b806104c1816101db565b0390f35b6100d9565b600080fd5b600090565b90565b90565b6104ee6104e96104f3926104d4565b6104d7565b6100f3565b90565b6104fe6104cf565b5061050960086104da565b90565b506105156104cf565b90565b50506105226104cf565b90565b90565b61053c61053761054192610525565b6104d7565b6100f3565b90565b61054c6104cf565b5061055b6402540be400610528565b90565b6105666104cf565b90565b506105726104cf565b90565b61057d6104cf565b90565b6105886104cf565b9056fea26469706673582212208455fe9be6b3735b2bd609a921dbfd0ac6b2c52193ffa290851e189804fdbede64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}